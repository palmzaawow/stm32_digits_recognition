
NUCLEO-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c60  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009aa4  08009e60  08009e60  0000ae60  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013904  08013904  00015a8c  2**0
                  CONTENTS
  4 .ARM          00000008  08013904  08013904  00014904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801390c  0801390c  00015a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801390c  0801390c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013910  08013910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a8c  20000000  08013914  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023ac  20000aa0  080143a0  00015aa0  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  20002e4c  080143a0  00015e4c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00015a8c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d258  00000000  00000000  00015aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f5  00000000  00000000  00022d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  00024e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000066f  00000000  00000000  000256a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002939b  00000000  00000000  00025d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc07  00000000  00000000  0004f0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe454  00000000  00000000  0005bcb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0015a105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002924  00000000  00000000  0015a18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0015cab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000aa0 	.word	0x20000aa0
 800021c:	00000000 	.word	0x00000000
 8000220:	08009e48 	.word	0x08009e48

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000aa4 	.word	0x20000aa4
 800023c:	08009e48 	.word	0x08009e48

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005d4:	f3bf 8f4f 	dsb	sy
}
 80005d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005da:	f3bf 8f6f 	isb	sy
}
 80005de:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <SCB_EnableICache+0x48>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005e8:	f3bf 8f4f 	dsb	sy
}
 80005ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ee:	f3bf 8f6f 	isb	sy
}
 80005f2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <SCB_EnableICache+0x48>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <SCB_EnableICache+0x48>)
 80005fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005fe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000600:	f3bf 8f4f 	dsb	sy
}
 8000604:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000606:	f3bf 8f6f 	isb	sy
}
 800060a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000622:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <SCB_EnableDCache+0x84>)
 8000624:	2200      	movs	r2, #0
 8000626:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800062a:	f3bf 8f4f 	dsb	sy
}
 800062e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <SCB_EnableDCache+0x84>)
 8000632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000636:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	0b5b      	lsrs	r3, r3, #13
 800063c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000640:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	08db      	lsrs	r3, r3, #3
 8000646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800064a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	015a      	lsls	r2, r3, #5
 8000650:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000654:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800065a:	4911      	ldr	r1, [pc, #68]	@ (80006a0 <SCB_EnableDCache+0x84>)
 800065c:	4313      	orrs	r3, r2
 800065e:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	1e5a      	subs	r2, r3, #1
 8000666:	60ba      	str	r2, [r7, #8]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1ef      	bne.n	800064c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	1e5a      	subs	r2, r3, #1
 8000670:	60fa      	str	r2, [r7, #12]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1e5      	bne.n	8000642 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000676:	f3bf 8f4f 	dsb	sy
}
 800067a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800067c:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <SCB_EnableDCache+0x84>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	4a07      	ldr	r2, [pc, #28]	@ (80006a0 <SCB_EnableDCache+0x84>)
 8000682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000686:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000688:	f3bf 8f4f 	dsb	sy
}
 800068c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800068e:	f3bf 8f6f 	isb	sy
}
 8000692:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000694:	bf00      	nop
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006a8:	f7ff ff92 	bl	80005d0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006ac:	f7ff ffb6 	bl	800061c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 fb17 	bl	8000ce2 <HAL_Init>

  /* USER CODE BEGIN Init */
  flag = 0;
 80006b4:	4b15      	ldr	r3, [pc, #84]	@ (800070c <main+0x68>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f82f 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f000 f8cb 	bl	8000858 <MX_GPIO_Init>
  MX_X_CUBE_AI_Init();
 80006c2:	f002 fedd 	bl	8003480 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  MX_USART3_UART_Init();
 80006c6:	f000 f897 	bl	80007f8 <MX_USART3_UART_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2180      	movs	r1, #128	@ 0x80
 80006ce:	4810      	ldr	r0, [pc, #64]	@ (8000710 <main+0x6c>)
 80006d0:	f000 fdf6 	bl	80012c0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2101      	movs	r1, #1
 80006d8:	480d      	ldr	r0, [pc, #52]	@ (8000710 <main+0x6c>)
 80006da:	f000 fdf1 	bl	80012c0 <HAL_GPIO_WritePin>


//  }


  if (HAL_UART_Receive(&huart3, (uint8_t*)image_buffer, 28 * 28, 5000) == HAL_OK) {
 80006de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80006e2:	f44f 7244 	mov.w	r2, #784	@ 0x310
 80006e6:	490b      	ldr	r1, [pc, #44]	@ (8000714 <main+0x70>)
 80006e8:	480b      	ldr	r0, [pc, #44]	@ (8000718 <main+0x74>)
 80006ea:	f002 f826 	bl	800273a <HAL_UART_Receive>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f4      	bne.n	80006de <main+0x3a>

  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2180      	movs	r1, #128	@ 0x80
 80006f8:	4805      	ldr	r0, [pc, #20]	@ (8000710 <main+0x6c>)
 80006fa:	f000 fde1 	bl	80012c0 <HAL_GPIO_WritePin>
  		flag = 1;
 80006fe:	4b03      	ldr	r3, [pc, #12]	@ (800070c <main+0x68>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
  		MX_X_CUBE_AI_Process();
 8000704:	f002 feca 	bl	800349c <MX_X_CUBE_AI_Process>
  if (HAL_UART_Receive(&huart3, (uint8_t*)image_buffer, 28 * 28, 5000) == HAL_OK) {
 8000708:	e7e9      	b.n	80006de <main+0x3a>
 800070a:	bf00      	nop
 800070c:	20000dcc 	.word	0x20000dcc
 8000710:	40020400 	.word	0x40020400
 8000714:	20000abc 	.word	0x20000abc
 8000718:	20000dd0 	.word	0x20000dd0

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	@ 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2234      	movs	r2, #52	@ 0x34
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f008 fe86 	bl	800943c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <SystemClock_Config+0xd4>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000744:	4a2a      	ldr	r2, [pc, #168]	@ (80007f0 <SystemClock_Config+0xd4>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	@ 0x40
 800074c:	4b28      	ldr	r3, [pc, #160]	@ (80007f0 <SystemClock_Config+0xd4>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000758:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <SystemClock_Config+0xd8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a25      	ldr	r2, [pc, #148]	@ (80007f4 <SystemClock_Config+0xd8>)
 800075e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b23      	ldr	r3, [pc, #140]	@ (80007f4 <SystemClock_Config+0xd8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000770:	2301      	movs	r3, #1
 8000772:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000774:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000778:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000782:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000788:	23d8      	movs	r3, #216	@ 0xd8
 800078a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000790:	2309      	movs	r3, #9
 8000792:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fdf9 	bl	8001394 <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007a8:	f000 f95a 	bl	8000a60 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007ac:	f000 fda2 	bl	80012f4 <HAL_PWREx_EnableOverDrive>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007b6:	f000 f953 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	230f      	movs	r3, #15
 80007bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2302      	movs	r3, #2
 80007c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	2107      	movs	r1, #7
 80007d8:	4618      	mov	r0, r3
 80007da:	f001 f889 	bl	80018f0 <HAL_RCC_ClockConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007e4:	f000 f93c 	bl	8000a60 <Error_Handler>
  }
}
 80007e8:	bf00      	nop
 80007ea:	3750      	adds	r7, #80	@ 0x50
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007fc:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <MX_USART3_UART_Init+0x58>)
 80007fe:	4a15      	ldr	r2, [pc, #84]	@ (8000854 <MX_USART3_UART_Init+0x5c>)
 8000800:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000802:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <MX_USART3_UART_Init+0x58>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_USART3_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <MX_USART3_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_USART3_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_USART3_UART_Init+0x58>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <MX_USART3_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <MX_USART3_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <MX_USART3_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_USART3_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_USART3_UART_Init+0x58>)
 800083c:	f001 fea6 	bl	800258c <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 f90b 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000dd0 	.word	0x20000dd0
 8000854:	40004800 	.word	0x40004800

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	@ 0x30
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b77      	ldr	r3, [pc, #476]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a76      	ldr	r2, [pc, #472]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b74      	ldr	r3, [pc, #464]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	61bb      	str	r3, [r7, #24]
 8000884:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	4b71      	ldr	r3, [pc, #452]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a70      	ldr	r2, [pc, #448]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b6e      	ldr	r3, [pc, #440]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b6b      	ldr	r3, [pc, #428]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a6a      	ldr	r2, [pc, #424]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b68      	ldr	r3, [pc, #416]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b65      	ldr	r3, [pc, #404]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a64      	ldr	r2, [pc, #400]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b62      	ldr	r3, [pc, #392]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	4b5f      	ldr	r3, [pc, #380]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a5e      	ldr	r2, [pc, #376]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b5c      	ldr	r3, [pc, #368]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e6:	4b59      	ldr	r3, [pc, #356]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a58      	ldr	r2, [pc, #352]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 80008ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b56      	ldr	r3, [pc, #344]	@ (8000a4c <MX_GPIO_Init+0x1f4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000904:	4852      	ldr	r0, [pc, #328]	@ (8000a50 <MX_GPIO_Init+0x1f8>)
 8000906:	f000 fcdb 	bl	80012c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2140      	movs	r1, #64	@ 0x40
 800090e:	4851      	ldr	r0, [pc, #324]	@ (8000a54 <MX_GPIO_Init+0x1fc>)
 8000910:	f000 fcd6 	bl	80012c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000914:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	484b      	ldr	r0, [pc, #300]	@ (8000a58 <MX_GPIO_Init+0x200>)
 800092c:	f000 fb1c 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000930:	2332      	movs	r3, #50	@ 0x32
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000940:	230b      	movs	r3, #11
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4843      	ldr	r0, [pc, #268]	@ (8000a58 <MX_GPIO_Init+0x200>)
 800094c:	f000 fb0c 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000950:	2386      	movs	r3, #134	@ 0x86
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000960:	230b      	movs	r3, #11
 8000962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	483c      	ldr	r0, [pc, #240]	@ (8000a5c <MX_GPIO_Init+0x204>)
 800096c:	f000 fafc 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000970:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4831      	ldr	r0, [pc, #196]	@ (8000a50 <MX_GPIO_Init+0x1f8>)
 800098a:	f000 faed 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800098e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a0:	230b      	movs	r3, #11
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4829      	ldr	r0, [pc, #164]	@ (8000a50 <MX_GPIO_Init+0x1f8>)
 80009ac:	f000 fadc 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009b0:	2340      	movs	r3, #64	@ 0x40
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4823      	ldr	r0, [pc, #140]	@ (8000a54 <MX_GPIO_Init+0x1fc>)
 80009c8:	f000 face 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009cc:	2380      	movs	r3, #128	@ 0x80
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	481d      	ldr	r0, [pc, #116]	@ (8000a54 <MX_GPIO_Init+0x1fc>)
 80009e0:	f000 fac2 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009e4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009f6:	230a      	movs	r3, #10
 80009f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4816      	ldr	r0, [pc, #88]	@ (8000a5c <MX_GPIO_Init+0x204>)
 8000a02:	f000 fab1 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4810      	ldr	r0, [pc, #64]	@ (8000a5c <MX_GPIO_Init+0x204>)
 8000a1c:	f000 faa4 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a20:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a32:	230b      	movs	r3, #11
 8000a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <MX_GPIO_Init+0x1fc>)
 8000a3e:	f000 fa93 	bl	8000f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a42:	bf00      	nop
 8000a44:	3730      	adds	r7, #48	@ 0x30
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020400 	.word	0x40020400
 8000a54:	40021800 	.word	0x40021800
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020000 	.word	0x40020000

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <Error_Handler+0x8>

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8e:	4a08      	ldr	r2, [pc, #32]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0ae      	sub	sp, #184	@ 0xb8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2290      	movs	r2, #144	@ 0x90
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f008 fcb1 	bl	800943c <memset>
  if(huart->Instance==USART3)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a2d      	ldr	r2, [pc, #180]	@ (8000b94 <HAL_UART_MspInit+0xe0>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d152      	bne.n	8000b8a <HAL_UART_MspInit+0xd6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ae4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ae8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 f922 	bl	8001d3c <HAL_RCCEx_PeriphCLKConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000afe:	f7ff ffaf 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b02:	4b25      	ldr	r3, [pc, #148]	@ (8000b98 <HAL_UART_MspInit+0xe4>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	4a24      	ldr	r2, [pc, #144]	@ (8000b98 <HAL_UART_MspInit+0xe4>)
 8000b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0e:	4b22      	ldr	r3, [pc, #136]	@ (8000b98 <HAL_UART_MspInit+0xe4>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b98 <HAL_UART_MspInit+0xe4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000b98 <HAL_UART_MspInit+0xe4>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <HAL_UART_MspInit+0xe4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin;
 8000b32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(STLK_RX_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b56:	4619      	mov	r1, r3
 8000b58:	4810      	ldr	r0, [pc, #64]	@ (8000b9c <HAL_UART_MspInit+0xe8>)
 8000b5a:	f000 fa05 	bl	8000f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLK_TX_Pin;
 8000b5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(STLK_TX_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <HAL_UART_MspInit+0xe8>)
 8000b86:	f000 f9ef 	bl	8000f68 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000b8a:	bf00      	nop
 8000b8c:	37b8      	adds	r7, #184	@ 0xb8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40004800 	.word	0x40004800
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020c00 	.word	0x40020c00

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf6:	f000 f8b1 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	@ (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f008 fc62 	bl	80094f8 <__errno>
 8000c34:	4603      	mov	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20080000 	.word	0x20080000
 8000c60:	00000800 	.word	0x00000800
 8000c64:	20000e58 	.word	0x20000e58
 8000c68:	20002e50 	.word	0x20002e50

08000c6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	@ (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c94:	f7ff ffea 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	@ (8000cd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f008 fc21 	bl	8009504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc2:	f7ff fcef 	bl	80006a4 <main>
  bx  lr    
 8000cc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	20000a8c 	.word	0x20000a8c
  ldr r2, =_sidata
 8000cd4:	08013914 	.word	0x08013914
  ldr r2, =_sbss
 8000cd8:	20000aa0 	.word	0x20000aa0
  ldr r4, =_ebss
 8000cdc:	20002e4c 	.word	0x20002e4c

08000ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC_IRQHandler>

08000ce2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce6:	2003      	movs	r0, #3
 8000ce8:	f000 f90a 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f000 f805 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf2:	f7ff febb 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f917 	bl	8000f4e <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 f8ed 	bl	8000f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	@ (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000e5c 	.word	0x20000e5c

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	@ (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000e5c 	.word	0x20000e5c

08000d9c <__NVIC_SetPriorityGrouping>:
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x40>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x40>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00
 8000de0:	05fa0000 	.word	0x05fa0000

08000de4 <__NVIC_GetPriorityGrouping>:
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_SetPriority>:
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	@ (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	@ (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	@ 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	@ 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f7ff ff8e 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff47 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff5c 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff8e 	bl	8000e54 <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff5d 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffb0 	bl	8000ebc <SysTick_Config>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	@ 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	e175      	b.n	8001274 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	f040 8164 	bne.w	800126e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d005      	beq.n	8000fbe <HAL_GPIO_Init+0x56>
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d130      	bne.n	8001020 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	091b      	lsrs	r3, r3, #4
 800100a:	f003 0201 	and.w	r2, r3, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b03      	cmp	r3, #3
 800102a:	d017      	beq.n	800105c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d123      	bne.n	80010b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	08da      	lsrs	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3208      	adds	r2, #8
 80010aa:	69b9      	ldr	r1, [r7, #24]
 80010ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0203 	and.w	r2, r3, #3
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 80be 	beq.w	800126e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	4b66      	ldr	r3, [pc, #408]	@ (800128c <HAL_GPIO_Init+0x324>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f6:	4a65      	ldr	r2, [pc, #404]	@ (800128c <HAL_GPIO_Init+0x324>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010fe:	4b63      	ldr	r3, [pc, #396]	@ (800128c <HAL_GPIO_Init+0x324>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800110a:	4a61      	ldr	r2, [pc, #388]	@ (8001290 <HAL_GPIO_Init+0x328>)
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3302      	adds	r3, #2
 8001112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a58      	ldr	r2, [pc, #352]	@ (8001294 <HAL_GPIO_Init+0x32c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d037      	beq.n	80011a6 <HAL_GPIO_Init+0x23e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a57      	ldr	r2, [pc, #348]	@ (8001298 <HAL_GPIO_Init+0x330>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d031      	beq.n	80011a2 <HAL_GPIO_Init+0x23a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a56      	ldr	r2, [pc, #344]	@ (800129c <HAL_GPIO_Init+0x334>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d02b      	beq.n	800119e <HAL_GPIO_Init+0x236>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a55      	ldr	r2, [pc, #340]	@ (80012a0 <HAL_GPIO_Init+0x338>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d025      	beq.n	800119a <HAL_GPIO_Init+0x232>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a54      	ldr	r2, [pc, #336]	@ (80012a4 <HAL_GPIO_Init+0x33c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d01f      	beq.n	8001196 <HAL_GPIO_Init+0x22e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a53      	ldr	r2, [pc, #332]	@ (80012a8 <HAL_GPIO_Init+0x340>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d019      	beq.n	8001192 <HAL_GPIO_Init+0x22a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a52      	ldr	r2, [pc, #328]	@ (80012ac <HAL_GPIO_Init+0x344>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0x226>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a51      	ldr	r2, [pc, #324]	@ (80012b0 <HAL_GPIO_Init+0x348>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00d      	beq.n	800118a <HAL_GPIO_Init+0x222>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a50      	ldr	r2, [pc, #320]	@ (80012b4 <HAL_GPIO_Init+0x34c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d007      	beq.n	8001186 <HAL_GPIO_Init+0x21e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4f      	ldr	r2, [pc, #316]	@ (80012b8 <HAL_GPIO_Init+0x350>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_GPIO_Init+0x21a>
 800117e:	2309      	movs	r3, #9
 8001180:	e012      	b.n	80011a8 <HAL_GPIO_Init+0x240>
 8001182:	230a      	movs	r3, #10
 8001184:	e010      	b.n	80011a8 <HAL_GPIO_Init+0x240>
 8001186:	2308      	movs	r3, #8
 8001188:	e00e      	b.n	80011a8 <HAL_GPIO_Init+0x240>
 800118a:	2307      	movs	r3, #7
 800118c:	e00c      	b.n	80011a8 <HAL_GPIO_Init+0x240>
 800118e:	2306      	movs	r3, #6
 8001190:	e00a      	b.n	80011a8 <HAL_GPIO_Init+0x240>
 8001192:	2305      	movs	r3, #5
 8001194:	e008      	b.n	80011a8 <HAL_GPIO_Init+0x240>
 8001196:	2304      	movs	r3, #4
 8001198:	e006      	b.n	80011a8 <HAL_GPIO_Init+0x240>
 800119a:	2303      	movs	r3, #3
 800119c:	e004      	b.n	80011a8 <HAL_GPIO_Init+0x240>
 800119e:	2302      	movs	r3, #2
 80011a0:	e002      	b.n	80011a8 <HAL_GPIO_Init+0x240>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <HAL_GPIO_Init+0x240>
 80011a6:	2300      	movs	r3, #0
 80011a8:	69fa      	ldr	r2, [r7, #28]
 80011aa:	f002 0203 	and.w	r2, r2, #3
 80011ae:	0092      	lsls	r2, r2, #2
 80011b0:	4093      	lsls	r3, r2
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011b8:	4935      	ldr	r1, [pc, #212]	@ (8001290 <HAL_GPIO_Init+0x328>)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c6:	4b3d      	ldr	r3, [pc, #244]	@ (80012bc <HAL_GPIO_Init+0x354>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ea:	4a34      	ldr	r2, [pc, #208]	@ (80012bc <HAL_GPIO_Init+0x354>)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f0:	4b32      	ldr	r3, [pc, #200]	@ (80012bc <HAL_GPIO_Init+0x354>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001214:	4a29      	ldr	r2, [pc, #164]	@ (80012bc <HAL_GPIO_Init+0x354>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800121a:	4b28      	ldr	r3, [pc, #160]	@ (80012bc <HAL_GPIO_Init+0x354>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800123e:	4a1f      	ldr	r2, [pc, #124]	@ (80012bc <HAL_GPIO_Init+0x354>)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001244:	4b1d      	ldr	r3, [pc, #116]	@ (80012bc <HAL_GPIO_Init+0x354>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001268:	4a14      	ldr	r2, [pc, #80]	@ (80012bc <HAL_GPIO_Init+0x354>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3301      	adds	r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	2b0f      	cmp	r3, #15
 8001278:	f67f ae86 	bls.w	8000f88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3724      	adds	r7, #36	@ 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40013800 	.word	0x40013800
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40021400 	.word	0x40021400
 80012ac:	40021800 	.word	0x40021800
 80012b0:	40021c00 	.word	0x40021c00
 80012b4:	40022000 	.word	0x40022000
 80012b8:	40022400 	.word	0x40022400
 80012bc:	40013c00 	.word	0x40013c00

080012c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
 80012cc:	4613      	mov	r3, r2
 80012ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d0:	787b      	ldrb	r3, [r7, #1]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012dc:	e003      	b.n	80012e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	041a      	lsls	r2, r3, #16
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	619a      	str	r2, [r3, #24]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b23      	ldr	r3, [pc, #140]	@ (800138c <HAL_PWREx_EnableOverDrive+0x98>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	4a22      	ldr	r2, [pc, #136]	@ (800138c <HAL_PWREx_EnableOverDrive+0x98>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	@ 0x40
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_PWREx_EnableOverDrive+0x98>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a1d      	ldr	r2, [pc, #116]	@ (8001390 <HAL_PWREx_EnableOverDrive+0x9c>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001320:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001322:	f7ff fd2f 	bl	8000d84 <HAL_GetTick>
 8001326:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001328:	e009      	b.n	800133e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800132a:	f7ff fd2b 	bl	8000d84 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001338:	d901      	bls.n	800133e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e022      	b.n	8001384 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800134a:	d1ee      	bne.n	800132a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800134c:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <HAL_PWREx_EnableOverDrive+0x9c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0f      	ldr	r2, [pc, #60]	@ (8001390 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001356:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001358:	f7ff fd14 	bl	8000d84 <HAL_GetTick>
 800135c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800135e:	e009      	b.n	8001374 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001360:	f7ff fd10 	bl	8000d84 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800136e:	d901      	bls.n	8001374 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e007      	b.n	8001384 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001380:	d1ee      	bne.n	8001360 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	40007000 	.word	0x40007000

08001394 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e29b      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8087 	beq.w	80014c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013b8:	4b96      	ldr	r3, [pc, #600]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 030c 	and.w	r3, r3, #12
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d00c      	beq.n	80013de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c4:	4b93      	ldr	r3, [pc, #588]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d112      	bne.n	80013f6 <HAL_RCC_OscConfig+0x62>
 80013d0:	4b90      	ldr	r3, [pc, #576]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013dc:	d10b      	bne.n	80013f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013de:	4b8d      	ldr	r3, [pc, #564]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d06c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x130>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d168      	bne.n	80014c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e275      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x7a>
 8001400:	4b84      	ldr	r3, [pc, #528]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a83      	ldr	r2, [pc, #524]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001406:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e02e      	b.n	800146c <HAL_RCC_OscConfig+0xd8>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x9c>
 8001416:	4b7f      	ldr	r3, [pc, #508]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a7e      	ldr	r2, [pc, #504]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800141c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b7c      	ldr	r3, [pc, #496]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a7b      	ldr	r2, [pc, #492]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001428:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e01d      	b.n	800146c <HAL_RCC_OscConfig+0xd8>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0xc0>
 800143a:	4b76      	ldr	r3, [pc, #472]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a75      	ldr	r2, [pc, #468]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b73      	ldr	r3, [pc, #460]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a72      	ldr	r2, [pc, #456]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e00b      	b.n	800146c <HAL_RCC_OscConfig+0xd8>
 8001454:	4b6f      	ldr	r3, [pc, #444]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a6e      	ldr	r2, [pc, #440]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800145a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b6c      	ldr	r3, [pc, #432]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a6b      	ldr	r2, [pc, #428]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800146a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fc86 	bl	8000d84 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fc82 	bl	8000d84 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	@ 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e229      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	4b61      	ldr	r3, [pc, #388]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0xe8>
 800149a:	e014      	b.n	80014c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fc72 	bl	8000d84 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fc6e 	bl	8000d84 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	@ 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e215      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	4b57      	ldr	r3, [pc, #348]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x110>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d069      	beq.n	80015a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014d2:	4b50      	ldr	r3, [pc, #320]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00b      	beq.n	80014f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014de:	4b4d      	ldr	r3, [pc, #308]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d11c      	bne.n	8001524 <HAL_RCC_OscConfig+0x190>
 80014ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d116      	bne.n	8001524 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f6:	4b47      	ldr	r3, [pc, #284]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_RCC_OscConfig+0x17a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e1e9      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150e:	4b41      	ldr	r3, [pc, #260]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	493d      	ldr	r1, [pc, #244]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001522:	e040      	b.n	80015a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d023      	beq.n	8001574 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152c:	4b39      	ldr	r3, [pc, #228]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a38      	ldr	r2, [pc, #224]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff fc24 	bl	8000d84 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001540:	f7ff fc20 	bl	8000d84 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e1c7      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001552:	4b30      	ldr	r3, [pc, #192]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155e:	4b2d      	ldr	r3, [pc, #180]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4929      	ldr	r1, [pc, #164]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
 8001572:	e018      	b.n	80015a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001574:	4b27      	ldr	r3, [pc, #156]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a26      	ldr	r2, [pc, #152]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fc00 	bl	8000d84 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001588:	f7ff fbfc 	bl	8000d84 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1a3      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159a:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d038      	beq.n	8001624 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d019      	beq.n	80015ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80015bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015be:	4a15      	ldr	r2, [pc, #84]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c6:	f7ff fbdd 	bl	8000d84 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ce:	f7ff fbd9 	bl	8000d84 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e180      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80015e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x23a>
 80015ec:	e01a      	b.n	8001624 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80015f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015f2:	4a08      	ldr	r2, [pc, #32]	@ (8001614 <HAL_RCC_OscConfig+0x280>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fa:	f7ff fbc3 	bl	8000d84 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001600:	e00a      	b.n	8001618 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001602:	f7ff fbbf 	bl	8000d84 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d903      	bls.n	8001618 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e166      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
 8001614:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001618:	4b92      	ldr	r3, [pc, #584]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 800161a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1ee      	bne.n	8001602 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80a4 	beq.w	800177a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001632:	4b8c      	ldr	r3, [pc, #560]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10d      	bne.n	800165a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b89      	ldr	r3, [pc, #548]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	4a88      	ldr	r2, [pc, #544]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	@ 0x40
 800164a:	4b86      	ldr	r3, [pc, #536]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001656:	2301      	movs	r3, #1
 8001658:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165a:	4b83      	ldr	r3, [pc, #524]	@ (8001868 <HAL_RCC_OscConfig+0x4d4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001662:	2b00      	cmp	r3, #0
 8001664:	d118      	bne.n	8001698 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001666:	4b80      	ldr	r3, [pc, #512]	@ (8001868 <HAL_RCC_OscConfig+0x4d4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a7f      	ldr	r2, [pc, #508]	@ (8001868 <HAL_RCC_OscConfig+0x4d4>)
 800166c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001672:	f7ff fb87 	bl	8000d84 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167a:	f7ff fb83 	bl	8000d84 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b64      	cmp	r3, #100	@ 0x64
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e12a      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168c:	4b76      	ldr	r3, [pc, #472]	@ (8001868 <HAL_RCC_OscConfig+0x4d4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d106      	bne.n	80016ae <HAL_RCC_OscConfig+0x31a>
 80016a0:	4b70      	ldr	r3, [pc, #448]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a4:	4a6f      	ldr	r2, [pc, #444]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ac:	e02d      	b.n	800170a <HAL_RCC_OscConfig+0x376>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x33c>
 80016b6:	4b6b      	ldr	r3, [pc, #428]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ba:	4a6a      	ldr	r2, [pc, #424]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c2:	4b68      	ldr	r3, [pc, #416]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c6:	4a67      	ldr	r2, [pc, #412]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ce:	e01c      	b.n	800170a <HAL_RCC_OscConfig+0x376>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d10c      	bne.n	80016f2 <HAL_RCC_OscConfig+0x35e>
 80016d8:	4b62      	ldr	r3, [pc, #392]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016dc:	4a61      	ldr	r2, [pc, #388]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e4:	4b5f      	ldr	r3, [pc, #380]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e8:	4a5e      	ldr	r2, [pc, #376]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f0:	e00b      	b.n	800170a <HAL_RCC_OscConfig+0x376>
 80016f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016fe:	4b59      	ldr	r3, [pc, #356]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001702:	4a58      	ldr	r2, [pc, #352]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d015      	beq.n	800173e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001712:	f7ff fb37 	bl	8000d84 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171a:	f7ff fb33 	bl	8000d84 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e0d8      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001730:	4b4c      	ldr	r3, [pc, #304]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0ee      	beq.n	800171a <HAL_RCC_OscConfig+0x386>
 800173c:	e014      	b.n	8001768 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173e:	f7ff fb21 	bl	8000d84 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001744:	e00a      	b.n	800175c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7ff fb1d 	bl	8000d84 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001754:	4293      	cmp	r3, r2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e0c2      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175c:	4b41      	ldr	r3, [pc, #260]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1ee      	bne.n	8001746 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d105      	bne.n	800177a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800176e:	4b3d      	ldr	r3, [pc, #244]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	4a3c      	ldr	r2, [pc, #240]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001774:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80ae 	beq.w	80018e0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001784:	4b37      	ldr	r3, [pc, #220]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b08      	cmp	r3, #8
 800178e:	d06d      	beq.n	800186c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d14b      	bne.n	8001830 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001798:	4b32      	ldr	r3, [pc, #200]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a31      	ldr	r2, [pc, #196]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 800179e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff faee 	bl	8000d84 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff faea 	bl	8000d84 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e091      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017be:	4b29      	ldr	r3, [pc, #164]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69da      	ldr	r2, [r3, #28]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	019b      	lsls	r3, r3, #6
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e0:	085b      	lsrs	r3, r3, #1
 80017e2:	3b01      	subs	r3, #1
 80017e4:	041b      	lsls	r3, r3, #16
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ec:	061b      	lsls	r3, r3, #24
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f4:	071b      	lsls	r3, r3, #28
 80017f6:	491b      	ldr	r1, [pc, #108]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fc:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a18      	ldr	r2, [pc, #96]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001802:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fabc 	bl	8000d84 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff fab8 	bl	8000d84 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e05f      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x47c>
 800182e:	e057      	b.n	80018e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0b      	ldr	r2, [pc, #44]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001836:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800183a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff faa2 	bl	8000d84 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff fa9e 	bl	8000d84 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e045      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001856:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <HAL_RCC_OscConfig+0x4d0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x4b0>
 8001862:	e03d      	b.n	80018e0 <HAL_RCC_OscConfig+0x54c>
 8001864:	40023800 	.word	0x40023800
 8001868:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800186c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ec <HAL_RCC_OscConfig+0x558>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d030      	beq.n	80018dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d129      	bne.n	80018dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d122      	bne.n	80018dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800189c:	4013      	ands	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d119      	bne.n	80018dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b2:	085b      	lsrs	r3, r3, #1
 80018b4:	3b01      	subs	r3, #1
 80018b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d10f      	bne.n	80018dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d107      	bne.n	80018dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800

080018f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0d0      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001908:	4b6a      	ldr	r3, [pc, #424]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d910      	bls.n	8001938 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b67      	ldr	r3, [pc, #412]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 020f 	bic.w	r2, r3, #15
 800191e:	4965      	ldr	r1, [pc, #404]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b63      	ldr	r3, [pc, #396]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0b8      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001950:	4b59      	ldr	r3, [pc, #356]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a58      	ldr	r2, [pc, #352]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001956:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800195a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001968:	4b53      	ldr	r3, [pc, #332]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a52      	ldr	r2, [pc, #328]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 800196e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001972:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001974:	4b50      	ldr	r3, [pc, #320]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	494d      	ldr	r1, [pc, #308]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d040      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	4b47      	ldr	r3, [pc, #284]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d115      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e07f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	4b41      	ldr	r3, [pc, #260]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e073      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e06b      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d2:	4b39      	ldr	r3, [pc, #228]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f023 0203 	bic.w	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4936      	ldr	r1, [pc, #216]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019e4:	f7ff f9ce 	bl	8000d84 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ec:	f7ff f9ca 	bl	8000d84 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e053      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 020c 	and.w	r2, r3, #12
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d1eb      	bne.n	80019ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a14:	4b27      	ldr	r3, [pc, #156]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d210      	bcs.n	8001a44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 020f 	bic.w	r2, r3, #15
 8001a2a:	4922      	ldr	r1, [pc, #136]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b20      	ldr	r3, [pc, #128]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e032      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a50:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4916      	ldr	r1, [pc, #88]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d009      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a6e:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	490e      	ldr	r1, [pc, #56]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a82:	f000 f821 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8001a86:	4602      	mov	r2, r0
 8001a88:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	490a      	ldr	r1, [pc, #40]	@ (8001abc <HAL_RCC_ClockConfig+0x1cc>)
 8001a94:	5ccb      	ldrb	r3, [r1, r3]
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1d0>)
 8001a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1d4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f92a 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023c00 	.word	0x40023c00
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	08009f70 	.word	0x08009f70
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001acc:	b094      	sub	sp, #80	@ 0x50
 8001ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ad8:	2300      	movs	r3, #0
 8001ada:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ae0:	4b79      	ldr	r3, [pc, #484]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d00d      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0x40>
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	f200 80e1 	bhi.w	8001cb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x34>
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001afa:	e0db      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b73      	ldr	r3, [pc, #460]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x204>)
 8001afe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b00:	e0db      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b02:	4b73      	ldr	r3, [pc, #460]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b06:	e0d8      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b08:	4b6f      	ldr	r3, [pc, #444]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b12:	4b6d      	ldr	r3, [pc, #436]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d063      	beq.n	8001be6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	099b      	lsrs	r3, r3, #6
 8001b24:	2200      	movs	r2, #0
 8001b26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b30:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b32:	2300      	movs	r3, #0
 8001b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b3a:	4622      	mov	r2, r4
 8001b3c:	462b      	mov	r3, r5
 8001b3e:	f04f 0000 	mov.w	r0, #0
 8001b42:	f04f 0100 	mov.w	r1, #0
 8001b46:	0159      	lsls	r1, r3, #5
 8001b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b4c:	0150      	lsls	r0, r2, #5
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4621      	mov	r1, r4
 8001b54:	1a51      	subs	r1, r2, r1
 8001b56:	6139      	str	r1, [r7, #16]
 8001b58:	4629      	mov	r1, r5
 8001b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b6c:	4659      	mov	r1, fp
 8001b6e:	018b      	lsls	r3, r1, #6
 8001b70:	4651      	mov	r1, sl
 8001b72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b76:	4651      	mov	r1, sl
 8001b78:	018a      	lsls	r2, r1, #6
 8001b7a:	4651      	mov	r1, sl
 8001b7c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b80:	4659      	mov	r1, fp
 8001b82:	eb63 0901 	sbc.w	r9, r3, r1
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b9a:	4690      	mov	r8, r2
 8001b9c:	4699      	mov	r9, r3
 8001b9e:	4623      	mov	r3, r4
 8001ba0:	eb18 0303 	adds.w	r3, r8, r3
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	eb49 0303 	adc.w	r3, r9, r3
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bba:	4629      	mov	r1, r5
 8001bbc:	024b      	lsls	r3, r1, #9
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	024a      	lsls	r2, r1, #9
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bce:	2200      	movs	r2, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bd8:	f7fe fb82 	bl	80002e0 <__aeabi_uldivmod>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4613      	mov	r3, r2
 8001be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001be4:	e058      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be6:	4b38      	ldr	r3, [pc, #224]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	099b      	lsrs	r3, r3, #6
 8001bec:	2200      	movs	r2, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c00:	4642      	mov	r2, r8
 8001c02:	464b      	mov	r3, r9
 8001c04:	f04f 0000 	mov.w	r0, #0
 8001c08:	f04f 0100 	mov.w	r1, #0
 8001c0c:	0159      	lsls	r1, r3, #5
 8001c0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c12:	0150      	lsls	r0, r2, #5
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4641      	mov	r1, r8
 8001c1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c1e:	4649      	mov	r1, r9
 8001c20:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c38:	ebb2 040a 	subs.w	r4, r2, sl
 8001c3c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	00eb      	lsls	r3, r5, #3
 8001c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c4e:	00e2      	lsls	r2, r4, #3
 8001c50:	4614      	mov	r4, r2
 8001c52:	461d      	mov	r5, r3
 8001c54:	4643      	mov	r3, r8
 8001c56:	18e3      	adds	r3, r4, r3
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	464b      	mov	r3, r9
 8001c5c:	eb45 0303 	adc.w	r3, r5, r3
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c6e:	4629      	mov	r1, r5
 8001c70:	028b      	lsls	r3, r1, #10
 8001c72:	4621      	mov	r1, r4
 8001c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c78:	4621      	mov	r1, r4
 8001c7a:	028a      	lsls	r2, r1, #10
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c82:	2200      	movs	r2, #0
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	61fa      	str	r2, [r7, #28]
 8001c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c8c:	f7fe fb28 	bl	80002e0 <__aeabi_uldivmod>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4613      	mov	r3, r2
 8001c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c98:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ca8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cb2:	e002      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x204>)
 8001cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3750      	adds	r7, #80	@ 0x50
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	00f42400 	.word	0x00f42400
 8001cd0:	007a1200 	.word	0x007a1200

08001cd4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	@ (8001ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000000 	.word	0x20000000

08001cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cf0:	f7ff fff0 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	0a9b      	lsrs	r3, r3, #10
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	4903      	ldr	r1, [pc, #12]	@ (8001d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	08009f80 	.word	0x08009f80

08001d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d18:	f7ff ffdc 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0b5b      	lsrs	r3, r3, #13
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4903      	ldr	r1, [pc, #12]	@ (8001d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	08009f80 	.word	0x08009f80

08001d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d012      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d64:	4b69      	ldr	r3, [pc, #420]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4a68      	ldr	r2, [pc, #416]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d6a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d6e:	6093      	str	r3, [r2, #8]
 8001d70:	4b66      	ldr	r3, [pc, #408]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d78:	4964      	ldr	r1, [pc, #400]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d017      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d96:	4b5d      	ldr	r3, [pc, #372]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d9c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da4:	4959      	ldr	r1, [pc, #356]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001db4:	d101      	bne.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001db6:	2301      	movs	r3, #1
 8001db8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d017      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001dd2:	4b4e      	ldr	r3, [pc, #312]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dd8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	494a      	ldr	r1, [pc, #296]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001df0:	d101      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001df2:	2301      	movs	r3, #1
 8001df4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 808b 	beq.w	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e20:	4b3a      	ldr	r3, [pc, #232]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	4a39      	ldr	r2, [pc, #228]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2c:	4b37      	ldr	r3, [pc, #220]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e38:	4b35      	ldr	r3, [pc, #212]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a34      	ldr	r2, [pc, #208]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e44:	f7fe ff9e 	bl	8000d84 <HAL_GetTick>
 8001e48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4c:	f7fe ff9a 	bl	8000d84 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	@ 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e38f      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e6a:	4b28      	ldr	r3, [pc, #160]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d035      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d02e      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e88:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e92:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e96:	4a1d      	ldr	r2, [pc, #116]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e9c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea2:	4a1a      	ldr	r2, [pc, #104]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ea8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001eaa:	4a18      	ldr	r2, [pc, #96]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001eb0:	4b16      	ldr	r3, [pc, #88]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d114      	bne.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7fe ff62 	bl	8000d84 <HAL_GetTick>
 8001ec0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec4:	f7fe ff5e 	bl	8000d84 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e351      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eda:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0ee      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001ef2:	d111      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ef4:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f00:	4b04      	ldr	r3, [pc, #16]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f02:	400b      	ands	r3, r1
 8001f04:	4901      	ldr	r1, [pc, #4]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40007000 	.word	0x40007000
 8001f14:	0ffffcff 	.word	0x0ffffcff
 8001f18:	4bac      	ldr	r3, [pc, #688]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4aab      	ldr	r2, [pc, #684]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f1e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001f22:	6093      	str	r3, [r2, #8]
 8001f24:	4ba9      	ldr	r3, [pc, #676]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f30:	49a6      	ldr	r1, [pc, #664]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d010      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f42:	4ba2      	ldr	r3, [pc, #648]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f48:	4aa0      	ldr	r2, [pc, #640]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f52:	4b9e      	ldr	r3, [pc, #632]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f54:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f5c:	499b      	ldr	r1, [pc, #620]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f70:	4b96      	ldr	r3, [pc, #600]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f76:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f7e:	4993      	ldr	r1, [pc, #588]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f92:	4b8e      	ldr	r3, [pc, #568]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fa0:	498a      	ldr	r1, [pc, #552]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fb4:	4b85      	ldr	r3, [pc, #532]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fc2:	4982      	ldr	r1, [pc, #520]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001fd6:	4b7d      	ldr	r3, [pc, #500]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fdc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe4:	4979      	ldr	r1, [pc, #484]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ff8:	4b74      	ldr	r3, [pc, #464]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffe:	f023 0203 	bic.w	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	4971      	ldr	r1, [pc, #452]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800201a:	4b6c      	ldr	r3, [pc, #432]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002020:	f023 020c 	bic.w	r2, r3, #12
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002028:	4968      	ldr	r1, [pc, #416]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800203c:	4b63      	ldr	r3, [pc, #396]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002042:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204a:	4960      	ldr	r1, [pc, #384]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800205e:	4b5b      	ldr	r3, [pc, #364]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002064:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800206c:	4957      	ldr	r1, [pc, #348]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00a      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002080:	4b52      	ldr	r3, [pc, #328]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002086:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208e:	494f      	ldr	r1, [pc, #316]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80020a2:	4b4a      	ldr	r3, [pc, #296]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b0:	4946      	ldr	r1, [pc, #280]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80020c4:	4b41      	ldr	r3, [pc, #260]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d2:	493e      	ldr	r1, [pc, #248]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80020e6:	4b39      	ldr	r3, [pc, #228]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f4:	4935      	ldr	r1, [pc, #212]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00a      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002108:	4b30      	ldr	r3, [pc, #192]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002116:	492d      	ldr	r1, [pc, #180]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d011      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800212a:	4b28      	ldr	r3, [pc, #160]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002130:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002138:	4924      	ldr	r1, [pc, #144]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002144:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002148:	d101      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800214a:	2301      	movs	r3, #1
 800214c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800215a:	2301      	movs	r3, #1
 800215c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800216a:	4b18      	ldr	r3, [pc, #96]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002170:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002178:	4914      	ldr	r1, [pc, #80]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00b      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800218c:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002192:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800219c:	490b      	ldr	r1, [pc, #44]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00f      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80021b0:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021c0:	4902      	ldr	r1, [pc, #8]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021c8:	e002      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00b      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021dc:	4b8a      	ldr	r3, [pc, #552]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ec:	4986      	ldr	r1, [pc, #536]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00b      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002200:	4b81      	ldr	r3, [pc, #516]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002202:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002206:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002210:	497d      	ldr	r1, [pc, #500]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d006      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80d6 	beq.w	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800222c:	4b76      	ldr	r3, [pc, #472]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a75      	ldr	r2, [pc, #468]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002232:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002238:	f7fe fda4 	bl	8000d84 <HAL_GetTick>
 800223c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002240:	f7fe fda0 	bl	8000d84 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	@ 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e195      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002252:	4b6d      	ldr	r3, [pc, #436]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d021      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x572>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800226e:	2b00      	cmp	r3, #0
 8002270:	d11d      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002272:	4b65      	ldr	r3, [pc, #404]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002280:	4b61      	ldr	r3, [pc, #388]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002282:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002286:	0e1b      	lsrs	r3, r3, #24
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	019a      	lsls	r2, r3, #6
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	041b      	lsls	r3, r3, #16
 8002298:	431a      	orrs	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	061b      	lsls	r3, r3, #24
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	071b      	lsls	r3, r3, #28
 80022a6:	4958      	ldr	r1, [pc, #352]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022c2:	d00a      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d02e      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022d8:	d129      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022da:	4b4b      	ldr	r3, [pc, #300]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022e8:	4b47      	ldr	r3, [pc, #284]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022ee:	0f1b      	lsrs	r3, r3, #28
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	019a      	lsls	r2, r3, #6
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	041b      	lsls	r3, r3, #16
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	061b      	lsls	r3, r3, #24
 8002308:	431a      	orrs	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	071b      	lsls	r3, r3, #28
 800230e:	493e      	ldr	r1, [pc, #248]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002316:	4b3c      	ldr	r3, [pc, #240]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800231c:	f023 021f 	bic.w	r2, r3, #31
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	3b01      	subs	r3, #1
 8002326:	4938      	ldr	r1, [pc, #224]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d01d      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800233a:	4b33      	ldr	r3, [pc, #204]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800233c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002340:	0e1b      	lsrs	r3, r3, #24
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002348:	4b2f      	ldr	r3, [pc, #188]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800234a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800234e:	0f1b      	lsrs	r3, r3, #28
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	019a      	lsls	r2, r3, #6
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	431a      	orrs	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	061b      	lsls	r3, r3, #24
 8002368:	431a      	orrs	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	071b      	lsls	r3, r3, #28
 800236e:	4926      	ldr	r1, [pc, #152]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d011      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	019a      	lsls	r2, r3, #6
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	041b      	lsls	r3, r3, #16
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	061b      	lsls	r3, r3, #24
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	071b      	lsls	r3, r3, #28
 800239e:	491a      	ldr	r1, [pc, #104]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023a6:	4b18      	ldr	r3, [pc, #96]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a17      	ldr	r2, [pc, #92]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b2:	f7fe fce7 	bl	8000d84 <HAL_GetTick>
 80023b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023ba:	f7fe fce3 	bl	8000d84 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b64      	cmp	r3, #100	@ 0x64
 80023c6:	d901      	bls.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e0d8      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	f040 80ce 	bne.w	800257c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80023e0:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a08      	ldr	r2, [pc, #32]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ec:	f7fe fcca 	bl	8000d84 <HAL_GetTick>
 80023f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023f2:	e00b      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023f4:	f7fe fcc6 	bl	8000d84 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	@ 0x64
 8002400:	d904      	bls.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e0bb      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800240c:	4b5e      	ldr	r3, [pc, #376]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002418:	d0ec      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002436:	2b00      	cmp	r3, #0
 8002438:	d02e      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	d12a      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002442:	4b51      	ldr	r3, [pc, #324]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002450:	4b4d      	ldr	r3, [pc, #308]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002456:	0f1b      	lsrs	r3, r3, #28
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	019a      	lsls	r2, r3, #6
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	041b      	lsls	r3, r3, #16
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	061b      	lsls	r3, r3, #24
 8002470:	431a      	orrs	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	071b      	lsls	r3, r3, #28
 8002476:	4944      	ldr	r1, [pc, #272]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800247e:	4b42      	ldr	r3, [pc, #264]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002484:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248c:	3b01      	subs	r3, #1
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	493d      	ldr	r1, [pc, #244]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d022      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024ac:	d11d      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024ae:	4b36      	ldr	r3, [pc, #216]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b4:	0e1b      	lsrs	r3, r3, #24
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024bc:	4b32      	ldr	r3, [pc, #200]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c2:	0f1b      	lsrs	r3, r3, #28
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	019a      	lsls	r2, r3, #6
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	431a      	orrs	r2, r3
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	061b      	lsls	r3, r3, #24
 80024dc:	431a      	orrs	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	071b      	lsls	r3, r3, #28
 80024e2:	4929      	ldr	r1, [pc, #164]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d028      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024f6:	4b24      	ldr	r3, [pc, #144]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fc:	0e1b      	lsrs	r3, r3, #24
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002504:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250a:	0c1b      	lsrs	r3, r3, #16
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	019a      	lsls	r2, r3, #6
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	041b      	lsls	r3, r3, #16
 800251c:	431a      	orrs	r2, r3
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	061b      	lsls	r3, r3, #24
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	071b      	lsls	r3, r3, #28
 800252a:	4917      	ldr	r1, [pc, #92]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002532:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002534:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002538:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002540:	4911      	ldr	r1, [pc, #68]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002548:	4b0f      	ldr	r3, [pc, #60]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0e      	ldr	r2, [pc, #56]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800254e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002554:	f7fe fc16 	bl	8000d84 <HAL_GetTick>
 8002558:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800255c:	f7fe fc12 	bl	8000d84 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	@ 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e007      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002576:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800257a:	d1ef      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800

0800258c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e040      	b.n	8002620 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe fa80 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2224      	movs	r2, #36	@ 0x24
 80025b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fbde 	bl	8002d94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f977 	bl	80028cc <UART_SetConfig>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e01b      	b.n	8002620 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fc5d 	bl	8002ed8 <UART_CheckIdleState>
 800261e:	4603      	mov	r3, r0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	@ 0x28
 800262c:	af02      	add	r7, sp, #8
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	4613      	mov	r3, r2
 8002636:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800263c:	2b20      	cmp	r3, #32
 800263e:	d177      	bne.n	8002730 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_UART_Transmit+0x24>
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e070      	b.n	8002732 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2221      	movs	r2, #33	@ 0x21
 800265c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800265e:	f7fe fb91 	bl	8000d84 <HAL_GetTick>
 8002662:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	88fa      	ldrh	r2, [r7, #6]
 8002668:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	88fa      	ldrh	r2, [r7, #6]
 8002670:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800267c:	d108      	bne.n	8002690 <HAL_UART_Transmit+0x68>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d104      	bne.n	8002690 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	61bb      	str	r3, [r7, #24]
 800268e:	e003      	b.n	8002698 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002694:	2300      	movs	r3, #0
 8002696:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002698:	e02f      	b.n	80026fa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2200      	movs	r2, #0
 80026a2:	2180      	movs	r1, #128	@ 0x80
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 fcbf 	bl	8003028 <UART_WaitOnFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d004      	beq.n	80026ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e03b      	b.n	8002732 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10b      	bne.n	80026d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	3302      	adds	r3, #2
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	e007      	b.n	80026e8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3301      	adds	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1c9      	bne.n	800269a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2200      	movs	r2, #0
 800270e:	2140      	movs	r1, #64	@ 0x40
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fc89 	bl	8003028 <UART_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d004      	beq.n	8002726 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e005      	b.n	8002732 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	e000      	b.n	8002732 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002730:	2302      	movs	r3, #2
  }
}
 8002732:	4618      	mov	r0, r3
 8002734:	3720      	adds	r7, #32
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b08a      	sub	sp, #40	@ 0x28
 800273e:	af02      	add	r7, sp, #8
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	603b      	str	r3, [r7, #0]
 8002746:	4613      	mov	r3, r2
 8002748:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002750:	2b20      	cmp	r3, #32
 8002752:	f040 80b5 	bne.w	80028c0 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_UART_Receive+0x28>
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0ad      	b.n	80028c2 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2222      	movs	r2, #34	@ 0x22
 8002772:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800277c:	f7fe fb02 	bl	8000d84 <HAL_GetTick>
 8002780:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	88fa      	ldrh	r2, [r7, #6]
 8002786:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	88fa      	ldrh	r2, [r7, #6]
 800278e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800279a:	d10e      	bne.n	80027ba <HAL_UART_Receive+0x80>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_UART_Receive+0x76>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80027aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80027ae:	e02d      	b.n	800280c <HAL_UART_Receive+0xd2>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	22ff      	movs	r2, #255	@ 0xff
 80027b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80027b8:	e028      	b.n	800280c <HAL_UART_Receive+0xd2>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10d      	bne.n	80027de <HAL_UART_Receive+0xa4>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d104      	bne.n	80027d4 <HAL_UART_Receive+0x9a>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	22ff      	movs	r2, #255	@ 0xff
 80027ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80027d2:	e01b      	b.n	800280c <HAL_UART_Receive+0xd2>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	227f      	movs	r2, #127	@ 0x7f
 80027d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80027dc:	e016      	b.n	800280c <HAL_UART_Receive+0xd2>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027e6:	d10d      	bne.n	8002804 <HAL_UART_Receive+0xca>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d104      	bne.n	80027fa <HAL_UART_Receive+0xc0>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	227f      	movs	r2, #127	@ 0x7f
 80027f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80027f8:	e008      	b.n	800280c <HAL_UART_Receive+0xd2>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	223f      	movs	r2, #63	@ 0x3f
 80027fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002802:	e003      	b.n	800280c <HAL_UART_Receive+0xd2>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002812:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800281c:	d108      	bne.n	8002830 <HAL_UART_Receive+0xf6>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d104      	bne.n	8002830 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	e003      	b.n	8002838 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002838:	e036      	b.n	80028a8 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2200      	movs	r2, #0
 8002842:	2120      	movs	r1, #32
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fbef 	bl	8003028 <UART_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e032      	b.n	80028c2 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10c      	bne.n	800287c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002868:	b29a      	uxth	r2, r3
 800286a:	8a7b      	ldrh	r3, [r7, #18]
 800286c:	4013      	ands	r3, r2
 800286e:	b29a      	uxth	r2, r3
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	3302      	adds	r3, #2
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	e00c      	b.n	8002896 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002882:	b2da      	uxtb	r2, r3
 8002884:	8a7b      	ldrh	r3, [r7, #18]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	4013      	ands	r3, r2
 800288a:	b2da      	uxtb	r2, r3
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	3301      	adds	r3, #1
 8002894:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1c2      	bne.n	800283a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4ba6      	ldr	r3, [pc, #664]	@ (8002b90 <UART_SetConfig+0x2c4>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	6979      	ldr	r1, [r7, #20]
 8002900:	430b      	orrs	r3, r1
 8002902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	430a      	orrs	r2, r1
 800293c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a94      	ldr	r2, [pc, #592]	@ (8002b94 <UART_SetConfig+0x2c8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d120      	bne.n	800298a <UART_SetConfig+0xbe>
 8002948:	4b93      	ldr	r3, [pc, #588]	@ (8002b98 <UART_SetConfig+0x2cc>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b03      	cmp	r3, #3
 8002954:	d816      	bhi.n	8002984 <UART_SetConfig+0xb8>
 8002956:	a201      	add	r2, pc, #4	@ (adr r2, 800295c <UART_SetConfig+0x90>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	0800296d 	.word	0x0800296d
 8002960:	08002979 	.word	0x08002979
 8002964:	08002973 	.word	0x08002973
 8002968:	0800297f 	.word	0x0800297f
 800296c:	2301      	movs	r3, #1
 800296e:	77fb      	strb	r3, [r7, #31]
 8002970:	e150      	b.n	8002c14 <UART_SetConfig+0x348>
 8002972:	2302      	movs	r3, #2
 8002974:	77fb      	strb	r3, [r7, #31]
 8002976:	e14d      	b.n	8002c14 <UART_SetConfig+0x348>
 8002978:	2304      	movs	r3, #4
 800297a:	77fb      	strb	r3, [r7, #31]
 800297c:	e14a      	b.n	8002c14 <UART_SetConfig+0x348>
 800297e:	2308      	movs	r3, #8
 8002980:	77fb      	strb	r3, [r7, #31]
 8002982:	e147      	b.n	8002c14 <UART_SetConfig+0x348>
 8002984:	2310      	movs	r3, #16
 8002986:	77fb      	strb	r3, [r7, #31]
 8002988:	e144      	b.n	8002c14 <UART_SetConfig+0x348>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a83      	ldr	r2, [pc, #524]	@ (8002b9c <UART_SetConfig+0x2d0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d132      	bne.n	80029fa <UART_SetConfig+0x12e>
 8002994:	4b80      	ldr	r3, [pc, #512]	@ (8002b98 <UART_SetConfig+0x2cc>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d828      	bhi.n	80029f4 <UART_SetConfig+0x128>
 80029a2:	a201      	add	r2, pc, #4	@ (adr r2, 80029a8 <UART_SetConfig+0xdc>)
 80029a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a8:	080029dd 	.word	0x080029dd
 80029ac:	080029f5 	.word	0x080029f5
 80029b0:	080029f5 	.word	0x080029f5
 80029b4:	080029f5 	.word	0x080029f5
 80029b8:	080029e9 	.word	0x080029e9
 80029bc:	080029f5 	.word	0x080029f5
 80029c0:	080029f5 	.word	0x080029f5
 80029c4:	080029f5 	.word	0x080029f5
 80029c8:	080029e3 	.word	0x080029e3
 80029cc:	080029f5 	.word	0x080029f5
 80029d0:	080029f5 	.word	0x080029f5
 80029d4:	080029f5 	.word	0x080029f5
 80029d8:	080029ef 	.word	0x080029ef
 80029dc:	2300      	movs	r3, #0
 80029de:	77fb      	strb	r3, [r7, #31]
 80029e0:	e118      	b.n	8002c14 <UART_SetConfig+0x348>
 80029e2:	2302      	movs	r3, #2
 80029e4:	77fb      	strb	r3, [r7, #31]
 80029e6:	e115      	b.n	8002c14 <UART_SetConfig+0x348>
 80029e8:	2304      	movs	r3, #4
 80029ea:	77fb      	strb	r3, [r7, #31]
 80029ec:	e112      	b.n	8002c14 <UART_SetConfig+0x348>
 80029ee:	2308      	movs	r3, #8
 80029f0:	77fb      	strb	r3, [r7, #31]
 80029f2:	e10f      	b.n	8002c14 <UART_SetConfig+0x348>
 80029f4:	2310      	movs	r3, #16
 80029f6:	77fb      	strb	r3, [r7, #31]
 80029f8:	e10c      	b.n	8002c14 <UART_SetConfig+0x348>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a68      	ldr	r2, [pc, #416]	@ (8002ba0 <UART_SetConfig+0x2d4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d120      	bne.n	8002a46 <UART_SetConfig+0x17a>
 8002a04:	4b64      	ldr	r3, [pc, #400]	@ (8002b98 <UART_SetConfig+0x2cc>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a0a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a0e:	2b30      	cmp	r3, #48	@ 0x30
 8002a10:	d013      	beq.n	8002a3a <UART_SetConfig+0x16e>
 8002a12:	2b30      	cmp	r3, #48	@ 0x30
 8002a14:	d814      	bhi.n	8002a40 <UART_SetConfig+0x174>
 8002a16:	2b20      	cmp	r3, #32
 8002a18:	d009      	beq.n	8002a2e <UART_SetConfig+0x162>
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	d810      	bhi.n	8002a40 <UART_SetConfig+0x174>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <UART_SetConfig+0x15c>
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d006      	beq.n	8002a34 <UART_SetConfig+0x168>
 8002a26:	e00b      	b.n	8002a40 <UART_SetConfig+0x174>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	77fb      	strb	r3, [r7, #31]
 8002a2c:	e0f2      	b.n	8002c14 <UART_SetConfig+0x348>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	77fb      	strb	r3, [r7, #31]
 8002a32:	e0ef      	b.n	8002c14 <UART_SetConfig+0x348>
 8002a34:	2304      	movs	r3, #4
 8002a36:	77fb      	strb	r3, [r7, #31]
 8002a38:	e0ec      	b.n	8002c14 <UART_SetConfig+0x348>
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	77fb      	strb	r3, [r7, #31]
 8002a3e:	e0e9      	b.n	8002c14 <UART_SetConfig+0x348>
 8002a40:	2310      	movs	r3, #16
 8002a42:	77fb      	strb	r3, [r7, #31]
 8002a44:	e0e6      	b.n	8002c14 <UART_SetConfig+0x348>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a56      	ldr	r2, [pc, #344]	@ (8002ba4 <UART_SetConfig+0x2d8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d120      	bne.n	8002a92 <UART_SetConfig+0x1c6>
 8002a50:	4b51      	ldr	r3, [pc, #324]	@ (8002b98 <UART_SetConfig+0x2cc>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a5c:	d013      	beq.n	8002a86 <UART_SetConfig+0x1ba>
 8002a5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a60:	d814      	bhi.n	8002a8c <UART_SetConfig+0x1c0>
 8002a62:	2b80      	cmp	r3, #128	@ 0x80
 8002a64:	d009      	beq.n	8002a7a <UART_SetConfig+0x1ae>
 8002a66:	2b80      	cmp	r3, #128	@ 0x80
 8002a68:	d810      	bhi.n	8002a8c <UART_SetConfig+0x1c0>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <UART_SetConfig+0x1a8>
 8002a6e:	2b40      	cmp	r3, #64	@ 0x40
 8002a70:	d006      	beq.n	8002a80 <UART_SetConfig+0x1b4>
 8002a72:	e00b      	b.n	8002a8c <UART_SetConfig+0x1c0>
 8002a74:	2300      	movs	r3, #0
 8002a76:	77fb      	strb	r3, [r7, #31]
 8002a78:	e0cc      	b.n	8002c14 <UART_SetConfig+0x348>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	77fb      	strb	r3, [r7, #31]
 8002a7e:	e0c9      	b.n	8002c14 <UART_SetConfig+0x348>
 8002a80:	2304      	movs	r3, #4
 8002a82:	77fb      	strb	r3, [r7, #31]
 8002a84:	e0c6      	b.n	8002c14 <UART_SetConfig+0x348>
 8002a86:	2308      	movs	r3, #8
 8002a88:	77fb      	strb	r3, [r7, #31]
 8002a8a:	e0c3      	b.n	8002c14 <UART_SetConfig+0x348>
 8002a8c:	2310      	movs	r3, #16
 8002a8e:	77fb      	strb	r3, [r7, #31]
 8002a90:	e0c0      	b.n	8002c14 <UART_SetConfig+0x348>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a44      	ldr	r2, [pc, #272]	@ (8002ba8 <UART_SetConfig+0x2dc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d125      	bne.n	8002ae8 <UART_SetConfig+0x21c>
 8002a9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b98 <UART_SetConfig+0x2cc>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002aaa:	d017      	beq.n	8002adc <UART_SetConfig+0x210>
 8002aac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ab0:	d817      	bhi.n	8002ae2 <UART_SetConfig+0x216>
 8002ab2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ab6:	d00b      	beq.n	8002ad0 <UART_SetConfig+0x204>
 8002ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002abc:	d811      	bhi.n	8002ae2 <UART_SetConfig+0x216>
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <UART_SetConfig+0x1fe>
 8002ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ac6:	d006      	beq.n	8002ad6 <UART_SetConfig+0x20a>
 8002ac8:	e00b      	b.n	8002ae2 <UART_SetConfig+0x216>
 8002aca:	2300      	movs	r3, #0
 8002acc:	77fb      	strb	r3, [r7, #31]
 8002ace:	e0a1      	b.n	8002c14 <UART_SetConfig+0x348>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	77fb      	strb	r3, [r7, #31]
 8002ad4:	e09e      	b.n	8002c14 <UART_SetConfig+0x348>
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	77fb      	strb	r3, [r7, #31]
 8002ada:	e09b      	b.n	8002c14 <UART_SetConfig+0x348>
 8002adc:	2308      	movs	r3, #8
 8002ade:	77fb      	strb	r3, [r7, #31]
 8002ae0:	e098      	b.n	8002c14 <UART_SetConfig+0x348>
 8002ae2:	2310      	movs	r3, #16
 8002ae4:	77fb      	strb	r3, [r7, #31]
 8002ae6:	e095      	b.n	8002c14 <UART_SetConfig+0x348>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a2f      	ldr	r2, [pc, #188]	@ (8002bac <UART_SetConfig+0x2e0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d125      	bne.n	8002b3e <UART_SetConfig+0x272>
 8002af2:	4b29      	ldr	r3, [pc, #164]	@ (8002b98 <UART_SetConfig+0x2cc>)
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002afc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b00:	d017      	beq.n	8002b32 <UART_SetConfig+0x266>
 8002b02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b06:	d817      	bhi.n	8002b38 <UART_SetConfig+0x26c>
 8002b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b0c:	d00b      	beq.n	8002b26 <UART_SetConfig+0x25a>
 8002b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b12:	d811      	bhi.n	8002b38 <UART_SetConfig+0x26c>
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <UART_SetConfig+0x254>
 8002b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b1c:	d006      	beq.n	8002b2c <UART_SetConfig+0x260>
 8002b1e:	e00b      	b.n	8002b38 <UART_SetConfig+0x26c>
 8002b20:	2301      	movs	r3, #1
 8002b22:	77fb      	strb	r3, [r7, #31]
 8002b24:	e076      	b.n	8002c14 <UART_SetConfig+0x348>
 8002b26:	2302      	movs	r3, #2
 8002b28:	77fb      	strb	r3, [r7, #31]
 8002b2a:	e073      	b.n	8002c14 <UART_SetConfig+0x348>
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	77fb      	strb	r3, [r7, #31]
 8002b30:	e070      	b.n	8002c14 <UART_SetConfig+0x348>
 8002b32:	2308      	movs	r3, #8
 8002b34:	77fb      	strb	r3, [r7, #31]
 8002b36:	e06d      	b.n	8002c14 <UART_SetConfig+0x348>
 8002b38:	2310      	movs	r3, #16
 8002b3a:	77fb      	strb	r3, [r7, #31]
 8002b3c:	e06a      	b.n	8002c14 <UART_SetConfig+0x348>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb0 <UART_SetConfig+0x2e4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d138      	bne.n	8002bba <UART_SetConfig+0x2ee>
 8002b48:	4b13      	ldr	r3, [pc, #76]	@ (8002b98 <UART_SetConfig+0x2cc>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002b52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b56:	d017      	beq.n	8002b88 <UART_SetConfig+0x2bc>
 8002b58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b5c:	d82a      	bhi.n	8002bb4 <UART_SetConfig+0x2e8>
 8002b5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b62:	d00b      	beq.n	8002b7c <UART_SetConfig+0x2b0>
 8002b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b68:	d824      	bhi.n	8002bb4 <UART_SetConfig+0x2e8>
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <UART_SetConfig+0x2aa>
 8002b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b72:	d006      	beq.n	8002b82 <UART_SetConfig+0x2b6>
 8002b74:	e01e      	b.n	8002bb4 <UART_SetConfig+0x2e8>
 8002b76:	2300      	movs	r3, #0
 8002b78:	77fb      	strb	r3, [r7, #31]
 8002b7a:	e04b      	b.n	8002c14 <UART_SetConfig+0x348>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	77fb      	strb	r3, [r7, #31]
 8002b80:	e048      	b.n	8002c14 <UART_SetConfig+0x348>
 8002b82:	2304      	movs	r3, #4
 8002b84:	77fb      	strb	r3, [r7, #31]
 8002b86:	e045      	b.n	8002c14 <UART_SetConfig+0x348>
 8002b88:	2308      	movs	r3, #8
 8002b8a:	77fb      	strb	r3, [r7, #31]
 8002b8c:	e042      	b.n	8002c14 <UART_SetConfig+0x348>
 8002b8e:	bf00      	nop
 8002b90:	efff69f3 	.word	0xefff69f3
 8002b94:	40011000 	.word	0x40011000
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40004400 	.word	0x40004400
 8002ba0:	40004800 	.word	0x40004800
 8002ba4:	40004c00 	.word	0x40004c00
 8002ba8:	40005000 	.word	0x40005000
 8002bac:	40011400 	.word	0x40011400
 8002bb0:	40007800 	.word	0x40007800
 8002bb4:	2310      	movs	r3, #16
 8002bb6:	77fb      	strb	r3, [r7, #31]
 8002bb8:	e02c      	b.n	8002c14 <UART_SetConfig+0x348>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a72      	ldr	r2, [pc, #456]	@ (8002d88 <UART_SetConfig+0x4bc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d125      	bne.n	8002c10 <UART_SetConfig+0x344>
 8002bc4:	4b71      	ldr	r3, [pc, #452]	@ (8002d8c <UART_SetConfig+0x4c0>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002bce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002bd2:	d017      	beq.n	8002c04 <UART_SetConfig+0x338>
 8002bd4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002bd8:	d817      	bhi.n	8002c0a <UART_SetConfig+0x33e>
 8002bda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bde:	d00b      	beq.n	8002bf8 <UART_SetConfig+0x32c>
 8002be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002be4:	d811      	bhi.n	8002c0a <UART_SetConfig+0x33e>
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <UART_SetConfig+0x326>
 8002bea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bee:	d006      	beq.n	8002bfe <UART_SetConfig+0x332>
 8002bf0:	e00b      	b.n	8002c0a <UART_SetConfig+0x33e>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	77fb      	strb	r3, [r7, #31]
 8002bf6:	e00d      	b.n	8002c14 <UART_SetConfig+0x348>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	77fb      	strb	r3, [r7, #31]
 8002bfc:	e00a      	b.n	8002c14 <UART_SetConfig+0x348>
 8002bfe:	2304      	movs	r3, #4
 8002c00:	77fb      	strb	r3, [r7, #31]
 8002c02:	e007      	b.n	8002c14 <UART_SetConfig+0x348>
 8002c04:	2308      	movs	r3, #8
 8002c06:	77fb      	strb	r3, [r7, #31]
 8002c08:	e004      	b.n	8002c14 <UART_SetConfig+0x348>
 8002c0a:	2310      	movs	r3, #16
 8002c0c:	77fb      	strb	r3, [r7, #31]
 8002c0e:	e001      	b.n	8002c14 <UART_SetConfig+0x348>
 8002c10:	2310      	movs	r3, #16
 8002c12:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c1c:	d15b      	bne.n	8002cd6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002c1e:	7ffb      	ldrb	r3, [r7, #31]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d828      	bhi.n	8002c76 <UART_SetConfig+0x3aa>
 8002c24:	a201      	add	r2, pc, #4	@ (adr r2, 8002c2c <UART_SetConfig+0x360>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c51 	.word	0x08002c51
 8002c30:	08002c59 	.word	0x08002c59
 8002c34:	08002c61 	.word	0x08002c61
 8002c38:	08002c77 	.word	0x08002c77
 8002c3c:	08002c67 	.word	0x08002c67
 8002c40:	08002c77 	.word	0x08002c77
 8002c44:	08002c77 	.word	0x08002c77
 8002c48:	08002c77 	.word	0x08002c77
 8002c4c:	08002c6f 	.word	0x08002c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c50:	f7ff f84c 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8002c54:	61b8      	str	r0, [r7, #24]
        break;
 8002c56:	e013      	b.n	8002c80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c58:	f7ff f85c 	bl	8001d14 <HAL_RCC_GetPCLK2Freq>
 8002c5c:	61b8      	str	r0, [r7, #24]
        break;
 8002c5e:	e00f      	b.n	8002c80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c60:	4b4b      	ldr	r3, [pc, #300]	@ (8002d90 <UART_SetConfig+0x4c4>)
 8002c62:	61bb      	str	r3, [r7, #24]
        break;
 8002c64:	e00c      	b.n	8002c80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c66:	f7fe ff2f 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8002c6a:	61b8      	str	r0, [r7, #24]
        break;
 8002c6c:	e008      	b.n	8002c80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c72:	61bb      	str	r3, [r7, #24]
        break;
 8002c74:	e004      	b.n	8002c80 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	77bb      	strb	r3, [r7, #30]
        break;
 8002c7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d074      	beq.n	8002d70 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	005a      	lsls	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	085b      	lsrs	r3, r3, #1
 8002c90:	441a      	add	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	2b0f      	cmp	r3, #15
 8002ca0:	d916      	bls.n	8002cd0 <UART_SetConfig+0x404>
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca8:	d212      	bcs.n	8002cd0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	f023 030f 	bic.w	r3, r3, #15
 8002cb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	085b      	lsrs	r3, r3, #1
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	89fb      	ldrh	r3, [r7, #14]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	89fa      	ldrh	r2, [r7, #14]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	e04f      	b.n	8002d70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	77bb      	strb	r3, [r7, #30]
 8002cd4:	e04c      	b.n	8002d70 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cd6:	7ffb      	ldrb	r3, [r7, #31]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d828      	bhi.n	8002d2e <UART_SetConfig+0x462>
 8002cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce4 <UART_SetConfig+0x418>)
 8002cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce2:	bf00      	nop
 8002ce4:	08002d09 	.word	0x08002d09
 8002ce8:	08002d11 	.word	0x08002d11
 8002cec:	08002d19 	.word	0x08002d19
 8002cf0:	08002d2f 	.word	0x08002d2f
 8002cf4:	08002d1f 	.word	0x08002d1f
 8002cf8:	08002d2f 	.word	0x08002d2f
 8002cfc:	08002d2f 	.word	0x08002d2f
 8002d00:	08002d2f 	.word	0x08002d2f
 8002d04:	08002d27 	.word	0x08002d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d08:	f7fe fff0 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8002d0c:	61b8      	str	r0, [r7, #24]
        break;
 8002d0e:	e013      	b.n	8002d38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d10:	f7ff f800 	bl	8001d14 <HAL_RCC_GetPCLK2Freq>
 8002d14:	61b8      	str	r0, [r7, #24]
        break;
 8002d16:	e00f      	b.n	8002d38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d18:	4b1d      	ldr	r3, [pc, #116]	@ (8002d90 <UART_SetConfig+0x4c4>)
 8002d1a:	61bb      	str	r3, [r7, #24]
        break;
 8002d1c:	e00c      	b.n	8002d38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d1e:	f7fe fed3 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8002d22:	61b8      	str	r0, [r7, #24]
        break;
 8002d24:	e008      	b.n	8002d38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d2a:	61bb      	str	r3, [r7, #24]
        break;
 8002d2c:	e004      	b.n	8002d38 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	77bb      	strb	r3, [r7, #30]
        break;
 8002d36:	bf00      	nop
    }

    if (pclk != 0U)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d018      	beq.n	8002d70 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	085a      	lsrs	r2, r3, #1
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	441a      	add	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	2b0f      	cmp	r3, #15
 8002d56:	d909      	bls.n	8002d6c <UART_SetConfig+0x4a0>
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d5e:	d205      	bcs.n	8002d6c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	e001      	b.n	8002d70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002d7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40007c00 	.word	0x40007c00
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	00f42400 	.word	0x00f42400

08002d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01a      	beq.n	8002eaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e92:	d10a      	bne.n	8002eaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	605a      	str	r2, [r3, #4]
  }
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b098      	sub	sp, #96	@ 0x60
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ee8:	f7fd ff4c 	bl	8000d84 <HAL_GetTick>
 8002eec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d12e      	bne.n	8002f5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002efc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f04:	2200      	movs	r2, #0
 8002f06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f88c 	bl	8003028 <UART_WaitOnFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d021      	beq.n	8002f5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f1e:	e853 3f00 	ldrex	r3, [r3]
 8002f22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f3c:	e841 2300 	strex	r3, r2, [r1]
 8002f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e6      	bne.n	8002f16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e062      	b.n	8003020 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d149      	bne.n	8002ffc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f70:	2200      	movs	r2, #0
 8002f72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f856 	bl	8003028 <UART_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d03c      	beq.n	8002ffc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	e853 3f00 	ldrex	r3, [r3]
 8002f8e:	623b      	str	r3, [r7, #32]
   return(result);
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fa8:	e841 2300 	strex	r3, r2, [r1]
 8002fac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e6      	bne.n	8002f82 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3308      	adds	r3, #8
 8002fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	e853 3f00 	ldrex	r3, [r3]
 8002fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fd4:	61fa      	str	r2, [r7, #28]
 8002fd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd8:	69b9      	ldr	r1, [r7, #24]
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	e841 2300 	strex	r3, r2, [r1]
 8002fe0:	617b      	str	r3, [r7, #20]
   return(result);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e5      	bne.n	8002fb4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e011      	b.n	8003020 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2220      	movs	r2, #32
 8003006:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3758      	adds	r7, #88	@ 0x58
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003038:	e04f      	b.n	80030da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d04b      	beq.n	80030da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003042:	f7fd fe9f 	bl	8000d84 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	429a      	cmp	r2, r3
 8003050:	d302      	bcc.n	8003058 <UART_WaitOnFlagUntilTimeout+0x30>
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e04e      	b.n	80030fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d037      	beq.n	80030da <UART_WaitOnFlagUntilTimeout+0xb2>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b80      	cmp	r3, #128	@ 0x80
 800306e:	d034      	beq.n	80030da <UART_WaitOnFlagUntilTimeout+0xb2>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b40      	cmp	r3, #64	@ 0x40
 8003074:	d031      	beq.n	80030da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b08      	cmp	r3, #8
 8003082:	d110      	bne.n	80030a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2208      	movs	r2, #8
 800308a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f838 	bl	8003102 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2208      	movs	r2, #8
 8003096:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e029      	b.n	80030fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030b4:	d111      	bne.n	80030da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f81e 	bl	8003102 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e00f      	b.n	80030fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69da      	ldr	r2, [r3, #28]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4013      	ands	r3, r2
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	bf0c      	ite	eq
 80030ea:	2301      	moveq	r3, #1
 80030ec:	2300      	movne	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d0a0      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003102:	b480      	push	{r7}
 8003104:	b095      	sub	sp, #84	@ 0x54
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003112:	e853 3f00 	ldrex	r3, [r3]
 8003116:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800311e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003128:	643b      	str	r3, [r7, #64]	@ 0x40
 800312a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800312e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003130:	e841 2300 	strex	r3, r2, [r1]
 8003134:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e6      	bne.n	800310a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3308      	adds	r3, #8
 8003142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	e853 3f00 	ldrex	r3, [r3]
 800314a:	61fb      	str	r3, [r7, #28]
   return(result);
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f023 0301 	bic.w	r3, r3, #1
 8003152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3308      	adds	r3, #8
 800315a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800315c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800315e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003164:	e841 2300 	strex	r3, r2, [r1]
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e5      	bne.n	800313c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003174:	2b01      	cmp	r3, #1
 8003176:	d118      	bne.n	80031aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	60bb      	str	r3, [r7, #8]
   return(result);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f023 0310 	bic.w	r3, r3, #16
 800318c:	647b      	str	r3, [r7, #68]	@ 0x44
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003196:	61bb      	str	r3, [r7, #24]
 8003198:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	6979      	ldr	r1, [r7, #20]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	613b      	str	r3, [r7, #16]
   return(result);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e6      	bne.n	8003178 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80031be:	bf00      	nop
 80031c0:	3754      	adds	r7, #84	@ 0x54
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d009      	beq.n	80031f0 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 80031dc:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80031de:	461a      	mov	r2, r3
        err.type, err.code);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80031e6:	6839      	ldr	r1, [r7, #0]
 80031e8:	4807      	ldr	r0, [pc, #28]	@ (8003208 <ai_log_err+0x3c>)
 80031ea:	f005 ffdf 	bl	80091ac <iprintf>
 80031ee:	e009      	b.n	8003204 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80031f0:	793b      	ldrb	r3, [r7, #4]
 80031f2:	4619      	mov	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80031fa:	461a      	mov	r2, r3
 80031fc:	4803      	ldr	r0, [pc, #12]	@ (800320c <ai_log_err+0x40>)
 80031fe:	f005 ffd5 	bl	80091ac <iprintf>

  do {} while (1);
 8003202:	bf00      	nop
 8003204:	bf00      	nop
 8003206:	e7fd      	b.n	8003204 <ai_log_err+0x38>
 8003208:	08009e60 	.word	0x08009e60
 800320c:	08009e94 	.word	0x08009e94

08003210 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8003218:	2200      	movs	r2, #0
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4828      	ldr	r0, [pc, #160]	@ (80032c0 <ai_boostrap+0xb0>)
 800321e:	f000 fb17 	bl	8003850 <ai_network_create_and_init>
 8003222:	4603      	mov	r3, r0
 8003224:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8003226:	7b3b      	ldrb	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d006      	beq.n	800323a <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 800322c:	4925      	ldr	r1, [pc, #148]	@ (80032c4 <ai_boostrap+0xb4>)
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f7ff ffcc 	bl	80031cc <ai_log_err>
    return -1;
 8003234:	f04f 33ff 	mov.w	r3, #4294967295
 8003238:	e03e      	b.n	80032b8 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 800323a:	4b21      	ldr	r3, [pc, #132]	@ (80032c0 <ai_boostrap+0xb0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fb83 	bl	800394c <ai_network_inputs_get>
 8003246:	4603      	mov	r3, r0
 8003248:	4a1f      	ldr	r2, [pc, #124]	@ (80032c8 <ai_boostrap+0xb8>)
 800324a:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 800324c:	4b1c      	ldr	r3, [pc, #112]	@ (80032c0 <ai_boostrap+0xb0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fb94 	bl	8003980 <ai_network_outputs_get>
 8003258:	4603      	mov	r3, r0
 800325a:	4a1c      	ldr	r2, [pc, #112]	@ (80032cc <ai_boostrap+0xbc>)
 800325c:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	e00f      	b.n	8003284 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8003264:	4b18      	ldr	r3, [pc, #96]	@ (80032c8 <ai_boostrap+0xb8>)
 8003266:	6819      	ldr	r1, [r3, #0]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	4916      	ldr	r1, [pc, #88]	@ (80032d0 <ai_boostrap+0xc0>)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	3301      	adds	r3, #1
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	ddec      	ble.n	8003264 <ai_boostrap+0x54>

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	e00f      	b.n	80032b0 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8003290:	4b0e      	ldr	r3, [pc, #56]	@ (80032cc <ai_boostrap+0xbc>)
 8003292:	6819      	ldr	r1, [r3, #0]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4613      	mov	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	490c      	ldr	r1, [pc, #48]	@ (80032d4 <ai_boostrap+0xc4>)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	3301      	adds	r3, #1
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	ddec      	ble.n	8003290 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20002c40 	.word	0x20002c40
 80032c4:	08009ec4 	.word	0x08009ec4
 80032c8:	20002c44 	.word	0x20002c44
 80032cc:	20002c48 	.word	0x20002c48
 80032d0:	20000e60 	.word	0x20000e60
 80032d4:	20000e64 	.word	0x20000e64

080032d8 <ai_run>:

static int ai_run(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_run(network, ai_input, ai_output);
 80032de:	4b0f      	ldr	r3, [pc, #60]	@ (800331c <ai_run+0x44>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003320 <ai_run+0x48>)
 80032e4:	6811      	ldr	r1, [r2, #0]
 80032e6:	4a0f      	ldr	r2, [pc, #60]	@ (8003324 <ai_run+0x4c>)
 80032e8:	6812      	ldr	r2, [r2, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fb9e 	bl	8003a2c <ai_network_run>
 80032f0:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d00c      	beq.n	8003312 <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network),
 80032f8:	4b08      	ldr	r3, [pc, #32]	@ (800331c <ai_run+0x44>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fa85 	bl	800380c <ai_network_get_error>
 8003302:	4603      	mov	r3, r0
 8003304:	4908      	ldr	r1, [pc, #32]	@ (8003328 <ai_run+0x50>)
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff ff60 	bl	80031cc <ai_log_err>
        "ai_network_run");
    return -1;
 800330c:	f04f 33ff 	mov.w	r3, #4294967295
 8003310:	e000      	b.n	8003314 <ai_run+0x3c>
  }

  return 0;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20002c40 	.word	0x20002c40
 8003320:	20002c44 	.word	0x20002c44
 8003324:	20002c48 	.word	0x20002c48
 8003328:	08009ee0 	.word	0x08009ee0

0800332c <acquire_and_process_data>:
#define IMAGE_SIZE 784
extern int8_t image_buffer[IMAGE_SIZE];
extern int8_t flag ;

int acquire_and_process_data(ai_i8* data[])
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
	if (flag == 1) {
 8003334:	4b12      	ldr	r3, [pc, #72]	@ (8003380 <acquire_and_process_data+0x54>)
 8003336:	f993 3000 	ldrsb.w	r3, [r3]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d11a      	bne.n	8003374 <acquire_and_process_data+0x48>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800333e:	2201      	movs	r2, #1
 8003340:	2101      	movs	r1, #1
 8003342:	4810      	ldr	r0, [pc, #64]	@ (8003384 <acquire_and_process_data+0x58>)
 8003344:	f7fd ffbc 	bl	80012c0 <HAL_GPIO_WritePin>
//		  }
//
//
//		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);

		  for (int i = 0; i < 28 * 28; i++) {
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e00c      	b.n	8003368 <acquire_and_process_data+0x3c>

		     ((int8_t**)data)[0][i] = (int8_t)image_buffer[i];
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4413      	add	r3, r2
 8003356:	490c      	ldr	r1, [pc, #48]	@ (8003388 <acquire_and_process_data+0x5c>)
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	440a      	add	r2, r1
 800335c:	f992 2000 	ldrsb.w	r2, [r2]
 8003360:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 28 * 28; i++) {
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3301      	adds	r3, #1
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 800336e:	dbee      	blt.n	800334e <acquire_and_process_data+0x22>

		  }

		    return 0;
 8003370:	2300      	movs	r3, #0
 8003372:	e001      	b.n	8003378 <acquire_and_process_data+0x4c>
	}
	else{

		 return -1;
 8003374:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000dcc 	.word	0x20000dcc
 8003384:	40020400 	.word	0x40020400
 8003388:	20000abc 	.word	0x20000abc

0800338c <post_process>:

int post_process(ai_i8* data[])
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08c      	sub	sp, #48	@ 0x30
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
      data[idx] = ....
  }

  */
    // Set GPIO pin to indicate processing state
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8003394:	2201      	movs	r2, #1
 8003396:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800339a:	4836      	ldr	r0, [pc, #216]	@ (8003474 <post_process+0xe8>)
 800339c:	f7fd ff90 	bl	80012c0 <HAL_GPIO_WritePin>

    // Get the output pointer
    int8_t *output = data[0];
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	61bb      	str	r3, [r7, #24]
    int max_prob = -128;
 80033a6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80033aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int predicted_class = -1;
 80033ac:	f04f 33ff 	mov.w	r3, #4294967295
 80033b0:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < 10; i++) {
 80033b2:	2300      	movs	r3, #0
 80033b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033b6:	e013      	b.n	80033e0 <post_process+0x54>
        if (output[i] > max_prob) {
 80033b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4413      	add	r3, r2
 80033be:	f993 3000 	ldrsb.w	r3, [r3]
 80033c2:	461a      	mov	r2, r3
 80033c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c6:	4293      	cmp	r3, r2
 80033c8:	da07      	bge.n	80033da <post_process+0x4e>
            max_prob = output[i];
 80033ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4413      	add	r3, r2
 80033d0:	f993 3000 	ldrsb.w	r3, [r3]
 80033d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            predicted_class = i;
 80033d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d8:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 10; i++) {
 80033da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033dc:	3301      	adds	r3, #1
 80033de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e2:	2b09      	cmp	r3, #9
 80033e4:	dde8      	ble.n	80033b8 <post_process+0x2c>
        }
    }

    uint8_t response[10];
    for (int i = 0; i < 10; i++) {
 80033e6:	2300      	movs	r3, #0
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ea:	e00e      	b.n	800340a <post_process+0x7e>
        response[i] = (uint8_t)output[i] ;
 80033ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4413      	add	r3, r2
 80033f2:	f993 3000 	ldrsb.w	r3, [r3]
 80033f6:	b2d9      	uxtb	r1, r3
 80033f8:	f107 0208 	add.w	r2, r7, #8
 80033fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fe:	4413      	add	r3, r2
 8003400:	460a      	mov	r2, r1
 8003402:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 10; i++) {
 8003404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003406:	3301      	adds	r3, #1
 8003408:	627b      	str	r3, [r7, #36]	@ 0x24
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	2b09      	cmp	r3, #9
 800340e:	dded      	ble.n	80033ec <post_process+0x60>
    }

    // Send the processed output via UART
    HAL_UART_Transmit(&huart3, response, 10, HAL_MAX_DELAY);
 8003410:	f107 0108 	add.w	r1, r7, #8
 8003414:	f04f 33ff 	mov.w	r3, #4294967295
 8003418:	220a      	movs	r2, #10
 800341a:	4817      	ldr	r0, [pc, #92]	@ (8003478 <post_process+0xec>)
 800341c:	f7ff f904 	bl	8002628 <HAL_UART_Transmit>

    for (int i = 0; i < 10; i++) {
 8003420:	2300      	movs	r3, #0
 8003422:	623b      	str	r3, [r7, #32]
 8003424:	e008      	b.n	8003438 <post_process+0xac>
            response[i] = 0 ;
 8003426:	f107 0208 	add.w	r2, r7, #8
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	4413      	add	r3, r2
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 10; i++) {
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	3301      	adds	r3, #1
 8003436:	623b      	str	r3, [r7, #32]
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	2b09      	cmp	r3, #9
 800343c:	ddf3      	ble.n	8003426 <post_process+0x9a>
        }

    for (int i = 0; i < IMAGE_SIZE; i++) {
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	e007      	b.n	8003454 <post_process+0xc8>
          image_buffer[i] = 0;
 8003444:	4a0d      	ldr	r2, [pc, #52]	@ (800347c <post_process+0xf0>)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	4413      	add	r3, r2
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < IMAGE_SIZE; i++) {
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3301      	adds	r3, #1
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 800345a:	dbf3      	blt.n	8003444 <post_process+0xb8>
    }

    // Set GPIO pin back to its original state
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800345c:	2200      	movs	r2, #0
 800345e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003462:	4804      	ldr	r0, [pc, #16]	@ (8003474 <post_process+0xe8>)
 8003464:	f7fd ff2c 	bl	80012c0 <HAL_GPIO_WritePin>

    // Return 0 for success
    return 0;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3730      	adds	r7, #48	@ 0x30
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40020400 	.word	0x40020400
 8003478:	20000dd0 	.word	0x20000dd0
 800347c:	20000abc 	.word	0x20000abc

08003480 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8003484:	4803      	ldr	r0, [pc, #12]	@ (8003494 <MX_X_CUBE_AI_Init+0x14>)
 8003486:	f005 fef9 	bl	800927c <puts>

  ai_boostrap(data_activations0);
 800348a:	4803      	ldr	r0, [pc, #12]	@ (8003498 <MX_X_CUBE_AI_Init+0x18>)
 800348c:	f7ff fec0 	bl	8003210 <ai_boostrap>
    /* USER CODE END 5 */
}
 8003490:	bf00      	nop
 8003492:	bd80      	pop	{r7, pc}
 8003494:	08009ef0 	.word	0x08009ef0
 8003498:	2000000c 	.word	0x2000000c

0800349c <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295
 80034a6:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 80034a8:	4814      	ldr	r0, [pc, #80]	@ (80034fc <MX_X_CUBE_AI_Process+0x60>)
 80034aa:	f005 fee7 	bl	800927c <puts>

  if (network) {
 80034ae:	4b14      	ldr	r3, [pc, #80]	@ (8003500 <MX_X_CUBE_AI_Process+0x64>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d010      	beq.n	80034d8 <MX_X_CUBE_AI_Process+0x3c>

   // do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 80034b6:	4813      	ldr	r0, [pc, #76]	@ (8003504 <MX_X_CUBE_AI_Process+0x68>)
 80034b8:	f7ff ff38 	bl	800332c <acquire_and_process_data>
 80034bc:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 80034c4:	f7ff ff08 	bl	80032d8 <ai_run>
 80034c8:	6078      	str	r0, [r7, #4]
        //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
      /* 3- post-process the predictions */
      if (res == 0)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d103      	bne.n	80034d8 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 80034d0:	480d      	ldr	r0, [pc, #52]	@ (8003508 <MX_X_CUBE_AI_Process+0x6c>)
 80034d2:	f7ff ff5b 	bl	800338c <post_process>
 80034d6:	6078      	str	r0, [r7, #4]
    //} while (res==0);
  }

  if (res) {
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <MX_X_CUBE_AI_Process+0x58>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 80034de:	2311      	movs	r3, #17
 80034e0:	703b      	strb	r3, [r7, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2210      	movs	r2, #16
 80034e6:	f362 231f 	bfi	r3, r2, #8, #24
 80034ea:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 80034ec:	4907      	ldr	r1, [pc, #28]	@ (800350c <MX_X_CUBE_AI_Process+0x70>)
 80034ee:	6838      	ldr	r0, [r7, #0]
 80034f0:	f7ff fe6c 	bl	80031cc <ai_log_err>
  }
    /* USER CODE END 6 */
}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	08009f10 	.word	0x08009f10
 8003500:	20002c40 	.word	0x20002c40
 8003504:	20000e60 	.word	0x20000e60
 8003508:	20000e64 	.word	0x20000e64
 800350c:	08009f2c 	.word	0x08009f2c

08003510 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	2101      	movs	r1, #1
 800351e:	4850      	ldr	r0, [pc, #320]	@ (8003660 <network_configure_activations+0x150>)
 8003520:	f000 fb62 	bl	8003be8 <ai_platform_get_activations_map>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 8090 	beq.w	800364c <network_configure_activations+0x13c>
    /* Updating activations (byte) offsets */
    
    serving_default_input_layer0_output_array.data = AI_PTR(g_network_activations_map[0] + 640);
 800352c:	4b4c      	ldr	r3, [pc, #304]	@ (8003660 <network_configure_activations+0x150>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003534:	4a4b      	ldr	r2, [pc, #300]	@ (8003664 <network_configure_activations+0x154>)
 8003536:	6093      	str	r3, [r2, #8]
    serving_default_input_layer0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 640);
 8003538:	4b49      	ldr	r3, [pc, #292]	@ (8003660 <network_configure_activations+0x150>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003540:	4a48      	ldr	r2, [pc, #288]	@ (8003664 <network_configure_activations+0x154>)
 8003542:	60d3      	str	r3, [r2, #12]
    conv2d_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1424);
 8003544:	4b46      	ldr	r3, [pc, #280]	@ (8003660 <network_configure_activations+0x150>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f503 63b2 	add.w	r3, r3, #1424	@ 0x590
 800354c:	4a46      	ldr	r2, [pc, #280]	@ (8003668 <network_configure_activations+0x158>)
 800354e:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1424);
 8003550:	4b43      	ldr	r3, [pc, #268]	@ (8003660 <network_configure_activations+0x150>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f503 63b2 	add.w	r3, r3, #1424	@ 0x590
 8003558:	4a43      	ldr	r2, [pc, #268]	@ (8003668 <network_configure_activations+0x158>)
 800355a:	60d3      	str	r3, [r2, #12]
    conv2d_0_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 2036);
 800355c:	4b40      	ldr	r3, [pc, #256]	@ (8003660 <network_configure_activations+0x150>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 8003564:	4a41      	ldr	r2, [pc, #260]	@ (800366c <network_configure_activations+0x15c>)
 8003566:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 2036);
 8003568:	4b3d      	ldr	r3, [pc, #244]	@ (8003660 <network_configure_activations+0x150>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 8003570:	4a3e      	ldr	r2, [pc, #248]	@ (800366c <network_configure_activations+0x15c>)
 8003572:	60d3      	str	r3, [r2, #12]
    conv2d_0_output_array.data = AI_PTR(g_network_activations_map[0] + 64);
 8003574:	4b3a      	ldr	r3, [pc, #232]	@ (8003660 <network_configure_activations+0x150>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3340      	adds	r3, #64	@ 0x40
 800357a:	4a3d      	ldr	r2, [pc, #244]	@ (8003670 <network_configure_activations+0x160>)
 800357c:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 64);
 800357e:	4b38      	ldr	r3, [pc, #224]	@ (8003660 <network_configure_activations+0x150>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3340      	adds	r3, #64	@ 0x40
 8003584:	4a3a      	ldr	r2, [pc, #232]	@ (8003670 <network_configure_activations+0x160>)
 8003586:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1216);
 8003588:	4b35      	ldr	r3, [pc, #212]	@ (8003660 <network_configure_activations+0x150>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8003590:	4a38      	ldr	r2, [pc, #224]	@ (8003674 <network_configure_activations+0x164>)
 8003592:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1216);
 8003594:	4b32      	ldr	r3, [pc, #200]	@ (8003660 <network_configure_activations+0x150>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800359c:	4a35      	ldr	r2, [pc, #212]	@ (8003674 <network_configure_activations+0x164>)
 800359e:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 7360);
 80035a0:	4b2f      	ldr	r3, [pc, #188]	@ (8003660 <network_configure_activations+0x150>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f503 53e6 	add.w	r3, r3, #7360	@ 0x1cc0
 80035a8:	4a33      	ldr	r2, [pc, #204]	@ (8003678 <network_configure_activations+0x168>)
 80035aa:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 7360);
 80035ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003660 <network_configure_activations+0x150>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f503 53e6 	add.w	r3, r3, #7360	@ 0x1cc0
 80035b4:	4a30      	ldr	r2, [pc, #192]	@ (8003678 <network_configure_activations+0x168>)
 80035b6:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80035b8:	4b29      	ldr	r3, [pc, #164]	@ (8003660 <network_configure_activations+0x150>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a2f      	ldr	r2, [pc, #188]	@ (800367c <network_configure_activations+0x16c>)
 80035be:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80035c0:	4b27      	ldr	r3, [pc, #156]	@ (8003660 <network_configure_activations+0x150>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a2d      	ldr	r2, [pc, #180]	@ (800367c <network_configure_activations+0x16c>)
 80035c6:	60d3      	str	r3, [r2, #12]
    gemm_5_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 256);
 80035c8:	4b25      	ldr	r3, [pc, #148]	@ (8003660 <network_configure_activations+0x150>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80035d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003680 <network_configure_activations+0x170>)
 80035d2:	6093      	str	r3, [r2, #8]
    gemm_5_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 80035d4:	4b22      	ldr	r3, [pc, #136]	@ (8003660 <network_configure_activations+0x150>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80035dc:	4a28      	ldr	r2, [pc, #160]	@ (8003680 <network_configure_activations+0x170>)
 80035de:	60d3      	str	r3, [r2, #12]
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 2048);
 80035e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003660 <network_configure_activations+0x150>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035e8:	4a26      	ldr	r2, [pc, #152]	@ (8003684 <network_configure_activations+0x174>)
 80035ea:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2048);
 80035ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003660 <network_configure_activations+0x150>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035f4:	4a23      	ldr	r2, [pc, #140]	@ (8003684 <network_configure_activations+0x174>)
 80035f6:	60d3      	str	r3, [r2, #12]
    gemm_6_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80035f8:	4b19      	ldr	r3, [pc, #100]	@ (8003660 <network_configure_activations+0x150>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a22      	ldr	r2, [pc, #136]	@ (8003688 <network_configure_activations+0x178>)
 80035fe:	6093      	str	r3, [r2, #8]
    gemm_6_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003600:	4b17      	ldr	r3, [pc, #92]	@ (8003660 <network_configure_activations+0x150>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a20      	ldr	r2, [pc, #128]	@ (8003688 <network_configure_activations+0x178>)
 8003606:	60d3      	str	r3, [r2, #12]
    gemm_6_output_array.data = AI_PTR(g_network_activations_map[0] + 356);
 8003608:	4b15      	ldr	r3, [pc, #84]	@ (8003660 <network_configure_activations+0x150>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003610:	4a1e      	ldr	r2, [pc, #120]	@ (800368c <network_configure_activations+0x17c>)
 8003612:	6093      	str	r3, [r2, #8]
    gemm_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 356);
 8003614:	4b12      	ldr	r3, [pc, #72]	@ (8003660 <network_configure_activations+0x150>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800361c:	4a1b      	ldr	r2, [pc, #108]	@ (800368c <network_configure_activations+0x17c>)
 800361e:	60d3      	str	r3, [r2, #12]
    nl_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 368);
 8003620:	4b0f      	ldr	r3, [pc, #60]	@ (8003660 <network_configure_activations+0x150>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8003628:	4a19      	ldr	r2, [pc, #100]	@ (8003690 <network_configure_activations+0x180>)
 800362a:	6093      	str	r3, [r2, #8]
    nl_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 368);
 800362c:	4b0c      	ldr	r3, [pc, #48]	@ (8003660 <network_configure_activations+0x150>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8003634:	4a16      	ldr	r2, [pc, #88]	@ (8003690 <network_configure_activations+0x180>)
 8003636:	60d3      	str	r3, [r2, #12]
    nl_7_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8003638:	4b09      	ldr	r3, [pc, #36]	@ (8003660 <network_configure_activations+0x150>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a15      	ldr	r2, [pc, #84]	@ (8003694 <network_configure_activations+0x184>)
 800363e:	6093      	str	r3, [r2, #8]
    nl_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003640:	4b07      	ldr	r3, [pc, #28]	@ (8003660 <network_configure_activations+0x150>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a13      	ldr	r2, [pc, #76]	@ (8003694 <network_configure_activations+0x184>)
 8003646:	60d3      	str	r3, [r2, #12]
    return true;
 8003648:	2301      	movs	r3, #1
 800364a:	e005      	b.n	8003658 <network_configure_activations+0x148>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800364c:	2213      	movs	r2, #19
 800364e:	2130      	movs	r1, #48	@ 0x30
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fb47 	bl	8003ce4 <ai_platform_network_set_error>
  return false;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20002c4c 	.word	0x20002c4c
 8003664:	20000010 	.word	0x20000010
 8003668:	200000f0 	.word	0x200000f0
 800366c:	20000100 	.word	0x20000100
 8003670:	20000020 	.word	0x20000020
 8003674:	20000110 	.word	0x20000110
 8003678:	20000120 	.word	0x20000120
 800367c:	20000030 	.word	0x20000030
 8003680:	20000130 	.word	0x20000130
 8003684:	20000040 	.word	0x20000040
 8003688:	20000140 	.word	0x20000140
 800368c:	20000050 	.word	0x20000050
 8003690:	20000150 	.word	0x20000150
 8003694:	20000060 	.word	0x20000060

08003698 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	2101      	movs	r1, #1
 80036a6:	4850      	ldr	r0, [pc, #320]	@ (80037e8 <network_configure_weights+0x150>)
 80036a8:	f000 fa46 	bl	8003b38 <ai_platform_get_weights_map>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8090 	beq.w	80037d4 <network_configure_weights+0x13c>
    /* Updating weights (byte) offsets */
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80036b4:	4b4d      	ldr	r3, [pc, #308]	@ (80037ec <network_configure_weights+0x154>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036bc:	4a4b      	ldr	r2, [pc, #300]	@ (80037ec <network_configure_weights+0x154>)
 80036be:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80036c0:	4b49      	ldr	r3, [pc, #292]	@ (80037e8 <network_configure_weights+0x150>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a49      	ldr	r2, [pc, #292]	@ (80037ec <network_configure_weights+0x154>)
 80036c6:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80036c8:	4b47      	ldr	r3, [pc, #284]	@ (80037e8 <network_configure_weights+0x150>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a47      	ldr	r2, [pc, #284]	@ (80037ec <network_configure_weights+0x154>)
 80036ce:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80036d0:	4b47      	ldr	r3, [pc, #284]	@ (80037f0 <network_configure_weights+0x158>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036d8:	4a45      	ldr	r2, [pc, #276]	@ (80037f0 <network_configure_weights+0x158>)
 80036da:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 200);
 80036dc:	4b42      	ldr	r3, [pc, #264]	@ (80037e8 <network_configure_weights+0x150>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	33c8      	adds	r3, #200	@ 0xc8
 80036e2:	4a43      	ldr	r2, [pc, #268]	@ (80037f0 <network_configure_weights+0x158>)
 80036e4:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 200);
 80036e6:	4b40      	ldr	r3, [pc, #256]	@ (80037e8 <network_configure_weights+0x150>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	33c8      	adds	r3, #200	@ 0xc8
 80036ec:	4a40      	ldr	r2, [pc, #256]	@ (80037f0 <network_configure_weights+0x158>)
 80036ee:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80036f0:	4b40      	ldr	r3, [pc, #256]	@ (80037f4 <network_configure_weights+0x15c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036f8:	4a3e      	ldr	r2, [pc, #248]	@ (80037f4 <network_configure_weights+0x15c>)
 80036fa:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 232);
 80036fc:	4b3a      	ldr	r3, [pc, #232]	@ (80037e8 <network_configure_weights+0x150>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	33e8      	adds	r3, #232	@ 0xe8
 8003702:	4a3c      	ldr	r2, [pc, #240]	@ (80037f4 <network_configure_weights+0x15c>)
 8003704:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 232);
 8003706:	4b38      	ldr	r3, [pc, #224]	@ (80037e8 <network_configure_weights+0x150>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	33e8      	adds	r3, #232	@ 0xe8
 800370c:	4a39      	ldr	r2, [pc, #228]	@ (80037f4 <network_configure_weights+0x15c>)
 800370e:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8003710:	4b39      	ldr	r3, [pc, #228]	@ (80037f8 <network_configure_weights+0x160>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003718:	4a37      	ldr	r2, [pc, #220]	@ (80037f8 <network_configure_weights+0x160>)
 800371a:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 3432);
 800371c:	4b32      	ldr	r3, [pc, #200]	@ (80037e8 <network_configure_weights+0x150>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f603 5368 	addw	r3, r3, #3432	@ 0xd68
 8003724:	4a34      	ldr	r2, [pc, #208]	@ (80037f8 <network_configure_weights+0x160>)
 8003726:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3432);
 8003728:	4b2f      	ldr	r3, [pc, #188]	@ (80037e8 <network_configure_weights+0x150>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f603 5368 	addw	r3, r3, #3432	@ 0xd68
 8003730:	4a31      	ldr	r2, [pc, #196]	@ (80037f8 <network_configure_weights+0x160>)
 8003732:	60d3      	str	r3, [r2, #12]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8003734:	4b31      	ldr	r3, [pc, #196]	@ (80037fc <network_configure_weights+0x164>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800373c:	4a2f      	ldr	r2, [pc, #188]	@ (80037fc <network_configure_weights+0x164>)
 800373e:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 3496);
 8003740:	4b29      	ldr	r3, [pc, #164]	@ (80037e8 <network_configure_weights+0x150>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f603 53a8 	addw	r3, r3, #3496	@ 0xda8
 8003748:	4a2c      	ldr	r2, [pc, #176]	@ (80037fc <network_configure_weights+0x164>)
 800374a:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 3496);
 800374c:	4b26      	ldr	r3, [pc, #152]	@ (80037e8 <network_configure_weights+0x150>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f603 53a8 	addw	r3, r3, #3496	@ 0xda8
 8003754:	4a29      	ldr	r2, [pc, #164]	@ (80037fc <network_configure_weights+0x164>)
 8003756:	60d3      	str	r3, [r2, #12]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8003758:	4b29      	ldr	r3, [pc, #164]	@ (8003800 <network_configure_weights+0x168>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003760:	4a27      	ldr	r2, [pc, #156]	@ (8003800 <network_configure_weights+0x168>)
 8003762:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 36264);
 8003764:	4b20      	ldr	r3, [pc, #128]	@ (80037e8 <network_configure_weights+0x150>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	f648 53a8 	movw	r3, #36264	@ 0x8da8
 800376c:	4413      	add	r3, r2
 800376e:	4a24      	ldr	r2, [pc, #144]	@ (8003800 <network_configure_weights+0x168>)
 8003770:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 36264);
 8003772:	4b1d      	ldr	r3, [pc, #116]	@ (80037e8 <network_configure_weights+0x150>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	f648 53a8 	movw	r3, #36264	@ 0x8da8
 800377a:	4413      	add	r3, r2
 800377c:	4a20      	ldr	r2, [pc, #128]	@ (8003800 <network_configure_weights+0x168>)
 800377e:	60d3      	str	r3, [r2, #12]
    gemm_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8003780:	4b20      	ldr	r3, [pc, #128]	@ (8003804 <network_configure_weights+0x16c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003788:	4a1e      	ldr	r2, [pc, #120]	@ (8003804 <network_configure_weights+0x16c>)
 800378a:	6013      	str	r3, [r2, #0]
    gemm_6_weights_array.data = AI_PTR(g_network_weights_map[0] + 36776);
 800378c:	4b16      	ldr	r3, [pc, #88]	@ (80037e8 <network_configure_weights+0x150>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	f648 73a8 	movw	r3, #36776	@ 0x8fa8
 8003794:	4413      	add	r3, r2
 8003796:	4a1b      	ldr	r2, [pc, #108]	@ (8003804 <network_configure_weights+0x16c>)
 8003798:	6093      	str	r3, [r2, #8]
    gemm_6_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 36776);
 800379a:	4b13      	ldr	r3, [pc, #76]	@ (80037e8 <network_configure_weights+0x150>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	f648 73a8 	movw	r3, #36776	@ 0x8fa8
 80037a2:	4413      	add	r3, r2
 80037a4:	4a17      	ldr	r2, [pc, #92]	@ (8003804 <network_configure_weights+0x16c>)
 80037a6:	60d3      	str	r3, [r2, #12]
    gemm_6_bias_array.format |= AI_FMT_FLAG_CONST;
 80037a8:	4b17      	ldr	r3, [pc, #92]	@ (8003808 <network_configure_weights+0x170>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80037b0:	4a15      	ldr	r2, [pc, #84]	@ (8003808 <network_configure_weights+0x170>)
 80037b2:	6013      	str	r3, [r2, #0]
    gemm_6_bias_array.data = AI_PTR(g_network_weights_map[0] + 38056);
 80037b4:	4b0c      	ldr	r3, [pc, #48]	@ (80037e8 <network_configure_weights+0x150>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	f249 43a8 	movw	r3, #38056	@ 0x94a8
 80037bc:	4413      	add	r3, r2
 80037be:	4a12      	ldr	r2, [pc, #72]	@ (8003808 <network_configure_weights+0x170>)
 80037c0:	6093      	str	r3, [r2, #8]
    gemm_6_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 38056);
 80037c2:	4b09      	ldr	r3, [pc, #36]	@ (80037e8 <network_configure_weights+0x150>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	f249 43a8 	movw	r3, #38056	@ 0x94a8
 80037ca:	4413      	add	r3, r2
 80037cc:	4a0e      	ldr	r2, [pc, #56]	@ (8003808 <network_configure_weights+0x170>)
 80037ce:	60d3      	str	r3, [r2, #12]
    return true;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e005      	b.n	80037e0 <network_configure_weights+0x148>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80037d4:	2212      	movs	r2, #18
 80037d6:	2130      	movs	r1, #48	@ 0x30
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fa83 	bl	8003ce4 <ai_platform_network_set_error>
  return false;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20002c50 	.word	0x20002c50
 80037ec:	20000070 	.word	0x20000070
 80037f0:	20000080 	.word	0x20000080
 80037f4:	20000090 	.word	0x20000090
 80037f8:	200000a0 	.word	0x200000a0
 80037fc:	200000b0 	.word	0x200000b0
 8003800:	200000c0 	.word	0x200000c0
 8003804:	200000d0 	.word	0x200000d0
 8003808:	200000e0 	.word	0x200000e0

0800380c <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fa59 	bl	8003ccc <ai_platform_network_get_error>
 800381a:	4603      	mov	r3, r0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af02      	add	r7, sp, #8
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800382e:	2300      	movs	r3, #0
 8003830:	9301      	str	r3, [sp, #4]
 8003832:	2305      	movs	r3, #5
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	2301      	movs	r3, #1
 8003838:	4a04      	ldr	r2, [pc, #16]	@ (800384c <ai_network_create+0x28>)
 800383a:	6839      	ldr	r1, [r7, #0]
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fb45 	bl	8003ecc <ai_platform_network_create>
 8003842:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003844:	4618      	mov	r0, r3
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	2000098c 	.word	0x2000098c

08003850 <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b094      	sub	sp, #80	@ 0x50
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800385c:	2100      	movs	r1, #0
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f7ff ffe0 	bl	8003824 <ai_network_create>
 8003864:	4603      	mov	r3, r0
 8003866:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8003868:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <ai_network_create_and_init+0x24>
    return err;
 8003870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003872:	e067      	b.n	8003944 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 8003874:	f107 0310 	add.w	r3, r7, #16
 8003878:	4618      	mov	r0, r3
 800387a:	f000 f8e7 	bl	8003a4c <ai_network_data_params_get>
 800387e:	4603      	mov	r3, r0
 8003880:	f083 0301 	eor.w	r3, r3, #1
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff ffbc 	bl	800380c <ai_network_get_error>
 8003894:	4603      	mov	r3, r0
 8003896:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8003898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800389a:	e053      	b.n	8003944 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800389c:	2300      	movs	r3, #0
 800389e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80038a2:	e012      	b.n	80038ca <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80038a4:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 80038a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	4413      	add	r3, r2
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	f107 0310 	add.w	r3, r7, #16
 80038b8:	330c      	adds	r3, #12
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f92c 	bl	8003b18 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80038c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80038c4:	3301      	adds	r3, #1
 80038c6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d004      	beq.n	80038da <ai_network_create_and_init+0x8a>
 80038d0:	8bfb      	ldrh	r3, [r7, #30]
 80038d2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d3e4      	bcc.n	80038a4 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80038da:	2300      	movs	r3, #0
 80038dc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80038e0:	e012      	b.n	8003908 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80038e2:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 80038e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	f107 0310 	add.w	r3, r7, #16
 80038f6:	3304      	adds	r3, #4
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 f90d 	bl	8003b18 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80038fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003902:	3301      	adds	r3, #1
 8003904:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <ai_network_create_and_init+0xc8>
 800390e:	8afb      	ldrh	r3, [r7, #22]
 8003910:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8003914:	429a      	cmp	r2, r3
 8003916:	d3e4      	bcc.n	80038e2 <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f107 0210 	add.w	r2, r7, #16
 8003920:	4611      	mov	r1, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f846 	bl	80039b4 <ai_network_init>
 8003928:	4603      	mov	r3, r0
 800392a:	f083 0301 	eor.w	r3, r3, #1
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d006      	beq.n	8003942 <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff ff67 	bl	800380c <ai_network_get_error>
 800393e:	4603      	mov	r3, r0
 8003940:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8003942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003944:	4618      	mov	r0, r3
 8003946:	3750      	adds	r7, #80	@ 0x50
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800395c:	4b06      	ldr	r3, [pc, #24]	@ (8003978 <ai_network_inputs_get+0x2c>)
 800395e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a06      	ldr	r2, [pc, #24]	@ (800397c <ai_network_inputs_get+0x30>)
 8003964:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8003966:	6839      	ldr	r1, [r7, #0]
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f9c1 	bl	8003cf0 <ai_platform_inputs_get>
 800396e:	4603      	mov	r3, r0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	2000098c 	.word	0x2000098c
 800397c:	a1c00100 	.word	0xa1c00100

08003980 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d104      	bne.n	800399a <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8003990:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <ai_network_outputs_get+0x2c>)
 8003992:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a06      	ldr	r2, [pc, #24]	@ (80039b0 <ai_network_outputs_get+0x30>)
 8003998:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800399a:	6839      	ldr	r1, [r7, #0]
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fa1f 	bl	8003de0 <ai_platform_outputs_get>
 80039a2:	4603      	mov	r3, r0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	2000098c 	.word	0x2000098c
 80039b0:	a1c00100 	.word	0xa1c00100

080039b4 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 80039be:	6839      	ldr	r1, [r7, #0]
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fac5 	bl	8003f50 <ai_platform_network_init>
 80039c6:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 80039c8:	2301      	movs	r3, #1
 80039ca:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <ai_network_init+0x22>
 80039d2:	2300      	movs	r3, #0
 80039d4:	e026      	b.n	8003a24 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 80039d6:	6839      	ldr	r1, [r7, #0]
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7ff fe5d 	bl	8003698 <network_configure_weights>
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	7afb      	ldrb	r3, [r7, #11]
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bf14      	ite	ne
 80039ea:	2301      	movne	r3, #1
 80039ec:	2300      	moveq	r3, #0
 80039ee:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 80039f0:	6839      	ldr	r1, [r7, #0]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f7ff fd8c 	bl	8003510 <network_configure_activations>
 80039f8:	4603      	mov	r3, r0
 80039fa:	461a      	mov	r2, r3
 80039fc:	7afb      	ldrb	r3, [r7, #11]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf14      	ite	ne
 8003a04:	2301      	movne	r3, #1
 8003a06:	2300      	moveq	r3, #0
 8003a08:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fb60 	bl	80040d0 <ai_platform_network_post_init>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461a      	mov	r2, r3
 8003a14:	7afb      	ldrb	r3, [r7, #11]
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf14      	ite	ne
 8003a1c:	2301      	movne	r3, #1
 8003a1e:	2300      	moveq	r3, #0
 8003a20:	72fb      	strb	r3, [r7, #11]

  return ok;
 8003a22:	7afb      	ldrb	r3, [r7, #11]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fb77 	bl	8004130 <ai_platform_network_process>
 8003a42:	4603      	mov	r3, r0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <ai_network_data_params_get+0x12>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e016      	b.n	8003a8c <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8003a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8003a94 <ai_network_data_params_get+0x48>)
 8003a60:	f107 0310 	add.w	r3, r7, #16
 8003a64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a68:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8003a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a98 <ai_network_data_params_get+0x4c>)
 8003a6e:	f107 0308 	add.w	r3, r7, #8
 8003a72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a76:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8003a7a:	f107 0210 	add.w	r2, r7, #16
 8003a7e:	f107 0308 	add.w	r3, r7, #8
 8003a82:	4619      	mov	r1, r3
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f907 	bl	8003c98 <ai_platform_bind_network_params>
 8003a8a:	4603      	mov	r3, r0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	08009f60 	.word	0x08009f60
 8003a98:	08009f68 	.word	0x08009f68

08003a9c <ai_buffer_get_size>:
 8003a9c:	b368      	cbz	r0, 8003afa <ai_buffer_get_size+0x5e>
 8003a9e:	4b17      	ldr	r3, [pc, #92]	@ (8003afc <ai_buffer_get_size+0x60>)
 8003aa0:	4a17      	ldr	r2, [pc, #92]	@ (8003b00 <ai_buffer_get_size+0x64>)
 8003aa2:	b410      	push	{r4}
 8003aa4:	6804      	ldr	r4, [r0, #0]
 8003aa6:	4023      	ands	r3, r4
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d123      	bne.n	8003af4 <ai_buffer_get_size+0x58>
 8003aac:	b311      	cbz	r1, 8003af4 <ai_buffer_get_size+0x58>
 8003aae:	6984      	ldr	r4, [r0, #24]
 8003ab0:	6862      	ldr	r2, [r4, #4]
 8003ab2:	321f      	adds	r2, #31
 8003ab4:	f022 021f 	bic.w	r2, r2, #31
 8003ab8:	7d03      	ldrb	r3, [r0, #20]
 8003aba:	6941      	ldr	r1, [r0, #20]
 8003abc:	f1a3 0301 	sub.w	r3, r3, #1
 8003ac0:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8003ac4:	fab3 f383 	clz	r3, r3
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8003ace:	da0c      	bge.n	8003aea <ai_buffer_get_size+0x4e>
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d103      	bne.n	8003adc <ai_buffer_get_size+0x40>
 8003ad4:	2802      	cmp	r0, #2
 8003ad6:	f04f 0302 	mov.w	r3, #2
 8003ada:	d006      	beq.n	8003aea <ai_buffer_get_size+0x4e>
 8003adc:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	4298      	cmp	r0, r3
 8003ae4:	fb01 f202 	mul.w	r2, r1, r2
 8003ae8:	d1f2      	bne.n	8003ad0 <ai_buffer_get_size+0x34>
 8003aea:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8003aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	6984      	ldr	r4, [r0, #24]
 8003af6:	6862      	ldr	r2, [r4, #4]
 8003af8:	e7de      	b.n	8003ab8 <ai_buffer_get_size+0x1c>
 8003afa:	4770      	bx	lr
 8003afc:	017fffff 	.word	0x017fffff
 8003b00:	000400c0 	.word	0x000400c0

08003b04 <ai_buffer_array_sane>:
 8003b04:	b138      	cbz	r0, 8003b16 <ai_buffer_array_sane+0x12>
 8003b06:	6843      	ldr	r3, [r0, #4]
 8003b08:	b123      	cbz	r3, 8003b14 <ai_buffer_array_sane+0x10>
 8003b0a:	8840      	ldrh	r0, [r0, #2]
 8003b0c:	3800      	subs	r0, #0
 8003b0e:	bf18      	it	ne
 8003b10:	2001      	movne	r0, #1
 8003b12:	4770      	bx	lr
 8003b14:	4618      	mov	r0, r3
 8003b16:	4770      	bx	lr

08003b18 <ai_buffer_array_item_set_address>:
 8003b18:	b150      	cbz	r0, 8003b30 <ai_buffer_array_item_set_address+0x18>
 8003b1a:	6843      	ldr	r3, [r0, #4]
 8003b1c:	b14b      	cbz	r3, 8003b32 <ai_buffer_array_item_set_address+0x1a>
 8003b1e:	8840      	ldrh	r0, [r0, #2]
 8003b20:	b900      	cbnz	r0, 8003b24 <ai_buffer_array_item_set_address+0xc>
 8003b22:	4770      	bx	lr
 8003b24:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003b28:	2001      	movs	r0, #1
 8003b2a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003b2e:	605a      	str	r2, [r3, #4]
 8003b30:	4770      	bx	lr
 8003b32:	4618      	mov	r0, r3
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop

08003b38 <ai_platform_get_weights_map>:
 8003b38:	2900      	cmp	r1, #0
 8003b3a:	bf18      	it	ne
 8003b3c:	2800      	cmpne	r0, #0
 8003b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b40:	bf0c      	ite	eq
 8003b42:	2401      	moveq	r4, #1
 8003b44:	2400      	movne	r4, #0
 8003b46:	2a00      	cmp	r2, #0
 8003b48:	bf08      	it	eq
 8003b4a:	f044 0401 	orreq.w	r4, r4, #1
 8003b4e:	b114      	cbz	r4, 8003b56 <ai_platform_get_weights_map+0x1e>
 8003b50:	2400      	movs	r4, #0
 8003b52:	4620      	mov	r0, r4
 8003b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b56:	4616      	mov	r6, r2
 8003b58:	4b22      	ldr	r3, [pc, #136]	@ (8003be4 <ai_platform_get_weights_map+0xac>)
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	4605      	mov	r5, r0
 8003b5e:	460f      	mov	r7, r1
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d022      	beq.n	8003baa <ai_platform_get_weights_map+0x72>
 8003b64:	6870      	ldr	r0, [r6, #4]
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d0f2      	beq.n	8003b50 <ai_platform_get_weights_map+0x18>
 8003b6a:	6806      	ldr	r6, [r0, #0]
 8003b6c:	429e      	cmp	r6, r3
 8003b6e:	d006      	beq.n	8003b7e <ai_platform_get_weights_map+0x46>
 8003b70:	f1a1 0401 	sub.w	r4, r1, #1
 8003b74:	6028      	str	r0, [r5, #0]
 8003b76:	fab4 f484 	clz	r4, r4
 8003b7a:	0964      	lsrs	r4, r4, #5
 8003b7c:	e7e9      	b.n	8003b52 <ai_platform_get_weights_map+0x1a>
 8003b7e:	3d04      	subs	r5, #4
 8003b80:	4602      	mov	r2, r0
 8003b82:	4621      	mov	r1, r4
 8003b84:	e000      	b.n	8003b88 <ai_platform_get_weights_map+0x50>
 8003b86:	4619      	mov	r1, r3
 8003b88:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8003b8c:	42b3      	cmp	r3, r6
 8003b8e:	d025      	beq.n	8003bdc <ai_platform_get_weights_map+0xa4>
 8003b90:	f845 3f04 	str.w	r3, [r5, #4]!
 8003b94:	1c4b      	adds	r3, r1, #1
 8003b96:	429f      	cmp	r7, r3
 8003b98:	d8f5      	bhi.n	8003b86 <ai_platform_get_weights_map+0x4e>
 8003b9a:	d1da      	bne.n	8003b52 <ai_platform_get_weights_map+0x1a>
 8003b9c:	3102      	adds	r1, #2
 8003b9e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8003ba2:	42b3      	cmp	r3, r6
 8003ba4:	d1d5      	bne.n	8003b52 <ai_platform_get_weights_map+0x1a>
 8003ba6:	2401      	movs	r4, #1
 8003ba8:	e7d3      	b.n	8003b52 <ai_platform_get_weights_map+0x1a>
 8003baa:	1d30      	adds	r0, r6, #4
 8003bac:	f7ff ffaa 	bl	8003b04 <ai_buffer_array_sane>
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d0cd      	beq.n	8003b50 <ai_platform_get_weights_map+0x18>
 8003bb4:	88f3      	ldrh	r3, [r6, #6]
 8003bb6:	429f      	cmp	r7, r3
 8003bb8:	d1ca      	bne.n	8003b50 <ai_platform_get_weights_map+0x18>
 8003bba:	3d04      	subs	r5, #4
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	68b3      	ldr	r3, [r6, #8]
 8003bc0:	4423      	add	r3, r4
 8003bc2:	341c      	adds	r4, #28
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	b123      	cbz	r3, 8003bd2 <ai_platform_get_weights_map+0x9a>
 8003bc8:	3201      	adds	r2, #1
 8003bca:	f845 3f04 	str.w	r3, [r5, #4]!
 8003bce:	4297      	cmp	r7, r2
 8003bd0:	d8f5      	bhi.n	8003bbe <ai_platform_get_weights_map+0x86>
 8003bd2:	1abc      	subs	r4, r7, r2
 8003bd4:	fab4 f484 	clz	r4, r4
 8003bd8:	0964      	lsrs	r4, r4, #5
 8003bda:	e7ba      	b.n	8003b52 <ai_platform_get_weights_map+0x1a>
 8003bdc:	428f      	cmp	r7, r1
 8003bde:	d1b8      	bne.n	8003b52 <ai_platform_get_weights_map+0x1a>
 8003be0:	e7e1      	b.n	8003ba6 <ai_platform_get_weights_map+0x6e>
 8003be2:	bf00      	nop
 8003be4:	a1facade 	.word	0xa1facade

08003be8 <ai_platform_get_activations_map>:
 8003be8:	2900      	cmp	r1, #0
 8003bea:	bf18      	it	ne
 8003bec:	2800      	cmpne	r0, #0
 8003bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf0:	bf0c      	ite	eq
 8003bf2:	2401      	moveq	r4, #1
 8003bf4:	2400      	movne	r4, #0
 8003bf6:	2a00      	cmp	r2, #0
 8003bf8:	bf08      	it	eq
 8003bfa:	f044 0401 	orreq.w	r4, r4, #1
 8003bfe:	b114      	cbz	r4, 8003c06 <ai_platform_get_activations_map+0x1e>
 8003c00:	2400      	movs	r4, #0
 8003c02:	4620      	mov	r0, r4
 8003c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c06:	4616      	mov	r6, r2
 8003c08:	4b22      	ldr	r3, [pc, #136]	@ (8003c94 <ai_platform_get_activations_map+0xac>)
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	4605      	mov	r5, r0
 8003c0e:	460f      	mov	r7, r1
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d022      	beq.n	8003c5a <ai_platform_get_activations_map+0x72>
 8003c14:	6a30      	ldr	r0, [r6, #32]
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d0f2      	beq.n	8003c00 <ai_platform_get_activations_map+0x18>
 8003c1a:	6806      	ldr	r6, [r0, #0]
 8003c1c:	429e      	cmp	r6, r3
 8003c1e:	d006      	beq.n	8003c2e <ai_platform_get_activations_map+0x46>
 8003c20:	f1a1 0401 	sub.w	r4, r1, #1
 8003c24:	6028      	str	r0, [r5, #0]
 8003c26:	fab4 f484 	clz	r4, r4
 8003c2a:	0964      	lsrs	r4, r4, #5
 8003c2c:	e7e9      	b.n	8003c02 <ai_platform_get_activations_map+0x1a>
 8003c2e:	3d04      	subs	r5, #4
 8003c30:	4602      	mov	r2, r0
 8003c32:	4621      	mov	r1, r4
 8003c34:	e000      	b.n	8003c38 <ai_platform_get_activations_map+0x50>
 8003c36:	4619      	mov	r1, r3
 8003c38:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8003c3c:	42b3      	cmp	r3, r6
 8003c3e:	d026      	beq.n	8003c8e <ai_platform_get_activations_map+0xa6>
 8003c40:	f845 3f04 	str.w	r3, [r5, #4]!
 8003c44:	1c4b      	adds	r3, r1, #1
 8003c46:	429f      	cmp	r7, r3
 8003c48:	d8f5      	bhi.n	8003c36 <ai_platform_get_activations_map+0x4e>
 8003c4a:	d1da      	bne.n	8003c02 <ai_platform_get_activations_map+0x1a>
 8003c4c:	3102      	adds	r1, #2
 8003c4e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8003c52:	42b3      	cmp	r3, r6
 8003c54:	d1d5      	bne.n	8003c02 <ai_platform_get_activations_map+0x1a>
 8003c56:	2401      	movs	r4, #1
 8003c58:	e7d3      	b.n	8003c02 <ai_platform_get_activations_map+0x1a>
 8003c5a:	f106 000c 	add.w	r0, r6, #12
 8003c5e:	f7ff ff51 	bl	8003b04 <ai_buffer_array_sane>
 8003c62:	2800      	cmp	r0, #0
 8003c64:	d0cc      	beq.n	8003c00 <ai_platform_get_activations_map+0x18>
 8003c66:	89f3      	ldrh	r3, [r6, #14]
 8003c68:	429f      	cmp	r7, r3
 8003c6a:	d1c9      	bne.n	8003c00 <ai_platform_get_activations_map+0x18>
 8003c6c:	3d04      	subs	r5, #4
 8003c6e:	4622      	mov	r2, r4
 8003c70:	6933      	ldr	r3, [r6, #16]
 8003c72:	4423      	add	r3, r4
 8003c74:	341c      	adds	r4, #28
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	b123      	cbz	r3, 8003c84 <ai_platform_get_activations_map+0x9c>
 8003c7a:	3201      	adds	r2, #1
 8003c7c:	f845 3f04 	str.w	r3, [r5, #4]!
 8003c80:	4297      	cmp	r7, r2
 8003c82:	d8f5      	bhi.n	8003c70 <ai_platform_get_activations_map+0x88>
 8003c84:	1abc      	subs	r4, r7, r2
 8003c86:	fab4 f484 	clz	r4, r4
 8003c8a:	0964      	lsrs	r4, r4, #5
 8003c8c:	e7b9      	b.n	8003c02 <ai_platform_get_activations_map+0x1a>
 8003c8e:	428f      	cmp	r7, r1
 8003c90:	d1b7      	bne.n	8003c02 <ai_platform_get_activations_map+0x1a>
 8003c92:	e7e0      	b.n	8003c56 <ai_platform_get_activations_map+0x6e>
 8003c94:	a1facade 	.word	0xa1facade

08003c98 <ai_platform_bind_network_params>:
 8003c98:	2a00      	cmp	r2, #0
 8003c9a:	bf18      	it	ne
 8003c9c:	2900      	cmpne	r1, #0
 8003c9e:	d010      	beq.n	8003cc2 <ai_platform_bind_network_params+0x2a>
 8003ca0:	b178      	cbz	r0, 8003cc2 <ai_platform_bind_network_params+0x2a>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4808      	ldr	r0, [pc, #32]	@ (8003cc8 <ai_platform_bind_network_params+0x30>)
 8003ca6:	f103 0c0c 	add.w	ip, r3, #12
 8003caa:	f843 0b04 	str.w	r0, [r3], #4
 8003cae:	c903      	ldmia	r1, {r0, r1}
 8003cb0:	e883 0003 	stmia.w	r3, {r0, r1}
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cba:	e88c 0003 	stmia.w	ip, {r0, r1}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	4770      	bx	lr
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	4770      	bx	lr
 8003cc8:	a1facade 	.word	0xa1facade

08003ccc <ai_platform_network_get_error>:
 8003ccc:	4b04      	ldr	r3, [pc, #16]	@ (8003ce0 <ai_platform_network_get_error+0x14>)
 8003cce:	6802      	ldr	r2, [r0, #0]
 8003cd0:	4393      	bics	r3, r2
 8003cd2:	d102      	bne.n	8003cda <ai_platform_network_get_error+0xe>
 8003cd4:	300c      	adds	r0, #12
 8003cd6:	f000 bc73 	b.w	80045c0 <core_get_error>
 8003cda:	f241 0010 	movw	r0, #4112	@ 0x1010
 8003cde:	4770      	bx	lr
 8003ce0:	a1c00100 	.word	0xa1c00100

08003ce4 <ai_platform_network_set_error>:
 8003ce4:	b110      	cbz	r0, 8003cec <ai_platform_network_set_error+0x8>
 8003ce6:	300c      	adds	r0, #12
 8003ce8:	f000 bc70 	b.w	80045cc <core_set_error>
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop

08003cf0 <ai_platform_inputs_get>:
 8003cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf4:	4b39      	ldr	r3, [pc, #228]	@ (8003ddc <ai_platform_inputs_get+0xec>)
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	6802      	ldr	r2, [r0, #0]
 8003cfa:	4393      	bics	r3, r2
 8003cfc:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8003d00:	d162      	bne.n	8003dc8 <ai_platform_inputs_get+0xd8>
 8003d02:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d051      	beq.n	8003dac <ai_platform_inputs_get+0xbc>
 8003d08:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8003d0c:	f1ba 0f00 	cmp.w	sl, #0
 8003d10:	d04c      	beq.n	8003dac <ai_platform_inputs_get+0xbc>
 8003d12:	f04f 0900 	mov.w	r9, #0
 8003d16:	464d      	mov	r5, r9
 8003d18:	e016      	b.n	8003d48 <ai_platform_inputs_get+0x58>
 8003d1a:	9901      	ldr	r1, [sp, #4]
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f848 3001 	str.w	r3, [r8, r1]
 8003d22:	69b1      	ldr	r1, [r6, #24]
 8003d24:	f04f 0301 	mov.w	r3, #1
 8003d28:	684e      	ldr	r6, [r1, #4]
 8003d2a:	3501      	adds	r5, #1
 8003d2c:	f109 091c 	add.w	r9, r9, #28
 8003d30:	7523      	strb	r3, [r4, #20]
 8003d32:	2300      	movs	r3, #0
 8003d34:	6961      	ldr	r1, [r4, #20]
 8003d36:	6020      	str	r0, [r4, #0]
 8003d38:	f36b 211f 	bfi	r1, fp, #8, #24
 8003d3c:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8003d40:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8003d44:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8003d48:	f8ba 3000 	ldrh.w	r3, [sl]
 8003d4c:	b2ac      	uxth	r4, r5
 8003d4e:	42ab      	cmp	r3, r5
 8003d50:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	d93b      	bls.n	8003dd0 <ai_platform_inputs_get+0xe0>
 8003d58:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d037      	beq.n	8003dd0 <ai_platform_inputs_get+0xe0>
 8003d60:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003d64:	2e00      	cmp	r6, #0
 8003d66:	d033      	beq.n	8003dd0 <ai_platform_inputs_get+0xe0>
 8003d68:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003d6c:	69b2      	ldr	r2, [r6, #24]
 8003d6e:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8003d72:	6810      	ldr	r0, [r2, #0]
 8003d74:	68b3      	ldr	r3, [r6, #8]
 8003d76:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8003d7a:	68f2      	ldr	r2, [r6, #12]
 8003d7c:	444c      	add	r4, r9
 8003d7e:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8003d82:	9200      	str	r2, [sp, #0]
 8003d84:	f003 fb7c 	bl	8007480 <ai_array_to_buffer_fmt>
 8003d88:	69b1      	ldr	r1, [r6, #24]
 8003d8a:	9a00      	ldr	r2, [sp, #0]
 8003d8c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003d90:	2f00      	cmp	r7, #0
 8003d92:	d0c7      	beq.n	8003d24 <ai_platform_inputs_get+0x34>
 8003d94:	2100      	movs	r1, #0
 8003d96:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8003d9a:	6831      	ldr	r1, [r6, #0]
 8003d9c:	6079      	str	r1, [r7, #4]
 8003d9e:	b111      	cbz	r1, 8003da6 <ai_platform_inputs_get+0xb6>
 8003da0:	8849      	ldrh	r1, [r1, #2]
 8003da2:	2900      	cmp	r1, #0
 8003da4:	d1b9      	bne.n	8003d1a <ai_platform_inputs_get+0x2a>
 8003da6:	69b1      	ldr	r1, [r6, #24]
 8003da8:	2700      	movs	r7, #0
 8003daa:	e7bb      	b.n	8003d24 <ai_platform_inputs_get+0x34>
 8003dac:	9803      	ldr	r0, [sp, #12]
 8003dae:	2400      	movs	r4, #0
 8003db0:	2218      	movs	r2, #24
 8003db2:	2111      	movs	r1, #17
 8003db4:	300c      	adds	r0, #12
 8003db6:	f000 fc09 	bl	80045cc <core_set_error>
 8003dba:	4620      	mov	r0, r4
 8003dbc:	9b02      	ldr	r3, [sp, #8]
 8003dbe:	b103      	cbz	r3, 8003dc2 <ai_platform_inputs_get+0xd2>
 8003dc0:	801c      	strh	r4, [r3, #0]
 8003dc2:	b005      	add	sp, #20
 8003dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc8:	2000      	movs	r0, #0
 8003dca:	b005      	add	sp, #20
 8003dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dd0:	2c00      	cmp	r4, #0
 8003dd2:	d0eb      	beq.n	8003dac <ai_platform_inputs_get+0xbc>
 8003dd4:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003dd8:	6858      	ldr	r0, [r3, #4]
 8003dda:	e7ef      	b.n	8003dbc <ai_platform_inputs_get+0xcc>
 8003ddc:	a1c00100 	.word	0xa1c00100

08003de0 <ai_platform_outputs_get>:
 8003de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de4:	4b38      	ldr	r3, [pc, #224]	@ (8003ec8 <ai_platform_outputs_get+0xe8>)
 8003de6:	b085      	sub	sp, #20
 8003de8:	6802      	ldr	r2, [r0, #0]
 8003dea:	4393      	bics	r3, r2
 8003dec:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8003df0:	d15f      	bne.n	8003eb2 <ai_platform_outputs_get+0xd2>
 8003df2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d94e      	bls.n	8003e96 <ai_platform_outputs_get+0xb6>
 8003df8:	f04f 0900 	mov.w	r9, #0
 8003dfc:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8003e00:	464d      	mov	r5, r9
 8003e02:	e016      	b.n	8003e32 <ai_platform_outputs_get+0x52>
 8003e04:	9901      	ldr	r1, [sp, #4]
 8003e06:	2301      	movs	r3, #1
 8003e08:	f848 3001 	str.w	r3, [r8, r1]
 8003e0c:	69b1      	ldr	r1, [r6, #24]
 8003e0e:	f04f 0301 	mov.w	r3, #1
 8003e12:	684e      	ldr	r6, [r1, #4]
 8003e14:	3501      	adds	r5, #1
 8003e16:	f109 091c 	add.w	r9, r9, #28
 8003e1a:	7523      	strb	r3, [r4, #20]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	6961      	ldr	r1, [r4, #20]
 8003e20:	6020      	str	r0, [r4, #0]
 8003e22:	f36b 211f 	bfi	r1, fp, #8, #24
 8003e26:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8003e2a:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8003e2e:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8003e32:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003e36:	b2ac      	uxth	r4, r5
 8003e38:	42ab      	cmp	r3, r5
 8003e3a:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8003e3e:	9301      	str	r3, [sp, #4]
 8003e40:	d93b      	bls.n	8003eba <ai_platform_outputs_get+0xda>
 8003e42:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d037      	beq.n	8003eba <ai_platform_outputs_get+0xda>
 8003e4a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003e4e:	2e00      	cmp	r6, #0
 8003e50:	d033      	beq.n	8003eba <ai_platform_outputs_get+0xda>
 8003e52:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003e56:	69b2      	ldr	r2, [r6, #24]
 8003e58:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8003e5c:	6810      	ldr	r0, [r2, #0]
 8003e5e:	68b3      	ldr	r3, [r6, #8]
 8003e60:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8003e64:	68f2      	ldr	r2, [r6, #12]
 8003e66:	444c      	add	r4, r9
 8003e68:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8003e6c:	9200      	str	r2, [sp, #0]
 8003e6e:	f003 fb07 	bl	8007480 <ai_array_to_buffer_fmt>
 8003e72:	69b1      	ldr	r1, [r6, #24]
 8003e74:	9a00      	ldr	r2, [sp, #0]
 8003e76:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003e7a:	2f00      	cmp	r7, #0
 8003e7c:	d0c7      	beq.n	8003e0e <ai_platform_outputs_get+0x2e>
 8003e7e:	2100      	movs	r1, #0
 8003e80:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8003e84:	6831      	ldr	r1, [r6, #0]
 8003e86:	6079      	str	r1, [r7, #4]
 8003e88:	b111      	cbz	r1, 8003e90 <ai_platform_outputs_get+0xb0>
 8003e8a:	8849      	ldrh	r1, [r1, #2]
 8003e8c:	2900      	cmp	r1, #0
 8003e8e:	d1b9      	bne.n	8003e04 <ai_platform_outputs_get+0x24>
 8003e90:	69b1      	ldr	r1, [r6, #24]
 8003e92:	2700      	movs	r7, #0
 8003e94:	e7bb      	b.n	8003e0e <ai_platform_outputs_get+0x2e>
 8003e96:	9803      	ldr	r0, [sp, #12]
 8003e98:	2400      	movs	r4, #0
 8003e9a:	2218      	movs	r2, #24
 8003e9c:	2111      	movs	r1, #17
 8003e9e:	300c      	adds	r0, #12
 8003ea0:	f000 fb94 	bl	80045cc <core_set_error>
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	9b02      	ldr	r3, [sp, #8]
 8003ea8:	b103      	cbz	r3, 8003eac <ai_platform_outputs_get+0xcc>
 8003eaa:	801c      	strh	r4, [r3, #0]
 8003eac:	b005      	add	sp, #20
 8003eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	b005      	add	sp, #20
 8003eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eba:	2c00      	cmp	r4, #0
 8003ebc:	d0eb      	beq.n	8003e96 <ai_platform_outputs_get+0xb6>
 8003ebe:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003ec2:	6858      	ldr	r0, [r3, #4]
 8003ec4:	e7ef      	b.n	8003ea6 <ai_platform_outputs_get+0xc6>
 8003ec6:	bf00      	nop
 8003ec8:	a1c00100 	.word	0xa1c00100

08003ecc <ai_platform_network_create>:
 8003ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8003ed6:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8003eda:	b320      	cbz	r0, 8003f26 <ai_platform_network_create+0x5a>
 8003edc:	6002      	str	r2, [r0, #0]
 8003ede:	4616      	mov	r6, r2
 8003ee0:	461f      	mov	r7, r3
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	f000 fb6a 	bl	80045bc <core_init>
 8003ee8:	b970      	cbnz	r0, 8003f08 <ai_platform_network_create+0x3c>
 8003eea:	2530      	movs	r5, #48	@ 0x30
 8003eec:	2300      	movs	r3, #0
 8003eee:	6023      	str	r3, [r4, #0]
 8003ef0:	2410      	movs	r4, #16
 8003ef2:	464a      	mov	r2, r9
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	4638      	mov	r0, r7
 8003ef8:	f003 fb6c 	bl	80075d4 <ai_version_get>
 8003efc:	60b0      	str	r0, [r6, #8]
 8003efe:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8003f02:	b003      	add	sp, #12
 8003f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f08:	2200      	movs	r2, #0
 8003f0a:	4641      	mov	r1, r8
 8003f0c:	4638      	mov	r0, r7
 8003f0e:	f003 fb61 	bl	80075d4 <ai_version_get>
 8003f12:	4605      	mov	r5, r0
 8003f14:	2200      	movs	r2, #0
 8003f16:	2105      	movs	r1, #5
 8003f18:	2001      	movs	r0, #1
 8003f1a:	f003 fb5b 	bl	80075d4 <ai_version_get>
 8003f1e:	4285      	cmp	r5, r0
 8003f20:	d008      	beq.n	8003f34 <ai_platform_network_create+0x68>
 8003f22:	2501      	movs	r5, #1
 8003f24:	e7e2      	b.n	8003eec <ai_platform_network_create+0x20>
 8003f26:	2510      	movs	r5, #16
 8003f28:	462c      	mov	r4, r5
 8003f2a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8003f2e:	b003      	add	sp, #12
 8003f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f34:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <ai_platform_network_create+0x80>)
 8003f36:	a801      	add	r0, sp, #4
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	f000 fb53 	bl	80045e4 <ai_check_custom_types>
 8003f3e:	b110      	cbz	r0, 8003f46 <ai_platform_network_create+0x7a>
 8003f40:	2400      	movs	r4, #0
 8003f42:	4625      	mov	r5, r4
 8003f44:	e7d5      	b.n	8003ef2 <ai_platform_network_create+0x26>
 8003f46:	2502      	movs	r5, #2
 8003f48:	e7d0      	b.n	8003eec <ai_platform_network_create+0x20>
 8003f4a:	bf00      	nop
 8003f4c:	84048403 	.word	0x84048403

08003f50 <ai_platform_network_init>:
 8003f50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f54:	4a5c      	ldr	r2, [pc, #368]	@ (80040c8 <ai_platform_network_init+0x178>)
 8003f56:	460c      	mov	r4, r1
 8003f58:	6801      	ldr	r1, [r0, #0]
 8003f5a:	438a      	bics	r2, r1
 8003f5c:	d133      	bne.n	8003fc6 <ai_platform_network_init+0x76>
 8003f5e:	4605      	mov	r5, r0
 8003f60:	2c00      	cmp	r4, #0
 8003f62:	f000 8093 	beq.w	800408c <ai_platform_network_init+0x13c>
 8003f66:	f8d4 b000 	ldr.w	fp, [r4]
 8003f6a:	4a58      	ldr	r2, [pc, #352]	@ (80040cc <ai_platform_network_init+0x17c>)
 8003f6c:	4593      	cmp	fp, r2
 8003f6e:	d10f      	bne.n	8003f90 <ai_platform_network_init+0x40>
 8003f70:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 8003f74:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8003f78:	4b53      	ldr	r3, [pc, #332]	@ (80040c8 <ai_platform_network_init+0x178>)
 8003f7a:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 8003f7e:	0c32      	lsrs	r2, r6, #16
 8003f80:	4299      	cmp	r1, r3
 8003f82:	d02c      	beq.n	8003fde <ai_platform_network_init+0x8e>
 8003f84:	2303      	movs	r3, #3
 8003f86:	462c      	mov	r4, r5
 8003f88:	612b      	str	r3, [r5, #16]
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f90:	4627      	mov	r7, r4
 8003f92:	2101      	movs	r1, #1
 8003f94:	6864      	ldr	r4, [r4, #4]
 8003f96:	4638      	mov	r0, r7
 8003f98:	f107 081c 	add.w	r8, r7, #28
 8003f9c:	f7ff fd7e 	bl	8003a9c <ai_buffer_get_size>
 8003fa0:	4606      	mov	r6, r0
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	4640      	mov	r0, r8
 8003fa6:	f8d7 9020 	ldr.w	r9, [r7, #32]
 8003faa:	f7ff fd77 	bl	8003a9c <ai_buffer_get_size>
 8003fae:	b976      	cbnz	r6, 8003fce <ai_platform_network_init+0x7e>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d150      	bne.n	8004056 <ai_platform_network_init+0x106>
 8003fb4:	4680      	mov	r8, r0
 8003fb6:	4686      	mov	lr, r0
 8003fb8:	4606      	mov	r6, r0
 8003fba:	4607      	mov	r7, r0
 8003fbc:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8003fc0:	6829      	ldr	r1, [r5, #0]
 8003fc2:	0436      	lsls	r6, r6, #16
 8003fc4:	e7d8      	b.n	8003f78 <ai_platform_network_init+0x28>
 8003fc6:	2400      	movs	r4, #0
 8003fc8:	4620      	mov	r0, r4
 8003fca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fce:	2800      	cmp	r0, #0
 8003fd0:	d13b      	bne.n	800404a <ai_platform_network_init+0xfa>
 8003fd2:	4680      	mov	r8, r0
 8003fd4:	4686      	mov	lr, r0
 8003fd6:	2c00      	cmp	r4, #0
 8003fd8:	d05e      	beq.n	8004098 <ai_platform_network_init+0x148>
 8003fda:	2601      	movs	r6, #1
 8003fdc:	e7ee      	b.n	8003fbc <ai_platform_network_init+0x6c>
 8003fde:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	4b3a      	ldr	r3, [pc, #232]	@ (80040cc <ai_platform_network_init+0x17c>)
 8003fe4:	d33e      	bcc.n	8004064 <ai_platform_network_init+0x114>
 8003fe6:	459b      	cmp	fp, r3
 8003fe8:	d03e      	beq.n	8004068 <ai_platform_network_init+0x118>
 8003fea:	b1a2      	cbz	r2, 8004016 <ai_platform_network_init+0xc6>
 8003fec:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003ff0:	f04f 0c00 	mov.w	ip, #0
 8003ff4:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8003ff8:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8003ffa:	eb07 0b0c 	add.w	fp, r7, ip
 8003ffe:	4464      	add	r4, ip
 8004000:	f10c 0c1c 	add.w	ip, ip, #28
 8004004:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8004008:	45cc      	cmp	ip, r9
 800400a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800400c:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8004010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004014:	d1f0      	bne.n	8003ff8 <ai_platform_network_init+0xa8>
 8004016:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 8004018:	622e      	str	r6, [r5, #32]
 800401a:	4553      	cmp	r3, sl
 800401c:	d34b      	bcc.n	80040b6 <ai_platform_network_init+0x166>
 800401e:	f1ba 0f00 	cmp.w	sl, #0
 8004022:	d025      	beq.n	8004070 <ai_platform_network_init+0x120>
 8004024:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8004028:	2700      	movs	r7, #0
 800402a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800402e:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 8004030:	eb08 0607 	add.w	r6, r8, r7
 8004034:	443c      	add	r4, r7
 8004036:	371c      	adds	r7, #28
 8004038:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800403a:	4557      	cmp	r7, sl
 800403c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800403e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004042:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004046:	d1f2      	bne.n	800402e <ai_platform_network_init+0xde>
 8004048:	e012      	b.n	8004070 <ai_platform_network_init+0x120>
 800404a:	f1b9 0f00 	cmp.w	r9, #0
 800404e:	d015      	beq.n	800407c <ai_platform_network_init+0x12c>
 8004050:	f04f 0e01 	mov.w	lr, #1
 8004054:	e7bf      	b.n	8003fd6 <ai_platform_network_init+0x86>
 8004056:	f1b9 0f00 	cmp.w	r9, #0
 800405a:	d00f      	beq.n	800407c <ai_platform_network_init+0x12c>
 800405c:	f04f 0e01 	mov.w	lr, #1
 8004060:	4637      	mov	r7, r6
 8004062:	e7ab      	b.n	8003fbc <ai_platform_network_init+0x6c>
 8004064:	459b      	cmp	fp, r3
 8004066:	d11e      	bne.n	80040a6 <ai_platform_network_init+0x156>
 8004068:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 800406c:	e9c5 6708 	strd	r6, r7, [r5, #32]
 8004070:	4628      	mov	r0, r5
 8004072:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 8004076:	f000 fadd 	bl	8004634 <ai_layers_init_all>
 800407a:	e783      	b.n	8003f84 <ai_platform_network_init+0x34>
 800407c:	2213      	movs	r2, #19
 800407e:	2110      	movs	r1, #16
 8004080:	f105 000c 	add.w	r0, r5, #12
 8004084:	2400      	movs	r4, #0
 8004086:	f000 faa1 	bl	80045cc <core_set_error>
 800408a:	e77e      	b.n	8003f8a <ai_platform_network_init+0x3a>
 800408c:	2211      	movs	r2, #17
 800408e:	2110      	movs	r1, #16
 8004090:	300c      	adds	r0, #12
 8004092:	f000 fa9b 	bl	80045cc <core_set_error>
 8004096:	e778      	b.n	8003f8a <ai_platform_network_init+0x3a>
 8004098:	2212      	movs	r2, #18
 800409a:	2110      	movs	r1, #16
 800409c:	f105 000c 	add.w	r0, r5, #12
 80040a0:	f000 fa94 	bl	80045cc <core_set_error>
 80040a4:	e771      	b.n	8003f8a <ai_platform_network_init+0x3a>
 80040a6:	2212      	movs	r2, #18
 80040a8:	2116      	movs	r1, #22
 80040aa:	f105 000c 	add.w	r0, r5, #12
 80040ae:	2400      	movs	r4, #0
 80040b0:	f000 fa8c 	bl	80045cc <core_set_error>
 80040b4:	e769      	b.n	8003f8a <ai_platform_network_init+0x3a>
 80040b6:	2213      	movs	r2, #19
 80040b8:	2116      	movs	r1, #22
 80040ba:	f105 000c 	add.w	r0, r5, #12
 80040be:	2400      	movs	r4, #0
 80040c0:	f000 fa84 	bl	80045cc <core_set_error>
 80040c4:	e761      	b.n	8003f8a <ai_platform_network_init+0x3a>
 80040c6:	bf00      	nop
 80040c8:	a1c00100 	.word	0xa1c00100
 80040cc:	a1facade 	.word	0xa1facade

080040d0 <ai_platform_network_post_init>:
 80040d0:	b538      	push	{r3, r4, r5, lr}
 80040d2:	4b16      	ldr	r3, [pc, #88]	@ (800412c <ai_platform_network_post_init+0x5c>)
 80040d4:	6802      	ldr	r2, [r0, #0]
 80040d6:	ea02 0103 	and.w	r1, r2, r3
 80040da:	4393      	bics	r3, r2
 80040dc:	d108      	bne.n	80040f0 <ai_platform_network_post_init+0x20>
 80040de:	6903      	ldr	r3, [r0, #16]
 80040e0:	4604      	mov	r4, r0
 80040e2:	f013 0502 	ands.w	r5, r3, #2
 80040e6:	d005      	beq.n	80040f4 <ai_platform_network_post_init+0x24>
 80040e8:	428a      	cmp	r2, r1
 80040ea:	d00a      	beq.n	8004102 <ai_platform_network_post_init+0x32>
 80040ec:	2001      	movs	r0, #1
 80040ee:	bd38      	pop	{r3, r4, r5, pc}
 80040f0:	2000      	movs	r0, #0
 80040f2:	bd38      	pop	{r3, r4, r5, pc}
 80040f4:	2210      	movs	r2, #16
 80040f6:	2111      	movs	r1, #17
 80040f8:	300c      	adds	r0, #12
 80040fa:	f000 fa67 	bl	80045cc <core_set_error>
 80040fe:	4628      	mov	r0, r5
 8004100:	bd38      	pop	{r3, r4, r5, pc}
 8004102:	f000 faa5 	bl	8004650 <ai_layers_post_init_all>
 8004106:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0ef      	beq.n	80040ec <ai_platform_network_post_init+0x1c>
 800410c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800410e:	e008      	b.n	8004122 <ai_platform_network_post_init+0x52>
 8004110:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8004114:	4798      	blx	r3
 8004116:	692b      	ldr	r3, [r5, #16]
 8004118:	42ab      	cmp	r3, r5
 800411a:	461d      	mov	r5, r3
 800411c:	d0e6      	beq.n	80040ec <ai_platform_network_post_init+0x1c>
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0e4      	beq.n	80040ec <ai_platform_network_post_init+0x1c>
 8004122:	4629      	mov	r1, r5
 8004124:	2000      	movs	r0, #0
 8004126:	2d00      	cmp	r5, #0
 8004128:	d1f2      	bne.n	8004110 <ai_platform_network_post_init+0x40>
 800412a:	e7df      	b.n	80040ec <ai_platform_network_post_init+0x1c>
 800412c:	a1c00100 	.word	0xa1c00100

08004130 <ai_platform_network_process>:
 8004130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004134:	b085      	sub	sp, #20
 8004136:	4bb7      	ldr	r3, [pc, #732]	@ (8004414 <ai_platform_network_process+0x2e4>)
 8004138:	9202      	str	r2, [sp, #8]
 800413a:	6802      	ldr	r2, [r0, #0]
 800413c:	4393      	bics	r3, r2
 800413e:	f040 8142 	bne.w	80043c6 <ai_platform_network_process+0x296>
 8004142:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8004144:	4605      	mov	r5, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8126 	beq.w	8004398 <ai_platform_network_process+0x268>
 800414c:	6903      	ldr	r3, [r0, #16]
 800414e:	2200      	movs	r2, #0
 8004150:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	6182      	str	r2, [r0, #24]
 800415a:	2b03      	cmp	r3, #3
 800415c:	f040 8122 	bne.w	80043a4 <ai_platform_network_process+0x274>
 8004160:	2900      	cmp	r1, #0
 8004162:	f000 8136 	beq.w	80043d2 <ai_platform_network_process+0x2a2>
 8004166:	fab8 f788 	clz	r7, r8
 800416a:	097f      	lsrs	r7, r7, #5
 800416c:	f1b8 0f00 	cmp.w	r8, #0
 8004170:	f000 812f 	beq.w	80043d2 <ai_platform_network_process+0x2a2>
 8004174:	f8b8 3000 	ldrh.w	r3, [r8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 812a 	beq.w	80043d2 <ai_platform_network_process+0x2a2>
 800417e:	698b      	ldr	r3, [r1, #24]
 8004180:	460e      	mov	r6, r1
 8004182:	9003      	str	r0, [sp, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	9301      	str	r3, [sp, #4]
 8004188:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d072      	beq.n	8004276 <ai_platform_network_process+0x146>
 8004190:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8004194:	2c00      	cmp	r4, #0
 8004196:	d06e      	beq.n	8004276 <ai_platform_network_process+0x146>
 8004198:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800419c:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80041a0:	f8d3 a000 	ldr.w	sl, [r3]
 80041a4:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 80041a8:	f000 8112 	beq.w	80043d0 <ai_platform_network_process+0x2a0>
 80041ac:	69a3      	ldr	r3, [r4, #24]
 80041ae:	2101      	movs	r1, #1
 80041b0:	4630      	mov	r0, r6
 80041b2:	685d      	ldr	r5, [r3, #4]
 80041b4:	f7ff fc72 	bl	8003a9c <ai_buffer_get_size>
 80041b8:	4285      	cmp	r5, r0
 80041ba:	f0c0 8115 	bcc.w	80043e8 <ai_platform_network_process+0x2b8>
 80041be:	68e0      	ldr	r0, [r4, #12]
 80041c0:	69b1      	ldr	r1, [r6, #24]
 80041c2:	68c2      	ldr	r2, [r0, #12]
 80041c4:	68cb      	ldr	r3, [r1, #12]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	f040 810e 	bne.w	80043e8 <ai_platform_network_process+0x2b8>
 80041cc:	6882      	ldr	r2, [r0, #8]
 80041ce:	688b      	ldr	r3, [r1, #8]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	f040 8109 	bne.w	80043e8 <ai_platform_network_process+0x2b8>
 80041d6:	6842      	ldr	r2, [r0, #4]
 80041d8:	684b      	ldr	r3, [r1, #4]
 80041da:	429a      	cmp	r2, r3
 80041dc:	f040 8104 	bne.w	80043e8 <ai_platform_network_process+0x2b8>
 80041e0:	69a3      	ldr	r3, [r4, #24]
 80041e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041e6:	f003 f9e3 	bl	80075b0 <ai_array_get_data_byte_size>
 80041ea:	4605      	mov	r5, r0
 80041ec:	4620      	mov	r0, r4
 80041ee:	f003 f9f7 	bl	80075e0 <get_tensor_byte_size>
 80041f2:	4285      	cmp	r5, r0
 80041f4:	f0c0 80f8 	bcc.w	80043e8 <ai_platform_network_process+0x2b8>
 80041f8:	69a3      	ldr	r3, [r4, #24]
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	f003 f940 	bl	8007480 <ai_array_to_buffer_fmt>
 8004200:	6833      	ldr	r3, [r6, #0]
 8004202:	4058      	eors	r0, r3
 8004204:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8004208:	f040 81a4 	bne.w	8004554 <ai_platform_network_process+0x424>
 800420c:	6873      	ldr	r3, [r6, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80de 	beq.w	80043d0 <ai_platform_network_process+0x2a0>
 8004214:	69b3      	ldr	r3, [r6, #24]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 81a4 	beq.w	8004566 <ai_platform_network_process+0x436>
 800421e:	9a01      	ldr	r2, [sp, #4]
 8004220:	4620      	mov	r0, r4
 8004222:	3701      	adds	r7, #1
 8004224:	361c      	adds	r6, #28
 8004226:	429a      	cmp	r2, r3
 8004228:	bf38      	it	cc
 800422a:	461a      	movcc	r2, r3
 800422c:	9201      	str	r2, [sp, #4]
 800422e:	f003 f9d7 	bl	80075e0 <get_tensor_byte_size>
 8004232:	f8c9 0008 	str.w	r0, [r9, #8]
 8004236:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	fb00 f303 	mul.w	r3, r0, r3
 8004240:	f8c9 300c 	str.w	r3, [r9, #12]
 8004244:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8004248:	440b      	add	r3, r1
 800424a:	f8c9 1004 	str.w	r1, [r9, #4]
 800424e:	f84a 300b 	str.w	r3, [sl, fp]
 8004252:	69a0      	ldr	r0, [r4, #24]
 8004254:	6803      	ldr	r3, [r0, #0]
 8004256:	009a      	lsls	r2, r3, #2
 8004258:	f100 80af 	bmi.w	80043ba <ai_platform_network_process+0x28a>
 800425c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	4419      	add	r1, r3
 8004264:	6081      	str	r1, [r0, #8]
 8004266:	69a3      	ldr	r3, [r4, #24]
 8004268:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800426c:	60da      	str	r2, [r3, #12]
 800426e:	f8b8 3000 	ldrh.w	r3, [r8]
 8004272:	42bb      	cmp	r3, r7
 8004274:	d888      	bhi.n	8004188 <ai_platform_network_process+0x58>
 8004276:	9d03      	ldr	r5, [sp, #12]
 8004278:	9b02      	ldr	r3, [sp, #8]
 800427a:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 817b 	beq.w	8004578 <ai_platform_network_process+0x448>
 8004282:	2a01      	cmp	r2, #1
 8004284:	f240 80bd 	bls.w	8004402 <ai_platform_network_process+0x2d2>
 8004288:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 800428c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80b6 	beq.w	8004402 <ai_platform_network_process+0x2d2>
 8004296:	2700      	movs	r7, #0
 8004298:	f8dd b008 	ldr.w	fp, [sp, #8]
 800429c:	9502      	str	r5, [sp, #8]
 800429e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 80bd 	beq.w	8004422 <ai_platform_network_process+0x2f2>
 80042a8:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80042ac:	2e00      	cmp	r6, #0
 80042ae:	f000 80b8 	beq.w	8004422 <ai_platform_network_process+0x2f2>
 80042b2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80042b6:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 80042ba:	681c      	ldr	r4, [r3, #0]
 80042bc:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 80042c0:	f000 8170 	beq.w	80045a4 <ai_platform_network_process+0x474>
 80042c4:	69b3      	ldr	r3, [r6, #24]
 80042c6:	2101      	movs	r1, #1
 80042c8:	4658      	mov	r0, fp
 80042ca:	685d      	ldr	r5, [r3, #4]
 80042cc:	f7ff fbe6 	bl	8003a9c <ai_buffer_get_size>
 80042d0:	4285      	cmp	r5, r0
 80042d2:	f0c0 8095 	bcc.w	8004400 <ai_platform_network_process+0x2d0>
 80042d6:	68f0      	ldr	r0, [r6, #12]
 80042d8:	f8db 1018 	ldr.w	r1, [fp, #24]
 80042dc:	68c2      	ldr	r2, [r0, #12]
 80042de:	68cb      	ldr	r3, [r1, #12]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	f040 808d 	bne.w	8004400 <ai_platform_network_process+0x2d0>
 80042e6:	6882      	ldr	r2, [r0, #8]
 80042e8:	688b      	ldr	r3, [r1, #8]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	f040 8088 	bne.w	8004400 <ai_platform_network_process+0x2d0>
 80042f0:	6842      	ldr	r2, [r0, #4]
 80042f2:	684b      	ldr	r3, [r1, #4]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	f040 8083 	bne.w	8004400 <ai_platform_network_process+0x2d0>
 80042fa:	69b3      	ldr	r3, [r6, #24]
 80042fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004300:	f003 f956 	bl	80075b0 <ai_array_get_data_byte_size>
 8004304:	9003      	str	r0, [sp, #12]
 8004306:	4630      	mov	r0, r6
 8004308:	f003 f96a 	bl	80075e0 <get_tensor_byte_size>
 800430c:	9b03      	ldr	r3, [sp, #12]
 800430e:	4283      	cmp	r3, r0
 8004310:	d376      	bcc.n	8004400 <ai_platform_network_process+0x2d0>
 8004312:	69b3      	ldr	r3, [r6, #24]
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	f003 f8b3 	bl	8007480 <ai_array_to_buffer_fmt>
 800431a:	f8db 3000 	ldr.w	r3, [fp]
 800431e:	4058      	eors	r0, r3
 8004320:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8004324:	f040 812c 	bne.w	8004580 <ai_platform_network_process+0x450>
 8004328:	f8db 3004 	ldr.w	r3, [fp, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8139 	beq.w	80045a4 <ai_platform_network_process+0x474>
 8004332:	f8db 3018 	ldr.w	r3, [fp, #24]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 812a 	beq.w	8004592 <ai_platform_network_process+0x462>
 800433e:	9a01      	ldr	r2, [sp, #4]
 8004340:	4630      	mov	r0, r6
 8004342:	3701      	adds	r7, #1
 8004344:	f10b 0b1c 	add.w	fp, fp, #28
 8004348:	429a      	cmp	r2, r3
 800434a:	bf38      	it	cc
 800434c:	461a      	movcc	r2, r3
 800434e:	9201      	str	r2, [sp, #4]
 8004350:	f003 f946 	bl	80075e0 <get_tensor_byte_size>
 8004354:	f8c8 0008 	str.w	r0, [r8, #8]
 8004358:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	fb00 f303 	mul.w	r3, r0, r3
 8004362:	f8c8 300c 	str.w	r3, [r8, #12]
 8004366:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 800436a:	440b      	add	r3, r1
 800436c:	f8c8 1004 	str.w	r1, [r8, #4]
 8004370:	f844 300a 	str.w	r3, [r4, sl]
 8004374:	69b0      	ldr	r0, [r6, #24]
 8004376:	6803      	ldr	r3, [r0, #0]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	d44d      	bmi.n	8004418 <ai_platform_network_process+0x2e8>
 800437c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	4419      	add	r1, r3
 8004384:	6081      	str	r1, [r0, #8]
 8004386:	69b3      	ldr	r3, [r6, #24]
 8004388:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800438c:	60da      	str	r2, [r3, #12]
 800438e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004392:	42bb      	cmp	r3, r7
 8004394:	d883      	bhi.n	800429e <ai_platform_network_process+0x16e>
 8004396:	e044      	b.n	8004422 <ai_platform_network_process+0x2f2>
 8004398:	6902      	ldr	r2, [r0, #16]
 800439a:	6183      	str	r3, [r0, #24]
 800439c:	f002 0203 	and.w	r2, r2, #3
 80043a0:	2a03      	cmp	r2, #3
 80043a2:	d016      	beq.n	80043d2 <ai_platform_network_process+0x2a2>
 80043a4:	2230      	movs	r2, #48	@ 0x30
 80043a6:	2111      	movs	r1, #17
 80043a8:	f105 000c 	add.w	r0, r5, #12
 80043ac:	2400      	movs	r4, #0
 80043ae:	f000 f90d 	bl	80045cc <core_set_error>
 80043b2:	4620      	mov	r0, r4
 80043b4:	b005      	add	sp, #20
 80043b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ba:	f8b8 3000 	ldrh.w	r3, [r8]
 80043be:	429f      	cmp	r7, r3
 80043c0:	f4ff aee2 	bcc.w	8004188 <ai_platform_network_process+0x58>
 80043c4:	e757      	b.n	8004276 <ai_platform_network_process+0x146>
 80043c6:	2400      	movs	r4, #0
 80043c8:	4620      	mov	r0, r4
 80043ca:	b005      	add	sp, #20
 80043cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d0:	9d03      	ldr	r5, [sp, #12]
 80043d2:	2400      	movs	r4, #0
 80043d4:	2217      	movs	r2, #23
 80043d6:	2112      	movs	r1, #18
 80043d8:	f105 000c 	add.w	r0, r5, #12
 80043dc:	f000 f8f6 	bl	80045cc <core_set_error>
 80043e0:	4620      	mov	r0, r4
 80043e2:	b005      	add	sp, #20
 80043e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043e8:	9d03      	ldr	r5, [sp, #12]
 80043ea:	2400      	movs	r4, #0
 80043ec:	2218      	movs	r2, #24
 80043ee:	2112      	movs	r1, #18
 80043f0:	f105 000c 	add.w	r0, r5, #12
 80043f4:	f000 f8ea 	bl	80045cc <core_set_error>
 80043f8:	4620      	mov	r0, r4
 80043fa:	b005      	add	sp, #20
 80043fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004400:	9d02      	ldr	r5, [sp, #8]
 8004402:	2218      	movs	r2, #24
 8004404:	2113      	movs	r1, #19
 8004406:	f105 000c 	add.w	r0, r5, #12
 800440a:	2400      	movs	r4, #0
 800440c:	f000 f8de 	bl	80045cc <core_set_error>
 8004410:	e7cf      	b.n	80043b2 <ai_platform_network_process+0x282>
 8004412:	bf00      	nop
 8004414:	a1c00100 	.word	0xa1c00100
 8004418:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800441c:	429f      	cmp	r7, r3
 800441e:	f4ff af3e 	bcc.w	800429e <ai_platform_network_process+0x16e>
 8004422:	9d02      	ldr	r5, [sp, #8]
 8004424:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004428:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800442a:	832b      	strh	r3, [r5, #24]
 800442c:	2a00      	cmp	r2, #0
 800442e:	f040 808b 	bne.w	8004548 <ai_platform_network_process+0x418>
 8004432:	4616      	mov	r6, r2
 8004434:	4617      	mov	r7, r2
 8004436:	8b6c      	ldrh	r4, [r5, #26]
 8004438:	429c      	cmp	r4, r3
 800443a:	d2ba      	bcs.n	80043b2 <ai_platform_network_process+0x282>
 800443c:	46ab      	mov	fp, r5
 800443e:	2e00      	cmp	r6, #0
 8004440:	d030      	beq.n	80044a4 <ai_platform_network_process+0x374>
 8004442:	f04f 0800 	mov.w	r8, #0
 8004446:	e014      	b.n	8004472 <ai_platform_network_process+0x342>
 8004448:	6882      	ldr	r2, [r0, #8]
 800444a:	68c5      	ldr	r5, [r0, #12]
 800444c:	6863      	ldr	r3, [r4, #4]
 800444e:	1b52      	subs	r2, r2, r5
 8004450:	4413      	add	r3, r2
 8004452:	6083      	str	r3, [r0, #8]
 8004454:	698b      	ldr	r3, [r1, #24]
 8004456:	6862      	ldr	r2, [r4, #4]
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	f859 200a 	ldr.w	r2, [r9, sl]
 800445e:	f108 0801 	add.w	r8, r8, #1
 8004462:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8004466:	440b      	add	r3, r1
 8004468:	4293      	cmp	r3, r2
 800446a:	d301      	bcc.n	8004470 <ai_platform_network_process+0x340>
 800446c:	68e3      	ldr	r3, [r4, #12]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	6063      	str	r3, [r4, #4]
 8004472:	8833      	ldrh	r3, [r6, #0]
 8004474:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8004478:	4543      	cmp	r3, r8
 800447a:	d913      	bls.n	80044a4 <ai_platform_network_process+0x374>
 800447c:	6873      	ldr	r3, [r6, #4]
 800447e:	b18b      	cbz	r3, 80044a4 <ai_platform_network_process+0x374>
 8004480:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8004484:	b171      	cbz	r1, 80044a4 <ai_platform_network_process+0x374>
 8004486:	6988      	ldr	r0, [r1, #24]
 8004488:	68b2      	ldr	r2, [r6, #8]
 800448a:	6803      	ldr	r3, [r0, #0]
 800448c:	f8d2 9000 	ldr.w	r9, [r2]
 8004490:	009d      	lsls	r5, r3, #2
 8004492:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8004496:	d5d7      	bpl.n	8004448 <ai_platform_network_process+0x318>
 8004498:	6881      	ldr	r1, [r0, #8]
 800449a:	68a2      	ldr	r2, [r4, #8]
 800449c:	6860      	ldr	r0, [r4, #4]
 800449e:	f002 fbc9 	bl	8006c34 <st_int8_copy>
 80044a2:	e7da      	b.n	800445a <ai_platform_network_process+0x32a>
 80044a4:	4658      	mov	r0, fp
 80044a6:	f000 f8e7 	bl	8004678 <ai_layers_forward_all>
 80044aa:	2f00      	cmp	r7, #0
 80044ac:	d03d      	beq.n	800452a <ai_platform_network_process+0x3fa>
 80044ae:	2400      	movs	r4, #0
 80044b0:	e016      	b.n	80044e0 <ai_platform_network_process+0x3b0>
 80044b2:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80044b6:	f859 100a 	ldr.w	r1, [r9, sl]
 80044ba:	4413      	add	r3, r2
 80044bc:	428b      	cmp	r3, r1
 80044be:	d302      	bcc.n	80044c6 <ai_platform_network_process+0x396>
 80044c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80044c4:	1acb      	subs	r3, r1, r3
 80044c6:	f8c8 3004 	str.w	r3, [r8, #4]
 80044ca:	6981      	ldr	r1, [r0, #24]
 80044cc:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80044d0:	1b52      	subs	r2, r2, r5
 80044d2:	4413      	add	r3, r2
 80044d4:	608b      	str	r3, [r1, #8]
 80044d6:	6983      	ldr	r3, [r0, #24]
 80044d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80044dc:	60da      	str	r2, [r3, #12]
 80044de:	3401      	adds	r4, #1
 80044e0:	883b      	ldrh	r3, [r7, #0]
 80044e2:	42a3      	cmp	r3, r4
 80044e4:	d921      	bls.n	800452a <ai_platform_network_process+0x3fa>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	b1fb      	cbz	r3, 800452a <ai_platform_network_process+0x3fa>
 80044ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80044ee:	b1e0      	cbz	r0, 800452a <ai_platform_network_process+0x3fa>
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80044f6:	6983      	ldr	r3, [r0, #24]
 80044f8:	f8d2 9000 	ldr.w	r9, [r2]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8004502:	0092      	lsls	r2, r2, #2
 8004504:	d5d5      	bpl.n	80044b2 <ai_platform_network_process+0x382>
 8004506:	6898      	ldr	r0, [r3, #8]
 8004508:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800450c:	f002 fb92 	bl	8006c34 <st_int8_copy>
 8004510:	f859 200a 	ldr.w	r2, [r9, sl]
 8004514:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8004518:	440b      	add	r3, r1
 800451a:	4293      	cmp	r3, r2
 800451c:	d302      	bcc.n	8004524 <ai_platform_network_process+0x3f4>
 800451e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	f8c8 3004 	str.w	r3, [r8, #4]
 8004528:	e7d9      	b.n	80044de <ai_platform_network_process+0x3ae>
 800452a:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800452e:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8004532:	3401      	adds	r4, #1
 8004534:	b2a4      	uxth	r4, r4
 8004536:	42a3      	cmp	r3, r4
 8004538:	f8ab 401a 	strh.w	r4, [fp, #26]
 800453c:	f63f af7f 	bhi.w	800443e <ai_platform_network_process+0x30e>
 8004540:	4620      	mov	r0, r4
 8004542:	b005      	add	sp, #20
 8004544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004548:	2a01      	cmp	r2, #1
 800454a:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 800454c:	d033      	beq.n	80045b6 <ai_platform_network_process+0x486>
 800454e:	f106 070c 	add.w	r7, r6, #12
 8004552:	e770      	b.n	8004436 <ai_platform_network_process+0x306>
 8004554:	9d03      	ldr	r5, [sp, #12]
 8004556:	2219      	movs	r2, #25
 8004558:	2112      	movs	r1, #18
 800455a:	2400      	movs	r4, #0
 800455c:	f105 000c 	add.w	r0, r5, #12
 8004560:	f000 f834 	bl	80045cc <core_set_error>
 8004564:	e725      	b.n	80043b2 <ai_platform_network_process+0x282>
 8004566:	9d03      	ldr	r5, [sp, #12]
 8004568:	4604      	mov	r4, r0
 800456a:	2221      	movs	r2, #33	@ 0x21
 800456c:	2112      	movs	r1, #18
 800456e:	f105 000c 	add.w	r0, r5, #12
 8004572:	f000 f82b 	bl	80045cc <core_set_error>
 8004576:	e71c      	b.n	80043b2 <ai_platform_network_process+0x282>
 8004578:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800457c:	832b      	strh	r3, [r5, #24]
 800457e:	e755      	b.n	800442c <ai_platform_network_process+0x2fc>
 8004580:	9d02      	ldr	r5, [sp, #8]
 8004582:	2219      	movs	r2, #25
 8004584:	2113      	movs	r1, #19
 8004586:	2400      	movs	r4, #0
 8004588:	f105 000c 	add.w	r0, r5, #12
 800458c:	f000 f81e 	bl	80045cc <core_set_error>
 8004590:	e70f      	b.n	80043b2 <ai_platform_network_process+0x282>
 8004592:	9d02      	ldr	r5, [sp, #8]
 8004594:	4604      	mov	r4, r0
 8004596:	2221      	movs	r2, #33	@ 0x21
 8004598:	2113      	movs	r1, #19
 800459a:	f105 000c 	add.w	r0, r5, #12
 800459e:	f000 f815 	bl	80045cc <core_set_error>
 80045a2:	e706      	b.n	80043b2 <ai_platform_network_process+0x282>
 80045a4:	9d02      	ldr	r5, [sp, #8]
 80045a6:	2217      	movs	r2, #23
 80045a8:	2113      	movs	r1, #19
 80045aa:	2400      	movs	r4, #0
 80045ac:	f105 000c 	add.w	r0, r5, #12
 80045b0:	f000 f80c 	bl	80045cc <core_set_error>
 80045b4:	e6fd      	b.n	80043b2 <ai_platform_network_process+0x282>
 80045b6:	2700      	movs	r7, #0
 80045b8:	e73d      	b.n	8004436 <ai_platform_network_process+0x306>
 80045ba:	bf00      	nop

080045bc <core_init>:
 80045bc:	2001      	movs	r0, #1
 80045be:	4770      	bx	lr

080045c0 <core_get_error>:
 80045c0:	4603      	mov	r3, r0
 80045c2:	2200      	movs	r2, #0
 80045c4:	6800      	ldr	r0, [r0, #0]
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop

080045cc <core_set_error>:
 80045cc:	4603      	mov	r3, r0
 80045ce:	7800      	ldrb	r0, [r0, #0]
 80045d0:	b108      	cbz	r0, 80045d6 <core_set_error+0xa>
 80045d2:	2000      	movs	r0, #0
 80045d4:	4770      	bx	lr
 80045d6:	7019      	strb	r1, [r3, #0]
 80045d8:	2001      	movs	r0, #1
 80045da:	6819      	ldr	r1, [r3, #0]
 80045dc:	f362 211f 	bfi	r1, r2, #8, #24
 80045e0:	6019      	str	r1, [r3, #0]
 80045e2:	4770      	bx	lr

080045e4 <ai_check_custom_types>:
 80045e4:	b082      	sub	sp, #8
 80045e6:	4b12      	ldr	r3, [pc, #72]	@ (8004630 <ai_check_custom_types+0x4c>)
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	b118      	cbz	r0, 80045f4 <ai_check_custom_types+0x10>
 80045ec:	7803      	ldrb	r3, [r0, #0]
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d002      	beq.n	80045f8 <ai_check_custom_types+0x14>
 80045f2:	2000      	movs	r0, #0
 80045f4:	b002      	add	sp, #8
 80045f6:	4770      	bx	lr
 80045f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d004      	beq.n	800460a <ai_check_custom_types+0x26>
 8004600:	2001      	movs	r0, #1
 8004602:	f080 0001 	eor.w	r0, r0, #1
 8004606:	b002      	add	sp, #8
 8004608:	4770      	bx	lr
 800460a:	7842      	ldrb	r2, [r0, #1]
 800460c:	3001      	adds	r0, #1
 800460e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004612:	429a      	cmp	r2, r3
 8004614:	d1f4      	bne.n	8004600 <ai_check_custom_types+0x1c>
 8004616:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800461a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800461e:	429a      	cmp	r2, r3
 8004620:	d1ee      	bne.n	8004600 <ai_check_custom_types+0x1c>
 8004622:	7842      	ldrb	r2, [r0, #1]
 8004624:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004628:	429a      	cmp	r2, r3
 800462a:	d1e9      	bne.n	8004600 <ai_check_custom_types+0x1c>
 800462c:	2000      	movs	r0, #0
 800462e:	e7e8      	b.n	8004602 <ai_check_custom_types+0x1e>
 8004630:	84048403 	.word	0x84048403

08004634 <ai_layers_init_all>:
 8004634:	2100      	movs	r1, #0
 8004636:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004638:	b13b      	cbz	r3, 800464a <ai_layers_init_all+0x16>
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	3101      	adds	r1, #1
 800463e:	60d8      	str	r0, [r3, #12]
 8004640:	429a      	cmp	r2, r3
 8004642:	4613      	mov	r3, r2
 8004644:	d001      	beq.n	800464a <ai_layers_init_all+0x16>
 8004646:	2a00      	cmp	r2, #0
 8004648:	d1f6      	bne.n	8004638 <ai_layers_init_all+0x4>
 800464a:	4608      	mov	r0, r1
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop

08004650 <ai_layers_post_init_all>:
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	2500      	movs	r5, #0
 8004654:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8004656:	b16c      	cbz	r4, 8004674 <ai_layers_post_init_all+0x24>
 8004658:	6863      	ldr	r3, [r4, #4]
 800465a:	07db      	lsls	r3, r3, #31
 800465c:	d504      	bpl.n	8004668 <ai_layers_post_init_all+0x18>
 800465e:	6a23      	ldr	r3, [r4, #32]
 8004660:	4620      	mov	r0, r4
 8004662:	b10b      	cbz	r3, 8004668 <ai_layers_post_init_all+0x18>
 8004664:	3501      	adds	r5, #1
 8004666:	4798      	blx	r3
 8004668:	6923      	ldr	r3, [r4, #16]
 800466a:	42a3      	cmp	r3, r4
 800466c:	461c      	mov	r4, r3
 800466e:	d001      	beq.n	8004674 <ai_layers_post_init_all+0x24>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <ai_layers_post_init_all+0x6>
 8004674:	4628      	mov	r0, r5
 8004676:	bd38      	pop	{r3, r4, r5, pc}

08004678 <ai_layers_forward_all>:
 8004678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800467c:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8004680:	4604      	mov	r4, r0
 8004682:	f1b8 0f00 	cmp.w	r8, #0
 8004686:	d02a      	beq.n	80046de <ai_layers_forward_all+0x66>
 8004688:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800468a:	63c1      	str	r1, [r0, #60]	@ 0x3c
 800468c:	b319      	cbz	r1, 80046d6 <ai_layers_forward_all+0x5e>
 800468e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004690:	2001      	movs	r0, #1
 8004692:	47c0      	blx	r8
 8004694:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8004696:	b1f6      	cbz	r6, 80046d6 <ai_layers_forward_all+0x5e>
 8004698:	2700      	movs	r7, #0
 800469a:	4631      	mov	r1, r6
 800469c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800469e:	2002      	movs	r0, #2
 80046a0:	47c0      	blx	r8
 80046a2:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80046a4:	4628      	mov	r0, r5
 80046a6:	696b      	ldr	r3, [r5, #20]
 80046a8:	4798      	blx	r3
 80046aa:	692e      	ldr	r6, [r5, #16]
 80046ac:	2003      	movs	r0, #3
 80046ae:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80046b0:	42b5      	cmp	r5, r6
 80046b2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80046b4:	d007      	beq.n	80046c6 <ai_layers_forward_all+0x4e>
 80046b6:	47c0      	blx	r8
 80046b8:	3701      	adds	r7, #1
 80046ba:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80046bc:	2e00      	cmp	r6, #0
 80046be:	d1ec      	bne.n	800469a <ai_layers_forward_all+0x22>
 80046c0:	4638      	mov	r0, r7
 80046c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c6:	2003      	movs	r0, #3
 80046c8:	3701      	adds	r7, #1
 80046ca:	47c0      	blx	r8
 80046cc:	2300      	movs	r3, #0
 80046ce:	4638      	mov	r0, r7
 80046d0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80046d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046d6:	2700      	movs	r7, #0
 80046d8:	4638      	mov	r0, r7
 80046da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046de:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80046e0:	63c5      	str	r5, [r0, #60]	@ 0x3c
 80046e2:	2d00      	cmp	r5, #0
 80046e4:	d0f7      	beq.n	80046d6 <ai_layers_forward_all+0x5e>
 80046e6:	4647      	mov	r7, r8
 80046e8:	696b      	ldr	r3, [r5, #20]
 80046ea:	4628      	mov	r0, r5
 80046ec:	4798      	blx	r3
 80046ee:	462b      	mov	r3, r5
 80046f0:	692d      	ldr	r5, [r5, #16]
 80046f2:	429d      	cmp	r5, r3
 80046f4:	d004      	beq.n	8004700 <ai_layers_forward_all+0x88>
 80046f6:	3701      	adds	r7, #1
 80046f8:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80046fa:	2d00      	cmp	r5, #0
 80046fc:	d1f4      	bne.n	80046e8 <ai_layers_forward_all+0x70>
 80046fe:	e7df      	b.n	80046c0 <ai_layers_forward_all+0x48>
 8004700:	2300      	movs	r3, #0
 8004702:	3701      	adds	r7, #1
 8004704:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8004706:	e7db      	b.n	80046c0 <ai_layers_forward_all+0x48>

08004708 <func_dummy>:
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop

0800470c <forward_conv2d_sssa8_ch_nl_pool>:
 800470c:	6982      	ldr	r2, [r0, #24]
 800470e:	8813      	ldrh	r3, [r2, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8230 	beq.w	8004b76 <forward_conv2d_sssa8_ch_nl_pool+0x46a>
 8004716:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471a:	ed2d 8b06 	vpush	{d8-d10}
 800471e:	6852      	ldr	r2, [r2, #4]
 8004720:	b0d1      	sub	sp, #324	@ 0x144
 8004722:	4681      	mov	r9, r0
 8004724:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8004728:	f1ba 0f00 	cmp.w	sl, #0
 800472c:	d001      	beq.n	8004732 <forward_conv2d_sssa8_ch_nl_pool+0x26>
 800472e:	f8da a000 	ldr.w	sl, [sl]
 8004732:	2b01      	cmp	r3, #1
 8004734:	f000 8276 	beq.w	8004c24 <forward_conv2d_sssa8_ch_nl_pool+0x518>
 8004738:	6911      	ldr	r1, [r2, #16]
 800473a:	911c      	str	r1, [sp, #112]	@ 0x70
 800473c:	b109      	cbz	r1, 8004742 <forward_conv2d_sssa8_ch_nl_pool+0x36>
 800473e:	6809      	ldr	r1, [r1, #0]
 8004740:	911c      	str	r1, [sp, #112]	@ 0x70
 8004742:	2b02      	cmp	r3, #2
 8004744:	f000 8214 	beq.w	8004b70 <forward_conv2d_sssa8_ch_nl_pool+0x464>
 8004748:	69d1      	ldr	r1, [r2, #28]
 800474a:	2900      	cmp	r1, #0
 800474c:	f000 8265 	beq.w	8004c1a <forward_conv2d_sssa8_ch_nl_pool+0x50e>
 8004750:	8b10      	ldrh	r0, [r2, #24]
 8004752:	680c      	ldr	r4, [r1, #0]
 8004754:	2801      	cmp	r0, #1
 8004756:	9415      	str	r4, [sp, #84]	@ 0x54
 8004758:	f200 820f 	bhi.w	8004b7a <forward_conv2d_sssa8_ch_nl_pool+0x46e>
 800475c:	2000      	movs	r0, #0
 800475e:	9018      	str	r0, [sp, #96]	@ 0x60
 8004760:	2b03      	cmp	r3, #3
 8004762:	f000 8262 	beq.w	8004c2a <forward_conv2d_sssa8_ch_nl_pool+0x51e>
 8004766:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8259 	beq.w	8004c20 <forward_conv2d_sssa8_ch_nl_pool+0x514>
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
 8004774:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8004778:	9027      	str	r0, [sp, #156]	@ 0x9c
 800477a:	2a00      	cmp	r2, #0
 800477c:	f000 8247 	beq.w	8004c0e <forward_conv2d_sssa8_ch_nl_pool+0x502>
 8004780:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8004784:	9230      	str	r2, [sp, #192]	@ 0xc0
 8004786:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800478a:	f8da 500c 	ldr.w	r5, [sl, #12]
 800478e:	6852      	ldr	r2, [r2, #4]
 8004790:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8004792:	4616      	mov	r6, r2
 8004794:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8004796:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800479a:	b2b6      	uxth	r6, r6
 800479c:	686c      	ldr	r4, [r5, #4]
 800479e:	68c0      	ldr	r0, [r0, #12]
 80047a0:	9416      	str	r4, [sp, #88]	@ 0x58
 80047a2:	9622      	str	r6, [sp, #136]	@ 0x88
 80047a4:	f8bd 6058 	ldrh.w	r6, [sp, #88]	@ 0x58
 80047a8:	f8d9 303c 	ldr.w	r3, [r9, #60]	@ 0x3c
 80047ac:	ee0a 6a90 	vmov	s21, r6
 80047b0:	68c6      	ldr	r6, [r0, #12]
 80047b2:	6880      	ldr	r0, [r0, #8]
 80047b4:	f8d9 402c 	ldr.w	r4, [r9, #44]	@ 0x2c
 80047b8:	9036      	str	r0, [sp, #216]	@ 0xd8
 80047ba:	921b      	str	r2, [sp, #108]	@ 0x6c
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	f8d9 7058 	ldr.w	r7, [r9, #88]	@ 0x58
 80047c2:	9621      	str	r6, [sp, #132]	@ 0x84
 80047c4:	e9d5 5002 	ldrd	r5, r0, [r5, #8]
 80047c8:	951d      	str	r5, [sp, #116]	@ 0x74
 80047ca:	f8b9 5028 	ldrh.w	r5, [r9, #40]	@ 0x28
 80047ce:	9531      	str	r5, [sp, #196]	@ 0xc4
 80047d0:	b2a5      	uxth	r5, r4
 80047d2:	9532      	str	r5, [sp, #200]	@ 0xc8
 80047d4:	b295      	uxth	r5, r2
 80047d6:	9517      	str	r5, [sp, #92]	@ 0x5c
 80047d8:	889d      	ldrh	r5, [r3, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	9533      	str	r5, [sp, #204]	@ 0xcc
 80047de:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80047e2:	9526      	str	r5, [sp, #152]	@ 0x98
 80047e4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80047e8:	9534      	str	r5, [sp, #208]	@ 0xd0
 80047ea:	f8d9 5044 	ldr.w	r5, [r9, #68]	@ 0x44
 80047ee:	9537      	str	r5, [sp, #220]	@ 0xdc
 80047f0:	f8d9 504c 	ldr.w	r5, [r9, #76]	@ 0x4c
 80047f4:	9538      	str	r5, [sp, #224]	@ 0xe0
 80047f6:	f8d9 5050 	ldr.w	r5, [r9, #80]	@ 0x50
 80047fa:	951a      	str	r5, [sp, #104]	@ 0x68
 80047fc:	683d      	ldr	r5, [r7, #0]
 80047fe:	9528      	str	r5, [sp, #160]	@ 0xa0
 8004800:	687d      	ldr	r5, [r7, #4]
 8004802:	9539      	str	r5, [sp, #228]	@ 0xe4
 8004804:	2900      	cmp	r1, #0
 8004806:	f000 81f5 	beq.w	8004bf4 <forward_conv2d_sssa8_ch_nl_pool+0x4e8>
 800480a:	6889      	ldr	r1, [r1, #8]
 800480c:	2900      	cmp	r1, #0
 800480e:	f000 81f1 	beq.w	8004bf4 <forward_conv2d_sssa8_ch_nl_pool+0x4e8>
 8004812:	698d      	ldr	r5, [r1, #24]
 8004814:	2d00      	cmp	r5, #0
 8004816:	bf08      	it	eq
 8004818:	4629      	moveq	r1, r5
 800481a:	ee09 1a90 	vmov	s19, r1
 800481e:	b292      	uxth	r2, r2
 8004820:	f8db 6018 	ldr.w	r6, [fp, #24]
 8004824:	b2a1      	uxth	r1, r4
 8004826:	f8d8 5018 	ldr.w	r5, [r8, #24]
 800482a:	fa12 f783 	uxtah	r7, r2, r3
 800482e:	1813      	adds	r3, r2, r0
 8004830:	aa41      	add	r2, sp, #260	@ 0x104
 8004832:	9124      	str	r1, [sp, #144]	@ 0x90
 8004834:	4407      	add	r7, r0
 8004836:	931e      	str	r3, [sp, #120]	@ 0x78
 8004838:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800483a:	f10d 0cf4 	add.w	ip, sp, #244	@ 0xf4
 800483e:	924e      	str	r2, [sp, #312]	@ 0x138
 8004840:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004844:	1aff      	subs	r7, r7, r3
 8004846:	ac45      	add	r4, sp, #276	@ 0x114
 8004848:	a849      	add	r0, sp, #292	@ 0x124
 800484a:	f8cd c130 	str.w	ip, [sp, #304]	@ 0x130
 800484e:	fbb7 f3f1 	udiv	r3, r7, r1
 8004852:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8004854:	f240 4101 	movw	r1, #1025	@ 0x401
 8004858:	9314      	str	r3, [sp, #80]	@ 0x50
 800485a:	2300      	movs	r3, #0
 800485c:	69bf      	ldr	r7, [r7, #24]
 800485e:	9349      	str	r3, [sp, #292]	@ 0x124
 8004860:	933d      	str	r3, [sp, #244]	@ 0xf4
 8004862:	9341      	str	r3, [sp, #260]	@ 0x104
 8004864:	9340      	str	r3, [sp, #256]	@ 0x100
 8004866:	9344      	str	r3, [sp, #272]	@ 0x110
 8004868:	934f      	str	r3, [sp, #316]	@ 0x13c
 800486a:	9729      	str	r7, [sp, #164]	@ 0xa4
 800486c:	e9cd 333e 	strd	r3, r3, [sp, #248]	@ 0xf8
 8004870:	e9cd 3342 	strd	r3, r3, [sp, #264]	@ 0x108
 8004874:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8004878:	e9cd 214a 	strd	r2, r1, [sp, #296]	@ 0x128
 800487c:	f240 4102 	movw	r1, #1026	@ 0x402
 8004880:	9323      	str	r3, [sp, #140]	@ 0x8c
 8004882:	f8d9 305c 	ldr.w	r3, [r9, #92]	@ 0x5c
 8004886:	914d      	str	r1, [sp, #308]	@ 0x134
 8004888:	4659      	mov	r1, fp
 800488a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800488c:	f002 febe 	bl	800760c <core_tensor_clone>
 8004890:	4631      	mov	r1, r6
 8004892:	4620      	mov	r0, r4
 8004894:	f002 feec 	bl	8007670 <core_array_clone>
 8004898:	944f      	str	r4, [sp, #316]	@ 0x13c
 800489a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800489e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80048a0:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80048a4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80048a6:	6809      	ldr	r1, [r1, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	f8da 2000 	ldr.w	r2, [sl]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f9bd 40a0 	ldrsh.w	r4, [sp, #160]	@ 0xa0
 80048b4:	932c      	str	r3, [sp, #176]	@ 0xb0
 80048b6:	9125      	str	r1, [sp, #148]	@ 0x94
 80048b8:	f8d8 3000 	ldr.w	r3, [r8]
 80048bc:	2a00      	cmp	r2, #0
 80048be:	f000 8181 	beq.w	8004bc4 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 80048c2:	6851      	ldr	r1, [r2, #4]
 80048c4:	2900      	cmp	r1, #0
 80048c6:	f000 817d 	beq.w	8004bc4 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 80048ca:	8850      	ldrh	r0, [r2, #2]
 80048cc:	2800      	cmp	r0, #0
 80048ce:	f000 8179 	beq.w	8004bc4 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 80048d2:	6809      	ldr	r1, [r1, #0]
 80048d4:	ed91 8a00 	vldr	s16, [r1]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 8170 	beq.w	8004bbe <forward_conv2d_sssa8_ch_nl_pool+0x4b2>
 80048de:	6859      	ldr	r1, [r3, #4]
 80048e0:	2900      	cmp	r1, #0
 80048e2:	f000 816c 	beq.w	8004bbe <forward_conv2d_sssa8_ch_nl_pool+0x4b2>
 80048e6:	8858      	ldrh	r0, [r3, #2]
 80048e8:	2800      	cmp	r0, #0
 80048ea:	f000 8168 	beq.w	8004bbe <forward_conv2d_sssa8_ch_nl_pool+0x4b2>
 80048ee:	6809      	ldr	r1, [r1, #0]
 80048f0:	edd1 8a00 	vldr	s17, [r1]
 80048f4:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80048f6:	f8da 0018 	ldr.w	r0, [sl, #24]
 80048fa:	f8d1 e018 	ldr.w	lr, [r1, #24]
 80048fe:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8004900:	6880      	ldr	r0, [r0, #8]
 8004902:	6989      	ldr	r1, [r1, #24]
 8004904:	9019      	str	r0, [sp, #100]	@ 0x64
 8004906:	6889      	ldr	r1, [r1, #8]
 8004908:	f8de 0008 	ldr.w	r0, [lr, #8]
 800490c:	912f      	str	r1, [sp, #188]	@ 0xbc
 800490e:	f899 1041 	ldrb.w	r1, [r9, #65]	@ 0x41
 8004912:	902e      	str	r0, [sp, #184]	@ 0xb8
 8004914:	912d      	str	r1, [sp, #180]	@ 0xb4
 8004916:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8004918:	b121      	cbz	r1, 8004924 <forward_conv2d_sssa8_ch_nl_pool+0x218>
 800491a:	6849      	ldr	r1, [r1, #4]
 800491c:	9125      	str	r1, [sp, #148]	@ 0x94
 800491e:	b109      	cbz	r1, 8004924 <forward_conv2d_sssa8_ch_nl_pool+0x218>
 8004920:	6809      	ldr	r1, [r1, #0]
 8004922:	9125      	str	r1, [sp, #148]	@ 0x94
 8004924:	2a00      	cmp	r2, #0
 8004926:	f000 8163 	beq.w	8004bf0 <forward_conv2d_sssa8_ch_nl_pool+0x4e4>
 800492a:	6851      	ldr	r1, [r2, #4]
 800492c:	2900      	cmp	r1, #0
 800492e:	f000 816c 	beq.w	8004c0a <forward_conv2d_sssa8_ch_nl_pool+0x4fe>
 8004932:	8852      	ldrh	r2, [r2, #2]
 8004934:	2a00      	cmp	r2, #0
 8004936:	f000 815b 	beq.w	8004bf0 <forward_conv2d_sssa8_ch_nl_pool+0x4e4>
 800493a:	684a      	ldr	r2, [r1, #4]
 800493c:	f992 2000 	ldrsb.w	r2, [r2]
 8004940:	922a      	str	r2, [sp, #168]	@ 0xa8
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8152 	beq.w	8004bec <forward_conv2d_sssa8_ch_nl_pool+0x4e0>
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	2a00      	cmp	r2, #0
 800494c:	f000 8163 	beq.w	8004c16 <forward_conv2d_sssa8_ch_nl_pool+0x50a>
 8004950:	885b      	ldrh	r3, [r3, #2]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 814a 	beq.w	8004bec <forward_conv2d_sssa8_ch_nl_pool+0x4e0>
 8004958:	6853      	ldr	r3, [r2, #4]
 800495a:	f993 3000 	ldrsb.w	r3, [r3]
 800495e:	932b      	str	r3, [sp, #172]	@ 0xac
 8004960:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 811f 	beq.w	8004ba6 <forward_conv2d_sssa8_ch_nl_pool+0x49a>
 8004968:	f8bd 206c 	ldrh.w	r2, [sp, #108]	@ 0x6c
 800496c:	f04f 0a00 	mov.w	sl, #0
 8004970:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8004972:	fb0c f202 	mul.w	r2, ip, r2
 8004976:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 800497a:	9418      	str	r4, [sp, #96]	@ 0x60
 800497c:	ee09 2a10 	vmov	s18, r2
 8004980:	fa1f f28c 	uxth.w	r2, ip
 8004984:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
 8004988:	9220      	str	r2, [sp, #128]	@ 0x80
 800498a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800498c:	fb01 f202 	mul.w	r2, r1, r2
 8004990:	fb03 f202 	mul.w	r2, r3, r2
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	923a      	str	r2, [sp, #232]	@ 0xe8
 800499a:	933b      	str	r3, [sp, #236]	@ 0xec
 800499c:	b28b      	uxth	r3, r1
 800499e:	ee0a 3a10 	vmov	s20, r3
 80049a2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 80049a6:	931d      	str	r3, [sp, #116]	@ 0x74
 80049a8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80049aa:	931f      	str	r3, [sp, #124]	@ 0x7c
 80049ac:	e0be      	b.n	8004b2c <forward_conv2d_sssa8_ch_nl_pool+0x420>
 80049ae:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80049b0:	68aa      	ldr	r2, [r5, #8]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	9215      	str	r2, [sp, #84]	@ 0x54
 80049b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049ba:	f002 fdd1 	bl	8007560 <ai_array_get_byte_size>
 80049be:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80049c0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80049c2:	eef0 0a68 	vmov.f32	s1, s17
 80049c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80049c8:	eeb0 0a48 	vmov.f32	s0, s16
 80049cc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80049ce:	ee1a 1a10 	vmov	r1, s20
 80049d2:	920d      	str	r2, [sp, #52]	@ 0x34
 80049d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049d6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80049d8:	9011      	str	r0, [sp, #68]	@ 0x44
 80049da:	930a      	str	r3, [sp, #40]	@ 0x28
 80049dc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80049de:	9309      	str	r3, [sp, #36]	@ 0x24
 80049e0:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80049e2:	9308      	str	r3, [sp, #32]
 80049e4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80049e6:	9307      	str	r3, [sp, #28]
 80049e8:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80049ea:	9306      	str	r3, [sp, #24]
 80049ec:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 80049ee:	9305      	str	r3, [sp, #20]
 80049f0:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80049f2:	9304      	str	r3, [sp, #16]
 80049f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80049fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8004a00:	2301      	movs	r3, #1
 8004a02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004a04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a06:	930e      	str	r3, [sp, #56]	@ 0x38
 8004a08:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 8004a0c:	9303      	str	r3, [sp, #12]
 8004a0e:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	@ 0xd0
 8004a12:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 8004a14:	9302      	str	r3, [sp, #8]
 8004a16:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8004a18:	b2ba      	uxth	r2, r7
 8004a1a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004a1c:	429c      	cmp	r4, r3
 8004a1e:	bf08      	it	eq
 8004a20:	f1ba 0f00 	cmpeq.w	sl, #0
 8004a24:	bf0c      	ite	eq
 8004a26:	2301      	moveq	r3, #1
 8004a28:	2300      	movne	r3, #0
 8004a2a:	9310      	str	r3, [sp, #64]	@ 0x40
 8004a2c:	ee1a 3a90 	vmov	r3, s21
 8004a30:	f000 fc86 	bl	8005340 <forward_lite_conv2d_sssa8_ch>
 8004a34:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004a36:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	f000 80b0 	beq.w	8004b9e <forward_conv2d_sssa8_ch_nl_pool+0x492>
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	463a      	mov	r2, r7
 8004a42:	429f      	cmp	r7, r3
 8004a44:	931e      	str	r3, [sp, #120]	@ 0x78
 8004a46:	bf28      	it	cs
 8004a48:	461a      	movcs	r2, r3
 8004a4a:	921f      	str	r2, [sp, #124]	@ 0x7c
 8004a4c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f040 8096 	bne.w	8004b80 <forward_conv2d_sssa8_ch_nl_pool+0x474>
 8004a54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004a56:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 8004a58:	4413      	add	r3, r2
 8004a5a:	9319      	str	r3, [sp, #100]	@ 0x64
 8004a5c:	3401      	adds	r4, #1
 8004a5e:	ee19 3a90 	vmov	r3, s19
 8004a62:	ee19 2a10 	vmov	r2, s18
 8004a66:	4641      	mov	r1, r8
 8004a68:	b224      	sxth	r4, r4
 8004a6a:	4658      	mov	r0, fp
 8004a6c:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
 8004a6e:	47b8      	blx	r7
 8004a70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004a72:	429c      	cmp	r4, r3
 8004a74:	db32      	blt.n	8004adc <forward_conv2d_sssa8_ch_nl_pool+0x3d0>
 8004a76:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8004a78:	2201      	movs	r2, #1
 8004a7a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8004a7c:	a849      	add	r0, sp, #292	@ 0x124
 8004a7e:	9308      	str	r3, [sp, #32]
 8004a80:	4492      	add	sl, r2
 8004a82:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8004a86:	9207      	str	r2, [sp, #28]
 8004a88:	1ae4      	subs	r4, r4, r3
 8004a8a:	9305      	str	r3, [sp, #20]
 8004a8c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8004a90:	f8bd 208c 	ldrh.w	r2, [sp, #140]	@ 0x8c
 8004a94:	b224      	sxth	r4, r4
 8004a96:	9303      	str	r3, [sp, #12]
 8004a98:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	@ 0xd8
 8004a9c:	9201      	str	r2, [sp, #4]
 8004a9e:	1a52      	subs	r2, r2, r1
 8004aa0:	9306      	str	r3, [sp, #24]
 8004aa2:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	@ 0xe0
 8004aa6:	b292      	uxth	r2, r2
 8004aa8:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004aaa:	9304      	str	r3, [sp, #16]
 8004aac:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	@ 0xe4
 8004ab0:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 8004ab2:	9302      	str	r3, [sp, #8]
 8004ab4:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	@ 0xdc
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004abc:	47b8      	blx	r7
 8004abe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8004ac0:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	@ 0x68
 8004ac4:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004acc:	b21a      	sxth	r2, r3
 8004ace:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	9218      	str	r2, [sp, #96]	@ 0x60
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	688b      	ldr	r3, [r1, #8]
 8004ad8:	4413      	add	r3, r2
 8004ada:	608b      	str	r3, [r1, #8]
 8004adc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	68ab      	ldr	r3, [r5, #8]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	60ab      	str	r3, [r5, #8]
 8004ae8:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
 8004aec:	b132      	cbz	r2, 8004afc <forward_conv2d_sssa8_ch_nl_pool+0x3f0>
 8004aee:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	68b3      	ldr	r3, [r6, #8]
 8004af6:	4413      	add	r3, r2
 8004af8:	60b3      	str	r3, [r6, #8]
 8004afa:	68ab      	ldr	r3, [r5, #8]
 8004afc:	68ea      	ldr	r2, [r5, #12]
 8004afe:	4640      	mov	r0, r8
 8004b00:	9316      	str	r3, [sp, #88]	@ 0x58
 8004b02:	9215      	str	r2, [sp, #84]	@ 0x54
 8004b04:	f002 fd6c 	bl	80075e0 <get_tensor_byte_size>
 8004b08:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004b0a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004b0c:	4410      	add	r0, r2
 8004b0e:	4283      	cmp	r3, r0
 8004b10:	d306      	bcc.n	8004b20 <forward_conv2d_sssa8_ch_nl_pool+0x414>
 8004b12:	68eb      	ldr	r3, [r5, #12]
 8004b14:	60ab      	str	r3, [r5, #8]
 8004b16:	f8d9 3024 	ldr.w	r3, [r9, #36]	@ 0x24
 8004b1a:	b10b      	cbz	r3, 8004b20 <forward_conv2d_sssa8_ch_nl_pool+0x414>
 8004b1c:	68f3      	ldr	r3, [r6, #12]
 8004b1e:	60b3      	str	r3, [r6, #8]
 8004b20:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004b22:	3b01      	subs	r3, #1
 8004b24:	9314      	str	r3, [sp, #80]	@ 0x50
 8004b26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b28:	459a      	cmp	sl, r3
 8004b2a:	d23c      	bcs.n	8004ba6 <forward_conv2d_sssa8_ch_nl_pool+0x49a>
 8004b2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004b2e:	3301      	adds	r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f73f af3c 	bgt.w	80049ae <forward_conv2d_sssa8_ch_nl_pool+0x2a2>
 8004b36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	da99      	bge.n	8004a70 <forward_conv2d_sssa8_ch_nl_pool+0x364>
 8004b3c:	ee19 3a10 	vmov	r3, s18
 8004b40:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
 8004b44:	fb03 1314 	mls	r3, r3, r4, r1
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d901      	bls.n	8004b50 <forward_conv2d_sssa8_ch_nl_pool+0x444>
 8004b4c:	6870      	ldr	r0, [r6, #4]
 8004b4e:	4403      	add	r3, r0
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d202      	bcs.n	8004b5a <forward_conv2d_sssa8_ch_nl_pool+0x44e>
 8004b54:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8004b56:	42a0      	cmp	r0, r4
 8004b58:	d137      	bne.n	8004bca <forward_conv2d_sssa8_ch_nl_pool+0x4be>
 8004b5a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8004b5c:	b2a4      	uxth	r4, r4
 8004b5e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004b60:	4413      	add	r3, r2
 8004b62:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004b64:	1b1b      	subs	r3, r3, r4
 8004b66:	4414      	add	r4, r2
 8004b68:	b21b      	sxth	r3, r3
 8004b6a:	b224      	sxth	r4, r4
 8004b6c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004b6e:	e77f      	b.n	8004a70 <forward_conv2d_sssa8_ch_nl_pool+0x364>
 8004b70:	2300      	movs	r3, #0
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	deff      	udf	#255	@ 0xff
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	deff      	udf	#255	@ 0xff
 8004b7a:	6848      	ldr	r0, [r1, #4]
 8004b7c:	9018      	str	r0, [sp, #96]	@ 0x60
 8004b7e:	e5ef      	b.n	8004760 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 8004b80:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8004b82:	461a      	mov	r2, r3
 8004b84:	1a5b      	subs	r3, r3, r1
 8004b86:	d505      	bpl.n	8004b94 <forward_conv2d_sssa8_ch_nl_pool+0x488>
 8004b88:	1a8a      	subs	r2, r1, r2
 8004b8a:	983b      	ldr	r0, [sp, #236]	@ 0xec
 8004b8c:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8004b8e:	fb00 1202 	mla	r2, r0, r2, r1
 8004b92:	9219      	str	r2, [sp, #100]	@ 0x64
 8004b94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	9317      	str	r3, [sp, #92]	@ 0x5c
 8004b9c:	e75e      	b.n	8004a5c <forward_conv2d_sssa8_ch_nl_pool+0x350>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e9cd 331e 	strd	r3, r3, [sp, #120]	@ 0x78
 8004ba4:	e752      	b.n	8004a4c <forward_conv2d_sssa8_ch_nl_pool+0x340>
 8004ba6:	68eb      	ldr	r3, [r5, #12]
 8004ba8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8004baa:	60ab      	str	r3, [r5, #8]
 8004bac:	68f3      	ldr	r3, [r6, #12]
 8004bae:	60b3      	str	r3, [r6, #8]
 8004bb0:	68d3      	ldr	r3, [r2, #12]
 8004bb2:	6093      	str	r3, [r2, #8]
 8004bb4:	b051      	add	sp, #324	@ 0x144
 8004bb6:	ecbd 8b06 	vpop	{d8-d10}
 8004bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bbe:	eddf 8a1c 	vldr	s17, [pc, #112]	@ 8004c30 <forward_conv2d_sssa8_ch_nl_pool+0x524>
 8004bc2:	e697      	b.n	80048f4 <forward_conv2d_sssa8_ch_nl_pool+0x1e8>
 8004bc4:	ed9f 8a1a 	vldr	s16, [pc, #104]	@ 8004c30 <forward_conv2d_sssa8_ch_nl_pool+0x524>
 8004bc8:	e686      	b.n	80048d8 <forward_conv2d_sssa8_ch_nl_pool+0x1cc>
 8004bca:	6870      	ldr	r0, [r6, #4]
 8004bcc:	4402      	add	r2, r0
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d2c3      	bcs.n	8004b5a <forward_conv2d_sssa8_ch_nl_pool+0x44e>
 8004bd2:	3901      	subs	r1, #1
 8004bd4:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8004bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bda:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004bde:	68f2      	ldr	r2, [r6, #12]
 8004be0:	6870      	ldr	r0, [r6, #4]
 8004be2:	4402      	add	r2, r0
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d3f6      	bcc.n	8004bd6 <forward_conv2d_sssa8_ch_nl_pool+0x4ca>
 8004be8:	9714      	str	r7, [sp, #80]	@ 0x50
 8004bea:	e7b6      	b.n	8004b5a <forward_conv2d_sssa8_ch_nl_pool+0x44e>
 8004bec:	932b      	str	r3, [sp, #172]	@ 0xac
 8004bee:	e6b7      	b.n	8004960 <forward_conv2d_sssa8_ch_nl_pool+0x254>
 8004bf0:	922a      	str	r2, [sp, #168]	@ 0xa8
 8004bf2:	e6a6      	b.n	8004942 <forward_conv2d_sssa8_ch_nl_pool+0x236>
 8004bf4:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8004bf8:	ee09 1a90 	vmov	s19, r1
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	f43f ae0e 	beq.w	800481e <forward_conv2d_sssa8_ch_nl_pool+0x112>
 8004c02:	6889      	ldr	r1, [r1, #8]
 8004c04:	ee09 1a90 	vmov	s19, r1
 8004c08:	e609      	b.n	800481e <forward_conv2d_sssa8_ch_nl_pool+0x112>
 8004c0a:	912a      	str	r1, [sp, #168]	@ 0xa8
 8004c0c:	e699      	b.n	8004942 <forward_conv2d_sssa8_ch_nl_pool+0x236>
 8004c0e:	4b09      	ldr	r3, [pc, #36]	@ (8004c34 <forward_conv2d_sssa8_ch_nl_pool+0x528>)
 8004c10:	46c3      	mov	fp, r8
 8004c12:	9330      	str	r3, [sp, #192]	@ 0xc0
 8004c14:	e5b7      	b.n	8004786 <forward_conv2d_sssa8_ch_nl_pool+0x7a>
 8004c16:	922b      	str	r2, [sp, #172]	@ 0xac
 8004c18:	e6a2      	b.n	8004960 <forward_conv2d_sssa8_ch_nl_pool+0x254>
 8004c1a:	9115      	str	r1, [sp, #84]	@ 0x54
 8004c1c:	9118      	str	r1, [sp, #96]	@ 0x60
 8004c1e:	e59f      	b.n	8004760 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	deff      	udf	#255	@ 0xff
 8004c24:	2300      	movs	r3, #0
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	deff      	udf	#255	@ 0xff
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	deff      	udf	#255	@ 0xff
 8004c30:	00000000 	.word	0x00000000
 8004c34:	08004709 	.word	0x08004709

08004c38 <forward_dense_integer_SSSA_ch>:
 8004c38:	6983      	ldr	r3, [r0, #24]
 8004c3a:	8818      	ldrh	r0, [r3, #0]
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	f000 80af 	beq.w	8004da0 <forward_dense_integer_SSSA_ch+0x168>
 8004c42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c46:	685c      	ldr	r4, [r3, #4]
 8004c48:	b08f      	sub	sp, #60	@ 0x3c
 8004c4a:	6863      	ldr	r3, [r4, #4]
 8004c4c:	b103      	cbz	r3, 8004c50 <forward_dense_integer_SSSA_ch+0x18>
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2801      	cmp	r0, #1
 8004c52:	f000 813f 	beq.w	8004ed4 <forward_dense_integer_SSSA_ch+0x29c>
 8004c56:	6922      	ldr	r2, [r4, #16]
 8004c58:	b102      	cbz	r2, 8004c5c <forward_dense_integer_SSSA_ch+0x24>
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	2802      	cmp	r0, #2
 8004c5e:	f000 813c 	beq.w	8004eda <forward_dense_integer_SSSA_ch+0x2a2>
 8004c62:	69e5      	ldr	r5, [r4, #28]
 8004c64:	2d00      	cmp	r5, #0
 8004c66:	f000 80eb 	beq.w	8004e40 <forward_dense_integer_SSSA_ch+0x208>
 8004c6a:	8b26      	ldrh	r6, [r4, #24]
 8004c6c:	6829      	ldr	r1, [r5, #0]
 8004c6e:	2e01      	cmp	r6, #1
 8004c70:	f240 8110 	bls.w	8004e94 <forward_dense_integer_SSSA_ch+0x25c>
 8004c74:	686d      	ldr	r5, [r5, #4]
 8004c76:	2803      	cmp	r0, #3
 8004c78:	f000 8132 	beq.w	8004ee0 <forward_dense_integer_SSSA_ch+0x2a8>
 8004c7c:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 8004c80:	69a8      	ldr	r0, [r5, #24]
 8004c82:	f1b8 0f00 	cmp.w	r8, #0
 8004c86:	f000 80f2 	beq.w	8004e6e <forward_dense_integer_SSSA_ch+0x236>
 8004c8a:	6880      	ldr	r0, [r0, #8]
 8004c8c:	68dc      	ldr	r4, [r3, #12]
 8004c8e:	900d      	str	r0, [sp, #52]	@ 0x34
 8004c90:	68d0      	ldr	r0, [r2, #12]
 8004c92:	6866      	ldr	r6, [r4, #4]
 8004c94:	f8d8 8000 	ldr.w	r8, [r8]
 8004c98:	6995      	ldr	r5, [r2, #24]
 8004c9a:	fa1f fa86 	uxth.w	sl, r6
 8004c9e:	9609      	str	r6, [sp, #36]	@ 0x24
 8004ca0:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 8004ca4:	68c0      	ldr	r0, [r0, #12]
 8004ca6:	fa1f fb89 	uxth.w	fp, r9
 8004caa:	fb00 f004 	mul.w	r0, r0, r4
 8004cae:	699c      	ldr	r4, [r3, #24]
 8004cb0:	9008      	str	r0, [sp, #32]
 8004cb2:	f1b8 0f00 	cmp.w	r8, #0
 8004cb6:	d003      	beq.n	8004cc0 <forward_dense_integer_SSSA_ch+0x88>
 8004cb8:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8004cbc:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f8d2 c000 	ldr.w	ip, [r2]
 8004cc6:	6808      	ldr	r0, [r1, #0]
 8004cc8:	698a      	ldr	r2, [r1, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d06a      	beq.n	8004da4 <forward_dense_integer_SSSA_ch+0x16c>
 8004cce:	6859      	ldr	r1, [r3, #4]
 8004cd0:	2900      	cmp	r1, #0
 8004cd2:	f000 8098 	beq.w	8004e06 <forward_dense_integer_SSSA_ch+0x1ce>
 8004cd6:	885e      	ldrh	r6, [r3, #2]
 8004cd8:	2e00      	cmp	r6, #0
 8004cda:	f000 8084 	beq.w	8004de6 <forward_dense_integer_SSSA_ch+0x1ae>
 8004cde:	680f      	ldr	r7, [r1, #0]
 8004ce0:	ed97 0a00 	vldr	s0, [r7]
 8004ce4:	f1bc 0f00 	cmp.w	ip, #0
 8004ce8:	f000 8083 	beq.w	8004df2 <forward_dense_integer_SSSA_ch+0x1ba>
 8004cec:	f8dc e004 	ldr.w	lr, [ip, #4]
 8004cf0:	f1be 0f00 	cmp.w	lr, #0
 8004cf4:	f000 8092 	beq.w	8004e1c <forward_dense_integer_SSSA_ch+0x1e4>
 8004cf8:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8004cfc:	2e00      	cmp	r6, #0
 8004cfe:	d05f      	beq.n	8004dc0 <forward_dense_integer_SSSA_ch+0x188>
 8004d00:	6897      	ldr	r7, [r2, #8]
 8004d02:	f8de 2000 	ldr.w	r2, [lr]
 8004d06:	68ad      	ldr	r5, [r5, #8]
 8004d08:	68a4      	ldr	r4, [r4, #8]
 8004d0a:	edd2 0a00 	vldr	s1, [r2]
 8004d0e:	2900      	cmp	r1, #0
 8004d10:	d060      	beq.n	8004dd4 <forward_dense_integer_SSSA_ch+0x19c>
 8004d12:	885b      	ldrh	r3, [r3, #2]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 808a 	beq.w	8004e2e <forward_dense_integer_SSSA_ch+0x1f6>
 8004d1a:	684b      	ldr	r3, [r1, #4]
 8004d1c:	f993 3000 	ldrsb.w	r3, [r3]
 8004d20:	930c      	str	r3, [sp, #48]	@ 0x30
 8004d22:	f1bc 0f00 	cmp.w	ip, #0
 8004d26:	f000 80d2 	beq.w	8004ece <forward_dense_integer_SSSA_ch+0x296>
 8004d2a:	f1be 0f00 	cmp.w	lr, #0
 8004d2e:	f000 8084 	beq.w	8004e3a <forward_dense_integer_SSSA_ch+0x202>
 8004d32:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8004d36:	2e00      	cmp	r6, #0
 8004d38:	d14f      	bne.n	8004dda <forward_dense_integer_SSSA_ch+0x1a2>
 8004d3a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8004d3c:	b110      	cbz	r0, 8004d44 <forward_dense_integer_SSSA_ch+0x10c>
 8004d3e:	6840      	ldr	r0, [r0, #4]
 8004d40:	b100      	cbz	r0, 8004d44 <forward_dense_integer_SSSA_ch+0x10c>
 8004d42:	6800      	ldr	r0, [r0, #0]
 8004d44:	fa1f f989 	uxth.w	r9, r9
 8004d48:	4642      	mov	r2, r8
 8004d4a:	4659      	mov	r1, fp
 8004d4c:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
 8004d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d52:	f001 f931 	bl	8005fb8 <align_factor_ch>
 8004d56:	9b08      	ldr	r3, [sp, #32]
 8004d58:	b1fb      	cbz	r3, 8004d9a <forward_dense_integer_SSSA_ch+0x162>
 8004d5a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8004d5e:	4652      	mov	r2, sl
 8004d60:	2600      	movs	r6, #0
 8004d62:	468a      	mov	sl, r1
 8004d64:	4639      	mov	r1, r7
 8004d66:	4647      	mov	r7, r8
 8004d68:	4698      	mov	r8, r3
 8004d6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d6c:	3601      	adds	r6, #1
 8004d6e:	4620      	mov	r0, r4
 8004d70:	4454      	add	r4, sl
 8004d72:	9304      	str	r3, [sp, #16]
 8004d74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d76:	9303      	str	r3, [sp, #12]
 8004d78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d7a:	9302      	str	r3, [sp, #8]
 8004d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d7e:	e9cd 5705 	strd	r5, r7, [sp, #20]
 8004d82:	e9cd 7300 	strd	r7, r3, [sp]
 8004d86:	465b      	mov	r3, fp
 8004d88:	444d      	add	r5, r9
 8004d8a:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8004d8e:	f001 fcb9 	bl	8006704 <st_sssa8_ch_fully_connected>
 8004d92:	4546      	cmp	r6, r8
 8004d94:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8004d98:	d1e7      	bne.n	8004d6a <forward_dense_integer_SSSA_ch+0x132>
 8004d9a:	b00f      	add	sp, #60	@ 0x3c
 8004d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da0:	6843      	ldr	r3, [r0, #4]
 8004da2:	deff      	udf	#255	@ 0xff
 8004da4:	f1bc 0f00 	cmp.w	ip, #0
 8004da8:	d052      	beq.n	8004e50 <forward_dense_integer_SSSA_ch+0x218>
 8004daa:	f8dc e004 	ldr.w	lr, [ip, #4]
 8004dae:	f1be 0f00 	cmp.w	lr, #0
 8004db2:	d058      	beq.n	8004e66 <forward_dense_integer_SSSA_ch+0x22e>
 8004db4:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8004db8:	2e00      	cmp	r6, #0
 8004dba:	d16d      	bne.n	8004e98 <forward_dense_integer_SSSA_ch+0x260>
 8004dbc:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 8004ee8 <forward_dense_integer_SSSA_ch+0x2b0>
 8004dc0:	68ad      	ldr	r5, [r5, #8]
 8004dc2:	68a4      	ldr	r4, [r4, #8]
 8004dc4:	6897      	ldr	r7, [r2, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d03d      	beq.n	8004e46 <forward_dense_integer_SSSA_ch+0x20e>
 8004dca:	6859      	ldr	r1, [r3, #4]
 8004dcc:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8004ee8 <forward_dense_integer_SSSA_ch+0x2b0>
 8004dd0:	2900      	cmp	r1, #0
 8004dd2:	d19e      	bne.n	8004d12 <forward_dense_integer_SSSA_ch+0xda>
 8004dd4:	910c      	str	r1, [sp, #48]	@ 0x30
 8004dd6:	2e00      	cmp	r6, #0
 8004dd8:	d0af      	beq.n	8004d3a <forward_dense_integer_SSSA_ch+0x102>
 8004dda:	f8de 3004 	ldr.w	r3, [lr, #4]
 8004dde:	f993 3000 	ldrsb.w	r3, [r3]
 8004de2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004de4:	e7aa      	b.n	8004d3c <forward_dense_integer_SSSA_ch+0x104>
 8004de6:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8004ee8 <forward_dense_integer_SSSA_ch+0x2b0>
 8004dea:	f1bc 0f00 	cmp.w	ip, #0
 8004dee:	f47f af7d 	bne.w	8004cec <forward_dense_integer_SSSA_ch+0xb4>
 8004df2:	68ad      	ldr	r5, [r5, #8]
 8004df4:	68a4      	ldr	r4, [r4, #8]
 8004df6:	6897      	ldr	r7, [r2, #8]
 8004df8:	2e00      	cmp	r6, #0
 8004dfa:	d158      	bne.n	8004eae <forward_dense_integer_SSSA_ch+0x276>
 8004dfc:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8004ee8 <forward_dense_integer_SSSA_ch+0x2b0>
 8004e00:	960c      	str	r6, [sp, #48]	@ 0x30
 8004e02:	960b      	str	r6, [sp, #44]	@ 0x2c
 8004e04:	e79a      	b.n	8004d3c <forward_dense_integer_SSSA_ch+0x104>
 8004e06:	f1bc 0f00 	cmp.w	ip, #0
 8004e0a:	d021      	beq.n	8004e50 <forward_dense_integer_SSSA_ch+0x218>
 8004e0c:	f8dc e004 	ldr.w	lr, [ip, #4]
 8004e10:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8004ee8 <forward_dense_integer_SSSA_ch+0x2b0>
 8004e14:	f1be 0f00 	cmp.w	lr, #0
 8004e18:	f47f af6e 	bne.w	8004cf8 <forward_dense_integer_SSSA_ch+0xc0>
 8004e1c:	68ad      	ldr	r5, [r5, #8]
 8004e1e:	68a4      	ldr	r4, [r4, #8]
 8004e20:	6897      	ldr	r7, [r2, #8]
 8004e22:	b179      	cbz	r1, 8004e44 <forward_dense_integer_SSSA_ch+0x20c>
 8004e24:	885b      	ldrh	r3, [r3, #2]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d14a      	bne.n	8004ec0 <forward_dense_integer_SSSA_ch+0x288>
 8004e2a:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8004ee8 <forward_dense_integer_SSSA_ch+0x2b0>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	930c      	str	r3, [sp, #48]	@ 0x30
 8004e32:	f1be 0f00 	cmp.w	lr, #0
 8004e36:	f47f af7c 	bne.w	8004d32 <forward_dense_integer_SSSA_ch+0xfa>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e3e:	e77d      	b.n	8004d3c <forward_dense_integer_SSSA_ch+0x104>
 8004e40:	4629      	mov	r1, r5
 8004e42:	e718      	b.n	8004c76 <forward_dense_integer_SSSA_ch+0x3e>
 8004e44:	460b      	mov	r3, r1
 8004e46:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8004ee8 <forward_dense_integer_SSSA_ch+0x2b0>
 8004e4a:	930c      	str	r3, [sp, #48]	@ 0x30
 8004e4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e4e:	e775      	b.n	8004d3c <forward_dense_integer_SSSA_ch+0x104>
 8004e50:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8004ee8 <forward_dense_integer_SSSA_ch+0x2b0>
 8004e54:	4663      	mov	r3, ip
 8004e56:	eef0 0a40 	vmov.f32	s1, s0
 8004e5a:	68ad      	ldr	r5, [r5, #8]
 8004e5c:	68a4      	ldr	r4, [r4, #8]
 8004e5e:	6897      	ldr	r7, [r2, #8]
 8004e60:	930c      	str	r3, [sp, #48]	@ 0x30
 8004e62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e64:	e76a      	b.n	8004d3c <forward_dense_integer_SSSA_ch+0x104>
 8004e66:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8004ee8 <forward_dense_integer_SSSA_ch+0x2b0>
 8004e6a:	4673      	mov	r3, lr
 8004e6c:	e7f3      	b.n	8004e56 <forward_dense_integer_SSSA_ch+0x21e>
 8004e6e:	6880      	ldr	r0, [r0, #8]
 8004e70:	68dc      	ldr	r4, [r3, #12]
 8004e72:	900d      	str	r0, [sp, #52]	@ 0x34
 8004e74:	68d0      	ldr	r0, [r2, #12]
 8004e76:	6866      	ldr	r6, [r4, #4]
 8004e78:	6995      	ldr	r5, [r2, #24]
 8004e7a:	fa1f fa86 	uxth.w	sl, r6
 8004e7e:	9609      	str	r6, [sp, #36]	@ 0x24
 8004e80:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 8004e84:	68c0      	ldr	r0, [r0, #12]
 8004e86:	fa1f fb89 	uxth.w	fp, r9
 8004e8a:	fb00 f004 	mul.w	r0, r0, r4
 8004e8e:	699c      	ldr	r4, [r3, #24]
 8004e90:	9008      	str	r0, [sp, #32]
 8004e92:	e715      	b.n	8004cc0 <forward_dense_integer_SSSA_ch+0x88>
 8004e94:	2500      	movs	r5, #0
 8004e96:	e6ee      	b.n	8004c76 <forward_dense_integer_SSSA_ch+0x3e>
 8004e98:	930c      	str	r3, [sp, #48]	@ 0x30
 8004e9a:	f8de 3000 	ldr.w	r3, [lr]
 8004e9e:	68ad      	ldr	r5, [r5, #8]
 8004ea0:	68a4      	ldr	r4, [r4, #8]
 8004ea2:	6897      	ldr	r7, [r2, #8]
 8004ea4:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8004ee8 <forward_dense_integer_SSSA_ch+0x2b0>
 8004ea8:	edd3 0a00 	vldr	s1, [r3]
 8004eac:	e795      	b.n	8004dda <forward_dense_integer_SSSA_ch+0x1a2>
 8004eae:	684b      	ldr	r3, [r1, #4]
 8004eb0:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8004ee8 <forward_dense_integer_SSSA_ch+0x2b0>
 8004eb4:	f993 3000 	ldrsb.w	r3, [r3]
 8004eb8:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8004ebc:	930c      	str	r3, [sp, #48]	@ 0x30
 8004ebe:	e73d      	b.n	8004d3c <forward_dense_integer_SSSA_ch+0x104>
 8004ec0:	684b      	ldr	r3, [r1, #4]
 8004ec2:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8004ee8 <forward_dense_integer_SSSA_ch+0x2b0>
 8004ec6:	f993 3000 	ldrsb.w	r3, [r3]
 8004eca:	930c      	str	r3, [sp, #48]	@ 0x30
 8004ecc:	e7b5      	b.n	8004e3a <forward_dense_integer_SSSA_ch+0x202>
 8004ece:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8004ed2:	e733      	b.n	8004d3c <forward_dense_integer_SSSA_ch+0x104>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	deff      	udf	#255	@ 0xff
 8004eda:	2300      	movs	r3, #0
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	deff      	udf	#255	@ 0xff
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	deff      	udf	#255	@ 0xff
 8004ee6:	bf00      	nop
 8004ee8:	00000000 	.word	0x00000000

08004eec <forward_sm_integer>:
 8004eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef0:	6983      	ldr	r3, [r0, #24]
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	881f      	ldrh	r7, [r3, #0]
 8004ef6:	2f00      	cmp	r7, #0
 8004ef8:	d042      	beq.n	8004f80 <forward_sm_integer+0x94>
 8004efa:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8004efe:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8004f02:	b106      	cbz	r6, 8004f06 <forward_sm_integer+0x1a>
 8004f04:	6836      	ldr	r6, [r6, #0]
 8004f06:	2f01      	cmp	r7, #1
 8004f08:	d043      	beq.n	8004f92 <forward_sm_integer+0xa6>
 8004f0a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d044      	beq.n	8004f9c <forward_sm_integer+0xb0>
 8004f12:	f8d3 e000 	ldr.w	lr, [r3]
 8004f16:	e9d6 1502 	ldrd	r1, r5, [r6, #8]
 8004f1a:	f8de 300c 	ldr.w	r3, [lr, #12]
 8004f1e:	0a09      	lsrs	r1, r1, #8
 8004f20:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8004f24:	686b      	ldr	r3, [r5, #4]
 8004f26:	d032      	beq.n	8004f8e <forward_sm_integer+0xa2>
 8004f28:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004f32:	428d      	cmp	r5, r1
 8004f34:	fb04 f202 	mul.w	r2, r4, r2
 8004f38:	d1f9      	bne.n	8004f2e <forward_sm_integer+0x42>
 8004f3a:	69c1      	ldr	r1, [r0, #28]
 8004f3c:	2f03      	cmp	r7, #3
 8004f3e:	688c      	ldr	r4, [r1, #8]
 8004f40:	d927      	bls.n	8004f92 <forward_sm_integer+0xa6>
 8004f42:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8004f46:	b339      	cbz	r1, 8004f98 <forward_sm_integer+0xac>
 8004f48:	6809      	ldr	r1, [r1, #0]
 8004f4a:	69b0      	ldr	r0, [r6, #24]
 8004f4c:	6989      	ldr	r1, [r1, #24]
 8004f4e:	4e14      	ldr	r6, [pc, #80]	@ (8004fa0 <forward_sm_integer+0xb4>)
 8004f50:	688d      	ldr	r5, [r1, #8]
 8004f52:	6801      	ldr	r1, [r0, #0]
 8004f54:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 8004f58:	42b1      	cmp	r1, r6
 8004f5a:	f8de 6018 	ldr.w	r6, [lr, #24]
 8004f5e:	6881      	ldr	r1, [r0, #8]
 8004f60:	68b0      	ldr	r0, [r6, #8]
 8004f62:	9505      	str	r5, [sp, #20]
 8004f64:	68a5      	ldr	r5, [r4, #8]
 8004f66:	9504      	str	r5, [sp, #16]
 8004f68:	6865      	ldr	r5, [r4, #4]
 8004f6a:	9503      	str	r5, [sp, #12]
 8004f6c:	6824      	ldr	r4, [r4, #0]
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	e9cd c401 	strd	ip, r4, [sp, #4]
 8004f74:	d006      	beq.n	8004f84 <forward_sm_integer+0x98>
 8004f76:	f001 f81d 	bl	8005fb4 <forward_lite_nl_softmax_iu8ou8>
 8004f7a:	b006      	add	sp, #24
 8004f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	deff      	udf	#255	@ 0xff
 8004f84:	f001 f814 	bl	8005fb0 <forward_lite_nl_softmax_is8os8>
 8004f88:	b006      	add	sp, #24
 8004f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f8e:	2201      	movs	r2, #1
 8004f90:	e7d3      	b.n	8004f3a <forward_sm_integer+0x4e>
 8004f92:	2300      	movs	r3, #0
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	deff      	udf	#255	@ 0xff
 8004f98:	698b      	ldr	r3, [r1, #24]
 8004f9a:	deff      	udf	#255	@ 0xff
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	deff      	udf	#255	@ 0xff
 8004fa0:	00840440 	.word	0x00840440

08004fa4 <pool_func_mp_array_integer_INT8>:
 8004fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa8:	b093      	sub	sp, #76	@ 0x4c
 8004faa:	468c      	mov	ip, r1
 8004fac:	469a      	mov	sl, r3
 8004fae:	6804      	ldr	r4, [r0, #0]
 8004fb0:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 8004fb4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8004fb8:	910e      	str	r1, [sp, #56]	@ 0x38
 8004fba:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 8004fbe:	930d      	str	r3, [sp, #52]	@ 0x34
 8004fc0:	910f      	str	r1, [sp, #60]	@ 0x3c
 8004fc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004fc4:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8004fc8:	6980      	ldr	r0, [r0, #24]
 8004fca:	9110      	str	r1, [sp, #64]	@ 0x40
 8004fcc:	f8bd b080 	ldrh.w	fp, [sp, #128]	@ 0x80
 8004fd0:	f8bd 7084 	ldrh.w	r7, [sp, #132]	@ 0x84
 8004fd4:	f8bd e088 	ldrh.w	lr, [sp, #136]	@ 0x88
 8004fd8:	f8bd 808c 	ldrh.w	r8, [sp, #140]	@ 0x8c
 8004fdc:	6999      	ldr	r1, [r3, #24]
 8004fde:	681d      	ldr	r5, [r3, #0]
 8004fe0:	2c00      	cmp	r4, #0
 8004fe2:	d068      	beq.n	80050b6 <pool_func_mp_array_integer_INT8+0x112>
 8004fe4:	6866      	ldr	r6, [r4, #4]
 8004fe6:	2e00      	cmp	r6, #0
 8004fe8:	d04c      	beq.n	8005084 <pool_func_mp_array_integer_INT8+0xe0>
 8004fea:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8004fee:	f1b9 0f00 	cmp.w	r9, #0
 8004ff2:	d07a      	beq.n	80050ea <pool_func_mp_array_integer_INT8+0x146>
 8004ff4:	6833      	ldr	r3, [r6, #0]
 8004ff6:	edd3 7a00 	vldr	s15, [r3]
 8004ffa:	2d00      	cmp	r5, #0
 8004ffc:	d079      	beq.n	80050f2 <pool_func_mp_array_integer_INT8+0x14e>
 8004ffe:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8005002:	f1b9 0f00 	cmp.w	r9, #0
 8005006:	d046      	beq.n	8005096 <pool_func_mp_array_integer_INT8+0xf2>
 8005008:	886b      	ldrh	r3, [r5, #2]
 800500a:	9311      	str	r3, [sp, #68]	@ 0x44
 800500c:	2b00      	cmp	r3, #0
 800500e:	d05f      	beq.n	80050d0 <pool_func_mp_array_integer_INT8+0x12c>
 8005010:	f8d9 3000 	ldr.w	r3, [r9]
 8005014:	6880      	ldr	r0, [r0, #8]
 8005016:	ed93 7a00 	vldr	s14, [r3]
 800501a:	6889      	ldr	r1, [r1, #8]
 800501c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8005020:	2e00      	cmp	r6, #0
 8005022:	d060      	beq.n	80050e6 <pool_func_mp_array_integer_INT8+0x142>
 8005024:	8863      	ldrh	r3, [r4, #2]
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 808c 	beq.w	8005144 <pool_func_mp_array_integer_INT8+0x1a0>
 800502c:	6873      	ldr	r3, [r6, #4]
 800502e:	f993 4000 	ldrsb.w	r4, [r3]
 8005032:	2d00      	cmp	r5, #0
 8005034:	d03d      	beq.n	80050b2 <pool_func_mp_array_integer_INT8+0x10e>
 8005036:	f1b9 0f00 	cmp.w	r9, #0
 800503a:	d03a      	beq.n	80050b2 <pool_func_mp_array_integer_INT8+0x10e>
 800503c:	886b      	ldrh	r3, [r5, #2]
 800503e:	9311      	str	r3, [sp, #68]	@ 0x44
 8005040:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005042:	b11b      	cbz	r3, 800504c <pool_func_mp_array_integer_INT8+0xa8>
 8005044:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005048:	f993 3000 	ldrsb.w	r3, [r3]
 800504c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005054:	da5f      	bge.n	8005116 <pool_func_mp_array_integer_INT8+0x172>
 8005056:	f8cd a000 	str.w	sl, [sp]
 800505a:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
 800505e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005060:	9304      	str	r3, [sp, #16]
 8005062:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005064:	9303      	str	r3, [sp, #12]
 8005066:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005068:	9302      	str	r3, [sp, #8]
 800506a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	4662      	mov	r2, ip
 8005072:	e9cd e807 	strd	lr, r8, [sp, #28]
 8005076:	e9cd b705 	strd	fp, r7, [sp, #20]
 800507a:	f000 feb9 	bl	8005df0 <forward_lite_maxpool_is8os8_scaleneg>
 800507e:	b013      	add	sp, #76	@ 0x4c
 8005080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005084:	2d00      	cmp	r5, #0
 8005086:	d040      	beq.n	800510a <pool_func_mp_array_integer_INT8+0x166>
 8005088:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800508c:	eddf 7a39 	vldr	s15, [pc, #228]	@ 8005174 <pool_func_mp_array_integer_INT8+0x1d0>
 8005090:	f1b9 0f00 	cmp.w	r9, #0
 8005094:	d1b8      	bne.n	8005008 <pool_func_mp_array_integer_INT8+0x64>
 8005096:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8005174 <pool_func_mp_array_integer_INT8+0x1d0>
 800509a:	6880      	ldr	r0, [r0, #8]
 800509c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80050a0:	6889      	ldr	r1, [r1, #8]
 80050a2:	2e00      	cmp	r6, #0
 80050a4:	d063      	beq.n	800516e <pool_func_mp_array_integer_INT8+0x1ca>
 80050a6:	8863      	ldrh	r3, [r4, #2]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d04b      	beq.n	8005144 <pool_func_mp_array_integer_INT8+0x1a0>
 80050ac:	6873      	ldr	r3, [r6, #4]
 80050ae:	f993 4000 	ldrsb.w	r4, [r3]
 80050b2:	2300      	movs	r3, #0
 80050b4:	e7ca      	b.n	800504c <pool_func_mp_array_integer_INT8+0xa8>
 80050b6:	2d00      	cmp	r5, #0
 80050b8:	d046      	beq.n	8005148 <pool_func_mp_array_integer_INT8+0x1a4>
 80050ba:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80050be:	f1b9 0f00 	cmp.w	r9, #0
 80050c2:	d022      	beq.n	800510a <pool_func_mp_array_integer_INT8+0x166>
 80050c4:	886b      	ldrh	r3, [r5, #2]
 80050c6:	9311      	str	r3, [sp, #68]	@ 0x44
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d144      	bne.n	8005156 <pool_func_mp_array_integer_INT8+0x1b2>
 80050cc:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8005174 <pool_func_mp_array_integer_INT8+0x1d0>
 80050d0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005174 <pool_func_mp_array_integer_INT8+0x1d0>
 80050d4:	6880      	ldr	r0, [r0, #8]
 80050d6:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80050da:	6889      	ldr	r1, [r1, #8]
 80050dc:	2c00      	cmp	r4, #0
 80050de:	d0e8      	beq.n	80050b2 <pool_func_mp_array_integer_INT8+0x10e>
 80050e0:	6866      	ldr	r6, [r4, #4]
 80050e2:	2e00      	cmp	r6, #0
 80050e4:	d19e      	bne.n	8005024 <pool_func_mp_array_integer_INT8+0x80>
 80050e6:	4634      	mov	r4, r6
 80050e8:	e7aa      	b.n	8005040 <pool_func_mp_array_integer_INT8+0x9c>
 80050ea:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8005174 <pool_func_mp_array_integer_INT8+0x1d0>
 80050ee:	2d00      	cmp	r5, #0
 80050f0:	d185      	bne.n	8004ffe <pool_func_mp_array_integer_INT8+0x5a>
 80050f2:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8005174 <pool_func_mp_array_integer_INT8+0x1d0>
 80050f6:	6880      	ldr	r0, [r0, #8]
 80050f8:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80050fc:	6889      	ldr	r1, [r1, #8]
 80050fe:	f1b9 0f00 	cmp.w	r9, #0
 8005102:	d12f      	bne.n	8005164 <pool_func_mp_array_integer_INT8+0x1c0>
 8005104:	464c      	mov	r4, r9
 8005106:	464b      	mov	r3, r9
 8005108:	e7a0      	b.n	800504c <pool_func_mp_array_integer_INT8+0xa8>
 800510a:	2400      	movs	r4, #0
 800510c:	6880      	ldr	r0, [r0, #8]
 800510e:	6889      	ldr	r1, [r1, #8]
 8005110:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8005178 <pool_func_mp_array_integer_INT8+0x1d4>
 8005114:	4623      	mov	r3, r4
 8005116:	f8cd a000 	str.w	sl, [sp]
 800511a:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
 800511e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005120:	9304      	str	r3, [sp, #16]
 8005122:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005124:	9303      	str	r3, [sp, #12]
 8005126:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005128:	9302      	str	r3, [sp, #8]
 800512a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	4662      	mov	r2, ip
 8005132:	e9cd e807 	strd	lr, r8, [sp, #28]
 8005136:	e9cd b705 	strd	fp, r7, [sp, #20]
 800513a:	f000 f81f 	bl	800517c <forward_lite_maxpool_is8os8_scalepos>
 800513e:	b013      	add	sp, #76	@ 0x4c
 8005140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005144:	2400      	movs	r4, #0
 8005146:	e776      	b.n	8005036 <pool_func_mp_array_integer_INT8+0x92>
 8005148:	462c      	mov	r4, r5
 800514a:	6880      	ldr	r0, [r0, #8]
 800514c:	6889      	ldr	r1, [r1, #8]
 800514e:	462b      	mov	r3, r5
 8005150:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8005178 <pool_func_mp_array_integer_INT8+0x1d4>
 8005154:	e7df      	b.n	8005116 <pool_func_mp_array_integer_INT8+0x172>
 8005156:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8005174 <pool_func_mp_array_integer_INT8+0x1d0>
 800515a:	6880      	ldr	r0, [r0, #8]
 800515c:	eef0 7a40 	vmov.f32	s15, s0
 8005160:	6889      	ldr	r1, [r1, #8]
 8005162:	e76f      	b.n	8005044 <pool_func_mp_array_integer_INT8+0xa0>
 8005164:	6874      	ldr	r4, [r6, #4]
 8005166:	462b      	mov	r3, r5
 8005168:	f994 4000 	ldrsb.w	r4, [r4]
 800516c:	e76e      	b.n	800504c <pool_func_mp_array_integer_INT8+0xa8>
 800516e:	4634      	mov	r4, r6
 8005170:	4633      	mov	r3, r6
 8005172:	e76b      	b.n	800504c <pool_func_mp_array_integer_INT8+0xa8>
 8005174:	00000000 	.word	0x00000000
 8005178:	7fc00000 	.word	0x7fc00000

0800517c <forward_lite_maxpool_is8os8_scalepos>:
 800517c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005180:	b095      	sub	sp, #84	@ 0x54
 8005182:	4614      	mov	r4, r2
 8005184:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005188:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 800518c:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 8005190:	910d      	str	r1, [sp, #52]	@ 0x34
 8005192:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8005196:	930c      	str	r3, [sp, #48]	@ 0x30
 8005198:	910e      	str	r1, [sp, #56]	@ 0x38
 800519a:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 800519e:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 80051a2:	910f      	str	r1, [sp, #60]	@ 0x3c
 80051a4:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 80051a8:	9206      	str	r2, [sp, #24]
 80051aa:	9110      	str	r1, [sp, #64]	@ 0x40
 80051ac:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 80051b0:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 80051b4:	9111      	str	r1, [sp, #68]	@ 0x44
 80051b6:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 80051ba:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 80051be:	9112      	str	r1, [sp, #72]	@ 0x48
 80051c0:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 80051c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80051c6:	9107      	str	r1, [sp, #28]
 80051c8:	9003      	str	r0, [sp, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8094 	beq.w	80052f8 <forward_lite_maxpool_is8os8_scalepos+0x17c>
 80051d0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80051d4:	eeb4 0a67 	vcmp.f32	s0, s15
 80051d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051dc:	bf0c      	ite	eq
 80051de:	2301      	moveq	r3, #1
 80051e0:	2300      	movne	r3, #0
 80051e2:	4290      	cmp	r0, r2
 80051e4:	bf14      	ite	ne
 80051e6:	2300      	movne	r3, #0
 80051e8:	f003 0301 	andeq.w	r3, r3, #1
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	2900      	cmp	r1, #0
 80051f0:	f000 8082 	beq.w	80052f8 <forward_lite_maxpool_is8os8_scalepos+0x17c>
 80051f4:	f1ba 0f00 	cmp.w	sl, #0
 80051f8:	d07e      	beq.n	80052f8 <forward_lite_maxpool_is8os8_scalepos+0x17c>
 80051fa:	ee07 2a90 	vmov	s15, r2
 80051fe:	2300      	movs	r3, #0
 8005200:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 800533c <forward_lite_maxpool_is8os8_scalepos+0x1c0>
 8005204:	fb04 fb0a 	mul.w	fp, r4, sl
 8005208:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800520c:	9304      	str	r3, [sp, #16]
 800520e:	9b04      	ldr	r3, [sp, #16]
 8005210:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8005214:	9907      	ldr	r1, [sp, #28]
 8005216:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005218:	fb03 f202 	mul.w	r2, r3, r2
 800521c:	fb03 f301 	mul.w	r3, r3, r1
 8005220:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005222:	9308      	str	r3, [sp, #32]
 8005224:	2300      	movs	r3, #0
 8005226:	9305      	str	r3, [sp, #20]
 8005228:	1a53      	subs	r3, r2, r1
 800522a:	1a8a      	subs	r2, r1, r2
 800522c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800522e:	2b00      	cmp	r3, #0
 8005230:	eb02 0c01 	add.w	ip, r2, r1
 8005234:	bfd8      	it	le
 8005236:	4691      	movle	r9, r2
 8005238:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800523a:	bfc8      	it	gt
 800523c:	f04f 0900 	movgt.w	r9, #0
 8005240:	4594      	cmp	ip, r2
 8005242:	444b      	add	r3, r9
 8005244:	bfa8      	it	ge
 8005246:	4694      	movge	ip, r2
 8005248:	9a06      	ldr	r2, [sp, #24]
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005250:	9a05      	ldr	r2, [sp, #20]
 8005252:	f04f 0e00 	mov.w	lr, #0
 8005256:	9908      	ldr	r1, [sp, #32]
 8005258:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800525a:	eb02 0801 	add.w	r8, r2, r1
 800525e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005260:	fb03 f302 	mul.w	r3, r3, r2
 8005264:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005266:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8005268:	fb0a 2808 	mla	r8, sl, r8, r2
 800526c:	1a5a      	subs	r2, r3, r1
 800526e:	1acb      	subs	r3, r1, r3
 8005270:	9906      	ldr	r1, [sp, #24]
 8005272:	2a00      	cmp	r2, #0
 8005274:	bfd8      	it	le
 8005276:	461f      	movle	r7, r3
 8005278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800527a:	bfc8      	it	gt
 800527c:	2700      	movgt	r7, #0
 800527e:	18d3      	adds	r3, r2, r3
 8005280:	1a8a      	subs	r2, r1, r2
 8005282:	4294      	cmp	r4, r2
 8005284:	443b      	add	r3, r7
 8005286:	bfa8      	it	ge
 8005288:	4614      	movge	r4, r2
 800528a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800528c:	fb0a 2303 	mla	r3, sl, r3, r2
 8005290:	9302      	str	r3, [sp, #8]
 8005292:	45e1      	cmp	r9, ip
 8005294:	da4e      	bge.n	8005334 <forward_lite_maxpool_is8os8_scalepos+0x1b8>
 8005296:	9b02      	ldr	r3, [sp, #8]
 8005298:	464d      	mov	r5, r9
 800529a:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800529e:	eb03 060e 	add.w	r6, r3, lr
 80052a2:	42a7      	cmp	r7, r4
 80052a4:	da0a      	bge.n	80052bc <forward_lite_maxpool_is8os8_scalepos+0x140>
 80052a6:	4632      	mov	r2, r6
 80052a8:	463b      	mov	r3, r7
 80052aa:	f992 0000 	ldrsb.w	r0, [r2]
 80052ae:	3301      	adds	r3, #1
 80052b0:	4452      	add	r2, sl
 80052b2:	4281      	cmp	r1, r0
 80052b4:	bfb8      	it	lt
 80052b6:	4601      	movlt	r1, r0
 80052b8:	429c      	cmp	r4, r3
 80052ba:	d1f6      	bne.n	80052aa <forward_lite_maxpool_is8os8_scalepos+0x12e>
 80052bc:	3501      	adds	r5, #1
 80052be:	445e      	add	r6, fp
 80052c0:	45ac      	cmp	ip, r5
 80052c2:	d1ee      	bne.n	80052a2 <forward_lite_maxpool_is8os8_scalepos+0x126>
 80052c4:	9b01      	ldr	r3, [sp, #4]
 80052c6:	b1d3      	cbz	r3, 80052fe <forward_lite_maxpool_is8os8_scalepos+0x182>
 80052c8:	f888 1000 	strb.w	r1, [r8]
 80052cc:	f10e 0e01 	add.w	lr, lr, #1
 80052d0:	f108 0801 	add.w	r8, r8, #1
 80052d4:	fa1f f38e 	uxth.w	r3, lr
 80052d8:	459a      	cmp	sl, r3
 80052da:	d8da      	bhi.n	8005292 <forward_lite_maxpool_is8os8_scalepos+0x116>
 80052dc:	9b05      	ldr	r3, [sp, #20]
 80052de:	9a07      	ldr	r2, [sp, #28]
 80052e0:	3301      	adds	r3, #1
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	429a      	cmp	r2, r3
 80052e6:	9305      	str	r3, [sp, #20]
 80052e8:	d8b2      	bhi.n	8005250 <forward_lite_maxpool_is8os8_scalepos+0xd4>
 80052ea:	9b04      	ldr	r3, [sp, #16]
 80052ec:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80052ee:	3301      	adds	r3, #1
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	429a      	cmp	r2, r3
 80052f4:	9304      	str	r3, [sp, #16]
 80052f6:	d88a      	bhi.n	800520e <forward_lite_maxpool_is8os8_scalepos+0x92>
 80052f8:	b015      	add	sp, #84	@ 0x54
 80052fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fe:	9b03      	ldr	r3, [sp, #12]
 8005300:	eeb0 7a66 	vmov.f32	s14, s13
 8005304:	1ac9      	subs	r1, r1, r3
 8005306:	ee07 1a90 	vmov	s15, r1
 800530a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800530e:	eea7 7a80 	vfma.f32	s14, s15, s0
 8005312:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800531a:	fe65 7a86 	vselge.f32	s15, s11, s12
 800531e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005326:	ee17 3a90 	vmov	r3, s15
 800532a:	f303 0307 	ssat	r3, #8, r3
 800532e:	f888 3000 	strb.w	r3, [r8]
 8005332:	e7cb      	b.n	80052cc <forward_lite_maxpool_is8os8_scalepos+0x150>
 8005334:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8005338:	e7c4      	b.n	80052c4 <forward_lite_maxpool_is8os8_scalepos+0x148>
 800533a:	bf00      	nop
 800533c:	befffffc 	.word	0xbefffffc

08005340 <forward_lite_conv2d_sssa8_ch>:
 8005340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005344:	ed2d 8b06 	vpush	{d8-d10}
 8005348:	b0e3      	sub	sp, #396	@ 0x18c
 800534a:	469a      	mov	sl, r3
 800534c:	4605      	mov	r5, r0
 800534e:	f8bd 3200 	ldrh.w	r3, [sp, #512]	@ 0x200
 8005352:	9215      	str	r2, [sp, #84]	@ 0x54
 8005354:	f8bd 2204 	ldrh.w	r2, [sp, #516]	@ 0x204
 8005358:	9126      	str	r1, [sp, #152]	@ 0x98
 800535a:	9314      	str	r3, [sp, #80]	@ 0x50
 800535c:	f8bd 11cc 	ldrh.w	r1, [sp, #460]	@ 0x1cc
 8005360:	fb03 f302 	mul.w	r3, r3, r2
 8005364:	922f      	str	r2, [sp, #188]	@ 0xbc
 8005366:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 8005368:	ee08 1a90 	vmov	s17, r1
 800536c:	9320      	str	r3, [sp, #128]	@ 0x80
 800536e:	fb01 2303 	mla	r3, r1, r3, r2
 8005372:	f8bd 21d0 	ldrh.w	r2, [sp, #464]	@ 0x1d0
 8005376:	f99d 91ec 	ldrsb.w	r9, [sp, #492]	@ 0x1ec
 800537a:	922c      	str	r2, [sp, #176]	@ 0xb0
 800537c:	4298      	cmp	r0, r3
 800537e:	f8bd 21d4 	ldrh.w	r2, [sp, #468]	@ 0x1d4
 8005382:	f99d 61f0 	ldrsb.w	r6, [sp, #496]	@ 0x1f0
 8005386:	922b      	str	r2, [sp, #172]	@ 0xac
 8005388:	f8bd 21d8 	ldrh.w	r2, [sp, #472]	@ 0x1d8
 800538c:	f8bd 8208 	ldrh.w	r8, [sp, #520]	@ 0x208
 8005390:	9216      	str	r2, [sp, #88]	@ 0x58
 8005392:	f8bd 21dc 	ldrh.w	r2, [sp, #476]	@ 0x1dc
 8005396:	f8dd b20c 	ldr.w	fp, [sp, #524]	@ 0x20c
 800539a:	9230      	str	r2, [sp, #192]	@ 0xc0
 800539c:	f8bd 21e0 	ldrh.w	r2, [sp, #480]	@ 0x1e0
 80053a0:	922d      	str	r2, [sp, #180]	@ 0xb4
 80053a2:	f8bd 21e4 	ldrh.w	r2, [sp, #484]	@ 0x1e4
 80053a6:	9234      	str	r2, [sp, #208]	@ 0xd0
 80053a8:	f89d 21f8 	ldrb.w	r2, [sp, #504]	@ 0x1f8
 80053ac:	9227      	str	r2, [sp, #156]	@ 0x9c
 80053ae:	f0c0 82ef 	bcc.w	8005990 <forward_lite_conv2d_sssa8_ch+0x650>
 80053b2:	2300      	movs	r3, #0
 80053b4:	932e      	str	r3, [sp, #184]	@ 0xb8
 80053b6:	ee18 1a90 	vmov	r1, s17
 80053ba:	9a84      	ldr	r2, [sp, #528]	@ 0x210
 80053bc:	987d      	ldr	r0, [sp, #500]	@ 0x1f4
 80053be:	ebab 0341 	sub.w	r3, fp, r1, lsl #1
 80053c2:	004f      	lsls	r7, r1, #1
 80053c4:	18d4      	adds	r4, r2, r3
 80053c6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80053c8:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80053ca:	3b02      	subs	r3, #2
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	4623      	mov	r3, r4
 80053d0:	bf98      	it	ls
 80053d2:	2200      	movls	r2, #0
 80053d4:	922e      	str	r2, [sp, #184]	@ 0xb8
 80053d6:	9a84      	ldr	r2, [sp, #528]	@ 0x210
 80053d8:	f000 fdee 	bl	8005fb8 <align_factor_ch>
 80053dc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80053de:	07db      	lsls	r3, r3, #31
 80053e0:	d506      	bpl.n	80053f0 <forward_lite_conv2d_sssa8_ch+0xb0>
 80053e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80053e4:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80053e6:	3302      	adds	r3, #2
 80053e8:	3202      	adds	r2, #2
 80053ea:	fb02 f303 	mul.w	r3, r2, r3
 80053ee:	9320      	str	r3, [sp, #128]	@ 0x80
 80053f0:	9b7a      	ldr	r3, [sp, #488]	@ 0x1e8
 80053f2:	ee18 2a90 	vmov	r2, s17
 80053f6:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
 80053f8:	4650      	mov	r0, sl
 80053fa:	9301      	str	r3, [sp, #4]
 80053fc:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 80053fe:	e9cd 9302 	strd	r9, r3, [sp, #8]
 8005402:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8005408:	f001 f8f2 	bl	80065f0 <st_sssa8_ch_convolve_rank1upd>
 800540c:	ee18 2a90 	vmov	r2, s17
 8005410:	9984      	ldr	r1, [sp, #528]	@ 0x210
 8005412:	18bb      	adds	r3, r7, r2
 8005414:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005418:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	@ 0xac
 800541c:	911b      	str	r1, [sp, #108]	@ 0x6c
 800541e:	fb10 f303 	smulbb	r3, r0, r3
 8005422:	fb13 f30a 	smulbb	r3, r3, sl
 8005426:	b29b      	uxth	r3, r3
 8005428:	931f      	str	r3, [sp, #124]	@ 0x7c
 800542a:	ebc2 7342 	rsb	r3, r2, r2, lsl #29
 800542e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8005432:	ee09 3a90 	vmov	s19, r3
 8005436:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800543a:	9325      	str	r3, [sp, #148]	@ 0x94
 800543c:	b1da      	cbz	r2, 8005476 <forward_lite_conv2d_sssa8_ch+0x136>
 800543e:	4622      	mov	r2, r4
 8005440:	1d18      	adds	r0, r3, #4
 8005442:	f04f 0c01 	mov.w	ip, #1
 8005446:	eb04 0e07 	add.w	lr, r4, r7
 800544a:	f932 3b02 	ldrsh.w	r3, [r2], #2
 800544e:	1e59      	subs	r1, r3, #1
 8005450:	fa0c f403 	lsl.w	r4, ip, r3
 8005454:	fa06 f303 	lsl.w	r3, r6, r3
 8005458:	b289      	uxth	r1, r1
 800545a:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 800545e:	2914      	cmp	r1, #20
 8005460:	f200 8262 	bhi.w	8005928 <forward_lite_conv2d_sssa8_ch+0x5e8>
 8005464:	4572      	cmp	r2, lr
 8005466:	f840 3c04 	str.w	r3, [r0, #-4]
 800546a:	f100 0004 	add.w	r0, r0, #4
 800546e:	d1ec      	bne.n	800544a <forward_lite_conv2d_sssa8_ch+0x10a>
 8005470:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 8005472:	eb03 040b 	add.w	r4, r3, fp
 8005476:	1be3      	subs	r3, r4, r7
 8005478:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800547a:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800547c:	aa42      	add	r2, sp, #264	@ 0x108
 800547e:	9324      	str	r3, [sp, #144]	@ 0x90
 8005480:	a84e      	add	r0, sp, #312	@ 0x138
 8005482:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005484:	fb01 f604 	mul.w	r6, r1, r4
 8005488:	914b      	str	r1, [sp, #300]	@ 0x12c
 800548a:	a958      	add	r1, sp, #352	@ 0x160
 800548c:	9344      	str	r3, [sp, #272]	@ 0x110
 800548e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005490:	fb0a f704 	mul.w	r7, sl, r4
 8005494:	944c      	str	r4, [sp, #304]	@ 0x130
 8005496:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005498:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800549a:	9348      	str	r3, [sp, #288]	@ 0x120
 800549c:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800549e:	9347      	str	r3, [sp, #284]	@ 0x11c
 80054a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80054a2:	935a      	str	r3, [sp, #360]	@ 0x168
 80054a4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80054a6:	935b      	str	r3, [sp, #364]	@ 0x16c
 80054a8:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80054aa:	935c      	str	r3, [sp, #368]	@ 0x170
 80054ac:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80054ae:	935d      	str	r3, [sp, #372]	@ 0x174
 80054b0:	ab4a      	add	r3, sp, #296	@ 0x128
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	ab46      	add	r3, sp, #280	@ 0x118
 80054b6:	f000 fff9 	bl	80064ac <ai_padding_opt_init>
 80054ba:	fb0a f306 	mul.w	r3, sl, r6
 80054be:	ee18 2a90 	vmov	r2, s17
 80054c2:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80054c4:	fb02 f403 	mul.w	r4, r2, r3
 80054c8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80054ca:	fb07 f301 	mul.w	r3, r7, r1
 80054ce:	f5b4 6f20 	cmp.w	r4, #2560	@ 0xa00
 80054d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80054d6:	bfa8      	it	ge
 80054d8:	f44f 6420 	movge.w	r4, #2560	@ 0xa00
 80054dc:	f1b8 0f01 	cmp.w	r8, #1
 80054e0:	ee09 3a10 	vmov	s18, r3
 80054e4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80054e6:	f003 0202 	and.w	r2, r3, #2
 80054ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80054ee:	9238      	str	r2, [sp, #224]	@ 0xe0
 80054f0:	9322      	str	r3, [sp, #136]	@ 0x88
 80054f2:	f000 8237 	beq.w	8005964 <forward_lite_conv2d_sssa8_ch+0x624>
 80054f6:	2300      	movs	r3, #0
 80054f8:	9337      	str	r3, [sp, #220]	@ 0xdc
 80054fa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80054fc:	fbb4 f3f3 	udiv	r3, r4, r3
 8005500:	b29b      	uxth	r3, r3
 8005502:	4619      	mov	r1, r3
 8005504:	ee18 3a90 	vmov	r3, s17
 8005508:	4299      	cmp	r1, r3
 800550a:	bf28      	it	cs
 800550c:	4619      	movcs	r1, r3
 800550e:	fbb3 f2f1 	udiv	r2, r3, r1
 8005512:	fb01 3312 	mls	r3, r1, r2, r3
 8005516:	b292      	uxth	r2, r2
 8005518:	9121      	str	r1, [sp, #132]	@ 0x84
 800551a:	b29b      	uxth	r3, r3
 800551c:	9239      	str	r2, [sp, #228]	@ 0xe4
 800551e:	b11b      	cbz	r3, 8005528 <forward_lite_conv2d_sssa8_ch+0x1e8>
 8005520:	4613      	mov	r3, r2
 8005522:	3301      	adds	r3, #1
 8005524:	b29b      	uxth	r3, r3
 8005526:	9339      	str	r3, [sp, #228]	@ 0xe4
 8005528:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800552a:	2b01      	cmp	r3, #1
 800552c:	f000 823d 	beq.w	80059aa <forward_lite_conv2d_sssa8_ch+0x66a>
 8005530:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 8005532:	1e53      	subs	r3, r2, #1
 8005534:	b29b      	uxth	r3, r3
 8005536:	9335      	str	r3, [sp, #212]	@ 0xd4
 8005538:	2a00      	cmp	r2, #0
 800553a:	f000 8137 	beq.w	80057ac <forward_lite_conv2d_sssa8_ch+0x46c>
 800553e:	fb0a f306 	mul.w	r3, sl, r6
 8005542:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005544:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8005546:	fa0f f689 	sxth.w	r6, r9
 800554a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800554e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005550:	ee0a aa10 	vmov	s20, sl
 8005554:	46b1      	mov	r9, r6
 8005556:	9319      	str	r3, [sp, #100]	@ 0x64
 8005558:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800555a:	edcd 8a36 	vstr	s17, [sp, #216]	@ 0xd8
 800555e:	fb03 f302 	mul.w	r3, r3, r2
 8005562:	425b      	negs	r3, r3
 8005564:	1a5b      	subs	r3, r3, r1
 8005566:	fb0a 5303 	mla	r3, sl, r3, r5
 800556a:	9339      	str	r3, [sp, #228]	@ 0xe4
 800556c:	fb0a f302 	mul.w	r3, sl, r2
 8005570:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8005572:	f1a2 0203 	sub.w	r2, r2, #3
 8005576:	9312      	str	r3, [sp, #72]	@ 0x48
 8005578:	fab2 f282 	clz	r2, r2
 800557c:	0952      	lsrs	r2, r2, #5
 800557e:	922a      	str	r2, [sp, #168]	@ 0xa8
 8005580:	f00a 0203 	and.w	r2, sl, #3
 8005584:	9213      	str	r2, [sp, #76]	@ 0x4c
 8005586:	007a      	lsls	r2, r7, #1
 8005588:	921c      	str	r2, [sp, #112]	@ 0x70
 800558a:	ea4f 024a 	mov.w	r2, sl, lsl #1
 800558e:	9231      	str	r2, [sp, #196]	@ 0xc4
 8005590:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 8005592:	fb02 f303 	mul.w	r3, r2, r3
 8005596:	9332      	str	r3, [sp, #200]	@ 0xc8
 8005598:	424b      	negs	r3, r1
 800559a:	9333      	str	r3, [sp, #204]	@ 0xcc
 800559c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800559e:	fb0a f303 	mul.w	r3, sl, r3
 80055a2:	46ba      	mov	sl, r7
 80055a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80055a6:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 80055a8:	b953      	cbnz	r3, 80055c0 <forward_lite_conv2d_sssa8_ch+0x280>
 80055aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f040 81d1 	bne.w	8005954 <forward_lite_conv2d_sssa8_ch+0x614>
 80055b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80055b4:	ee19 1a10 	vmov	r1, s18
 80055b8:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80055ba:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 80055bc:	f000 febc 	bl	8006338 <st_int8_to16_dual_interleaved>
 80055c0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	f000 81ba 	beq.w	800593c <forward_lite_conv2d_sssa8_ch+0x5fc>
 80055c8:	9b7f      	ldr	r3, [sp, #508]	@ 0x1fc
 80055ca:	931e      	str	r3, [sp, #120]	@ 0x78
 80055cc:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 80b5 	beq.w	800573e <forward_lite_conv2d_sssa8_ch+0x3fe>
 80055d4:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80055d6:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 80055d8:	1ad2      	subs	r2, r2, r3
 80055da:	425b      	negs	r3, r3
 80055dc:	9317      	str	r3, [sp, #92]	@ 0x5c
 80055de:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80055e0:	9211      	str	r2, [sp, #68]	@ 0x44
 80055e2:	9323      	str	r3, [sp, #140]	@ 0x8c
 80055e4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80055e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80055e8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80055ea:	9329      	str	r3, [sp, #164]	@ 0xa4
 80055ec:	a84e      	add	r0, sp, #312	@ 0x138
 80055ee:	f000 ffb7 	bl	8006560 <ai_padding_opt_phase1>
 80055f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d074      	beq.n	80056e2 <forward_lite_conv2d_sssa8_ch+0x3a2>
 80055f8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80055fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80055fc:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80055fe:	1a9b      	subs	r3, r3, r2
 8005600:	fb01 f303 	mul.w	r3, r1, r3
 8005604:	931d      	str	r3, [sp, #116]	@ 0x74
 8005606:	e9dd 312c 	ldrd	r3, r1, [sp, #176]	@ 0xb0
 800560a:	1a5f      	subs	r7, r3, r1
 800560c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800560e:	4413      	add	r3, r2
 8005610:	9328      	str	r3, [sp, #160]	@ 0xa0
 8005612:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8005614:	930c      	str	r3, [sp, #48]	@ 0x30
 8005616:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005618:	930f      	str	r3, [sp, #60]	@ 0x3c
 800561a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800561c:	9310      	str	r3, [sp, #64]	@ 0x40
 800561e:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 80d9 	beq.w	80057d8 <forward_lite_conv2d_sssa8_ch+0x498>
 8005626:	3b01      	subs	r3, #1
 8005628:	934e      	str	r3, [sp, #312]	@ 0x138
 800562a:	2301      	movs	r3, #1
 800562c:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 8005630:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005632:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8005634:	4293      	cmp	r3, r2
 8005636:	da40      	bge.n	80056ba <forward_lite_conv2d_sssa8_ch+0x37a>
 8005638:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800563a:	ee08 aa10 	vmov	s16, sl
 800563e:	9d31      	ldr	r5, [sp, #196]	@ 0xc4
 8005640:	ee1a 8a10 	vmov	r8, s20
 8005644:	1afb      	subs	r3, r7, r3
 8005646:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 8005648:	fb05 f303 	mul.w	r3, r5, r3
 800564c:	9318      	str	r3, [sp, #96]	@ 0x60
 800564e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005650:	930d      	str	r3, [sp, #52]	@ 0x34
 8005652:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005654:	930e      	str	r3, [sp, #56]	@ 0x38
 8005656:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005658:	42bc      	cmp	r4, r7
 800565a:	da22      	bge.n	80056a2 <forward_lite_conv2d_sssa8_ch+0x362>
 800565c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800565e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005660:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8005664:	4293      	cmp	r3, r2
 8005666:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800566a:	bf8c      	ite	hi
 800566c:	2300      	movhi	r3, #0
 800566e:	2301      	movls	r3, #1
 8005670:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005672:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 809e 	beq.w	80057b6 <forward_lite_conv2d_sssa8_ch+0x476>
 800567a:	42a6      	cmp	r6, r4
 800567c:	4651      	mov	r1, sl
 800567e:	4642      	mov	r2, r8
 8005680:	4648      	mov	r0, r9
 8005682:	d903      	bls.n	800568c <forward_lite_conv2d_sssa8_ch+0x34c>
 8005684:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 8124 	beq.w	80058d4 <forward_lite_conv2d_sssa8_ch+0x594>
 800568c:	f000 ff82 	bl	8006594 <st_int16_fill>
 8005690:	3401      	adds	r4, #1
 8005692:	44aa      	add	sl, r5
 8005694:	44c3      	add	fp, r8
 8005696:	42bc      	cmp	r4, r7
 8005698:	d1ef      	bne.n	800567a <forward_lite_conv2d_sssa8_ch+0x33a>
 800569a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800569c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800569e:	4413      	add	r3, r2
 80056a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80056a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80056a4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80056a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056a8:	440a      	add	r2, r1
 80056aa:	3301      	adds	r3, #1
 80056ac:	920d      	str	r2, [sp, #52]	@ 0x34
 80056ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80056b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d1cf      	bne.n	8005656 <forward_lite_conv2d_sssa8_ch+0x316>
 80056b6:	ee18 aa10 	vmov	sl, s16
 80056ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80056bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80056be:	4293      	cmp	r3, r2
 80056c0:	f000 80bf 	beq.w	8005842 <forward_lite_conv2d_sssa8_ch+0x502>
 80056c4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80056c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80056c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80056ca:	440a      	add	r2, r1
 80056cc:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80056ce:	3301      	adds	r3, #1
 80056d0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80056d2:	440f      	add	r7, r1
 80056d4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80056d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80056d8:	440a      	add	r2, r1
 80056da:	920c      	str	r2, [sp, #48]	@ 0x30
 80056dc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80056de:	429a      	cmp	r2, r3
 80056e0:	d19d      	bne.n	800561e <forward_lite_conv2d_sssa8_ch+0x2de>
 80056e2:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 80056e4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80056e6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80056e8:	440a      	add	r2, r1
 80056ea:	3301      	adds	r3, #1
 80056ec:	9211      	str	r2, [sp, #68]	@ 0x44
 80056ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80056f0:	9329      	str	r3, [sp, #164]	@ 0xa4
 80056f2:	440a      	add	r2, r1
 80056f4:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 80056f6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80056f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80056fa:	440a      	add	r2, r1
 80056fc:	9223      	str	r2, [sp, #140]	@ 0x8c
 80056fe:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8005700:	429a      	cmp	r2, r3
 8005702:	f47f af73 	bne.w	80055ec <forward_lite_conv2d_sssa8_ch+0x2ac>
 8005706:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8005708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800570a:	4299      	cmp	r1, r3
 800570c:	d017      	beq.n	800573e <forward_lite_conv2d_sssa8_ch+0x3fe>
 800570e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005710:	ee19 2a90 	vmov	r2, s19
 8005714:	ee19 0a10 	vmov	r0, s18
 8005718:	9307      	str	r3, [sp, #28]
 800571a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800571c:	9306      	str	r3, [sp, #24]
 800571e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8005720:	9305      	str	r3, [sp, #20]
 8005722:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 8005724:	9304      	str	r3, [sp, #16]
 8005726:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005728:	9303      	str	r3, [sp, #12]
 800572a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800572c:	9302      	str	r3, [sp, #8]
 800572e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	ee18 3a90 	vmov	r3, s17
 800573a:	f001 fb39 	bl	8006db0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800573e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005740:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8005742:	1a9b      	subs	r3, r3, r2
 8005744:	b299      	uxth	r1, r3
 8005746:	4613      	mov	r3, r2
 8005748:	428a      	cmp	r2, r1
 800574a:	9136      	str	r1, [sp, #216]	@ 0xd8
 800574c:	bf28      	it	cs
 800574e:	460b      	movcs	r3, r1
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80f1 	beq.w	8005938 <forward_lite_conv2d_sssa8_ch+0x5f8>
 8005756:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
 8005758:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800575a:	fb00 1102 	mla	r1, r0, r2, r1
 800575e:	9172      	str	r1, [sp, #456]	@ 0x1c8
 8005760:	ee19 1a90 	vmov	r1, s19
 8005764:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005768:	ee09 1a90 	vmov	s19, r1
 800576c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800576e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8005772:	9124      	str	r1, [sp, #144]	@ 0x90
 8005774:	9984      	ldr	r1, [sp, #528]	@ 0x210
 8005776:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800577a:	9184      	str	r1, [sp, #528]	@ 0x210
 800577c:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800577e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005782:	9125      	str	r1, [sp, #148]	@ 0x94
 8005784:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8005786:	2900      	cmp	r1, #0
 8005788:	f000 80de 	beq.w	8005948 <forward_lite_conv2d_sssa8_ch+0x608>
 800578c:	997f      	ldr	r1, [sp, #508]	@ 0x1fc
 800578e:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005790:	9321      	str	r3, [sp, #132]	@ 0x84
 8005792:	fb00 1202 	mla	r2, r0, r2, r1
 8005796:	927f      	str	r2, [sp, #508]	@ 0x1fc
 8005798:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800579a:	3b01      	subs	r3, #1
 800579c:	b29b      	uxth	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	9335      	str	r3, [sp, #212]	@ 0xd4
 80057a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80057a6:	429a      	cmp	r2, r3
 80057a8:	f47f aefd 	bne.w	80055a6 <forward_lite_conv2d_sssa8_ch+0x266>
 80057ac:	b063      	add	sp, #396	@ 0x18c
 80057ae:	ecbd 8b06 	vpop	{d8-d10}
 80057b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b6:	42a6      	cmp	r6, r4
 80057b8:	4642      	mov	r2, r8
 80057ba:	4651      	mov	r1, sl
 80057bc:	4648      	mov	r0, r9
 80057be:	d903      	bls.n	80057c8 <forward_lite_conv2d_sssa8_ch+0x488>
 80057c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 8082 	beq.w	80058cc <forward_lite_conv2d_sssa8_ch+0x58c>
 80057c8:	f000 fee4 	bl	8006594 <st_int16_fill>
 80057cc:	3401      	adds	r4, #1
 80057ce:	44aa      	add	sl, r5
 80057d0:	44c3      	add	fp, r8
 80057d2:	42bc      	cmp	r4, r7
 80057d4:	d1ef      	bne.n	80057b6 <forward_lite_conv2d_sssa8_ch+0x476>
 80057d6:	e760      	b.n	800569a <forward_lite_conv2d_sssa8_ch+0x35a>
 80057d8:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 80057da:	b933      	cbnz	r3, 80057ea <forward_lite_conv2d_sssa8_ch+0x4aa>
 80057dc:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 80057de:	3b01      	subs	r3, #1
 80057e0:	9350      	str	r3, [sp, #320]	@ 0x140
 80057e2:	2301      	movs	r3, #1
 80057e4:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 80057e8:	e722      	b.n	8005630 <forward_lite_conv2d_sssa8_ch+0x2f0>
 80057ea:	3b01      	subs	r3, #1
 80057ec:	934f      	str	r3, [sp, #316]	@ 0x13c
 80057ee:	f8bd 315c 	ldrh.w	r3, [sp, #348]	@ 0x15c
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 80057f8:	f43f af1a 	beq.w	8005630 <forward_lite_conv2d_sssa8_ch+0x2f0>
 80057fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80057fe:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d148      	bne.n	8005896 <forward_lite_conv2d_sssa8_ch+0x556>
 8005804:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005806:	429c      	cmp	r4, r3
 8005808:	f6bf af57 	bge.w	80056ba <forward_lite_conv2d_sssa8_ch+0x37a>
 800580c:	970b      	str	r7, [sp, #44]	@ 0x2c
 800580e:	4698      	mov	r8, r3
 8005810:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8005812:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8005814:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 8005818:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800581a:	3401      	adds	r4, #1
 800581c:	4629      	mov	r1, r5
 800581e:	4630      	mov	r0, r6
 8005820:	4652      	mov	r2, sl
 8005822:	f000 fc5b 	bl	80060dc <st_int8_to16_no_shift_interleaved>
 8005826:	4544      	cmp	r4, r8
 8005828:	445d      	add	r5, fp
 800582a:	443e      	add	r6, r7
 800582c:	d1f5      	bne.n	800581a <forward_lite_conv2d_sssa8_ch+0x4da>
 800582e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005830:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	@ 0x28
 8005834:	4413      	add	r3, r2
 8005836:	930a      	str	r3, [sp, #40]	@ 0x28
 8005838:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800583a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800583c:	4293      	cmp	r3, r2
 800583e:	f47f af41 	bne.w	80056c4 <forward_lite_conv2d_sssa8_ch+0x384>
 8005842:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d149      	bne.n	80058dc <forward_lite_conv2d_sssa8_ch+0x59c>
 8005848:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d046      	beq.n	80058dc <forward_lite_conv2d_sssa8_ch+0x59c>
 800584e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005850:	ee19 2a90 	vmov	r2, s19
 8005854:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8005856:	ee19 0a10 	vmov	r0, s18
 800585a:	9308      	str	r3, [sp, #32]
 800585c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800585e:	9307      	str	r3, [sp, #28]
 8005860:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8005862:	9306      	str	r3, [sp, #24]
 8005864:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 8005866:	9305      	str	r3, [sp, #20]
 8005868:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800586a:	9304      	str	r3, [sp, #16]
 800586c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800586e:	9303      	str	r3, [sp, #12]
 8005870:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005872:	9302      	str	r3, [sp, #8]
 8005874:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	2302      	movs	r3, #2
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	ee18 3a90 	vmov	r3, s17
 8005880:	f001 fc60 	bl	8007144 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8005884:	901e      	str	r0, [sp, #120]	@ 0x78
 8005886:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005888:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800588a:	3b01      	subs	r3, #1
 800588c:	4293      	cmp	r3, r2
 800588e:	d045      	beq.n	800591c <forward_lite_conv2d_sssa8_ch+0x5dc>
 8005890:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8005892:	930a      	str	r3, [sp, #40]	@ 0x28
 8005894:	e716      	b.n	80056c4 <forward_lite_conv2d_sssa8_ch+0x384>
 8005896:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005898:	429c      	cmp	r4, r3
 800589a:	f6bf af0e 	bge.w	80056ba <forward_lite_conv2d_sssa8_ch+0x37a>
 800589e:	970b      	str	r7, [sp, #44]	@ 0x2c
 80058a0:	4698      	mov	r8, r3
 80058a2:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80058a4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80058a6:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 80058aa:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80058ac:	3401      	adds	r4, #1
 80058ae:	4629      	mov	r1, r5
 80058b0:	4630      	mov	r0, r6
 80058b2:	4652      	mov	r2, sl
 80058b4:	f000 fbb0 	bl	8006018 <st_int8_to16_no_shift>
 80058b8:	4544      	cmp	r4, r8
 80058ba:	445d      	add	r5, fp
 80058bc:	443e      	add	r6, r7
 80058be:	d1f5      	bne.n	80058ac <forward_lite_conv2d_sssa8_ch+0x56c>
 80058c0:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80058c2:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	@ 0x28
 80058c6:	4413      	add	r3, r2
 80058c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80058ca:	e7b5      	b.n	8005838 <forward_lite_conv2d_sssa8_ch+0x4f8>
 80058cc:	4658      	mov	r0, fp
 80058ce:	f000 fc05 	bl	80060dc <st_int8_to16_no_shift_interleaved>
 80058d2:	e77b      	b.n	80057cc <forward_lite_conv2d_sssa8_ch+0x48c>
 80058d4:	4658      	mov	r0, fp
 80058d6:	f000 fb9f 	bl	8006018 <st_int8_to16_no_shift>
 80058da:	e6d9      	b.n	8005690 <forward_lite_conv2d_sssa8_ch+0x350>
 80058dc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80058de:	ee19 2a90 	vmov	r2, s19
 80058e2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80058e4:	ee19 0a10 	vmov	r0, s18
 80058e8:	9308      	str	r3, [sp, #32]
 80058ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80058ec:	9307      	str	r3, [sp, #28]
 80058ee:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80058f0:	9306      	str	r3, [sp, #24]
 80058f2:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 80058f4:	9305      	str	r3, [sp, #20]
 80058f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80058f8:	9304      	str	r3, [sp, #16]
 80058fa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80058fc:	9303      	str	r3, [sp, #12]
 80058fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005900:	9302      	str	r3, [sp, #8]
 8005902:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	2300      	movs	r3, #0
 8005908:	9301      	str	r3, [sp, #4]
 800590a:	ee18 3a90 	vmov	r3, s17
 800590e:	f001 fc19 	bl	8007144 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8005912:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8005914:	901e      	str	r0, [sp, #120]	@ 0x78
 8005916:	2b03      	cmp	r3, #3
 8005918:	d1ba      	bne.n	8005890 <forward_lite_conv2d_sssa8_ch+0x550>
 800591a:	e7b4      	b.n	8005886 <forward_lite_conv2d_sssa8_ch+0x546>
 800591c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800591e:	3302      	adds	r3, #2
 8005920:	931e      	str	r3, [sp, #120]	@ 0x78
 8005922:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8005924:	930a      	str	r3, [sp, #40]	@ 0x28
 8005926:	e6cd      	b.n	80056c4 <forward_lite_conv2d_sssa8_ch+0x384>
 8005928:	4572      	cmp	r2, lr
 800592a:	f840 6c04 	str.w	r6, [r0, #-4]
 800592e:	f100 0004 	add.w	r0, r0, #4
 8005932:	f47f ad8a 	bne.w	800544a <forward_lite_conv2d_sssa8_ch+0x10a>
 8005936:	e59b      	b.n	8005470 <forward_lite_conv2d_sssa8_ch+0x130>
 8005938:	9321      	str	r3, [sp, #132]	@ 0x84
 800593a:	e72d      	b.n	8005798 <forward_lite_conv2d_sssa8_ch+0x458>
 800593c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800593e:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 8005940:	3303      	adds	r3, #3
 8005942:	18d3      	adds	r3, r2, r3
 8005944:	931e      	str	r3, [sp, #120]	@ 0x78
 8005946:	e641      	b.n	80055cc <forward_lite_conv2d_sssa8_ch+0x28c>
 8005948:	4611      	mov	r1, r2
 800594a:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 800594c:	9321      	str	r3, [sp, #132]	@ 0x84
 800594e:	440a      	add	r2, r1
 8005950:	927f      	str	r2, [sp, #508]	@ 0x1fc
 8005952:	e721      	b.n	8005798 <forward_lite_conv2d_sssa8_ch+0x458>
 8005954:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005956:	ee19 1a10 	vmov	r1, s18
 800595a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800595c:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 800595e:	f000 fc01 	bl	8006164 <st_int8_to16_dual>
 8005962:	e62d      	b.n	80055c0 <forward_lite_conv2d_sssa8_ch+0x280>
 8005964:	ee18 1a90 	vmov	r1, s17
 8005968:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800596a:	fb02 f301 	mul.w	r3, r2, r1
 800596e:	42a3      	cmp	r3, r4
 8005970:	f73f adc1 	bgt.w	80054f6 <forward_lite_conv2d_sssa8_ch+0x1b6>
 8005974:	f01a 0f03 	tst.w	sl, #3
 8005978:	f8cd 80dc 	str.w	r8, [sp, #220]	@ 0xdc
 800597c:	f040 822e 	bne.w	8005ddc <forward_lite_conv2d_sssa8_ch+0xa9c>
 8005980:	ee18 3a90 	vmov	r3, s17
 8005984:	ee19 1a10 	vmov	r1, s18
 8005988:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 800598a:	f000 fcd5 	bl	8006338 <st_int8_to16_dual_interleaved>
 800598e:	e5b4      	b.n	80054fa <forward_lite_conv2d_sssa8_ch+0x1ba>
 8005990:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005992:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005994:	fb02 f303 	mul.w	r3, r2, r3
 8005998:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 800599a:	fb0a 0303 	mla	r3, sl, r3, r0
 800599e:	429a      	cmp	r2, r3
 80059a0:	bf2c      	ite	cs
 80059a2:	2300      	movcs	r3, #0
 80059a4:	2301      	movcc	r3, #1
 80059a6:	932e      	str	r3, [sp, #184]	@ 0xb8
 80059a8:	e505      	b.n	80053b6 <forward_lite_conv2d_sssa8_ch+0x76>
 80059aa:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f43f aefd 	beq.w	80057ac <forward_lite_conv2d_sssa8_ch+0x46c>
 80059b2:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80059b4:	fb0a f306 	mul.w	r3, sl, r6
 80059b8:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80059ba:	fa0f f989 	sxth.w	r9, r9
 80059be:	9238      	str	r2, [sp, #224]	@ 0xe0
 80059c0:	ee0a aa90 	vmov	s21, sl
 80059c4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80059c6:	fb01 f40a 	mul.w	r4, r1, sl
 80059ca:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 80059cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80059d0:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 80059d2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80059d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80059d6:	fb01 f302 	mul.w	r3, r1, r2
 80059da:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80059dc:	425b      	negs	r3, r3
 80059de:	1a1b      	subs	r3, r3, r0
 80059e0:	fb0a 5303 	mla	r3, sl, r3, r5
 80059e4:	9d7f      	ldr	r5, [sp, #508]	@ 0x1fc
 80059e6:	9335      	str	r3, [sp, #212]	@ 0xd4
 80059e8:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80059ea:	953c      	str	r5, [sp, #240]	@ 0xf0
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	9341      	str	r3, [sp, #260]	@ 0x104
 80059f2:	1ccb      	adds	r3, r1, #3
 80059f4:	18eb      	adds	r3, r5, r3
 80059f6:	933b      	str	r3, [sp, #236]	@ 0xec
 80059f8:	f00a 0303 	and.w	r3, sl, #3
 80059fc:	9312      	str	r3, [sp, #72]	@ 0x48
 80059fe:	007b      	lsls	r3, r7, #1
 8005a00:	931c      	str	r3, [sp, #112]	@ 0x70
 8005a02:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8005a06:	9334      	str	r3, [sp, #208]	@ 0xd0
 8005a08:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8005a0a:	1a9b      	subs	r3, r3, r2
 8005a0c:	9310      	str	r3, [sp, #64]	@ 0x40
 8005a0e:	4253      	negs	r3, r2
 8005a10:	9318      	str	r3, [sp, #96]	@ 0x60
 8005a12:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8005a14:	fb03 f304 	mul.w	r3, r3, r4
 8005a18:	933e      	str	r3, [sp, #248]	@ 0xf8
 8005a1a:	4243      	negs	r3, r0
 8005a1c:	a84e      	add	r0, sp, #312	@ 0x138
 8005a1e:	933a      	str	r3, [sp, #232]	@ 0xe8
 8005a20:	1c8b      	adds	r3, r1, #2
 8005a22:	9340      	str	r3, [sp, #256]	@ 0x100
 8005a24:	ee18 3a90 	vmov	r3, s17
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	933f      	str	r3, [sp, #252]	@ 0xfc
 8005a2e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005a30:	fb03 f30a 	mul.w	r3, r3, sl
 8005a34:	46ca      	mov	sl, r9
 8005a36:	9319      	str	r3, [sp, #100]	@ 0x64
 8005a38:	f000 fd92 	bl	8006560 <ai_padding_opt_phase1>
 8005a3c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8005a3e:	2b03      	cmp	r3, #3
 8005a40:	f000 81b6 	beq.w	8005db0 <forward_lite_conv2d_sssa8_ch+0xa70>
 8005a44:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8005a46:	9328      	str	r3, [sp, #160]	@ 0xa0
 8005a48:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8005a4a:	933d      	str	r3, [sp, #244]	@ 0xf4
 8005a4c:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8005a4e:	b953      	cbnz	r3, 8005a66 <forward_lite_conv2d_sssa8_ch+0x726>
 8005a50:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f040 81ba 	bne.w	8005dcc <forward_lite_conv2d_sssa8_ch+0xa8c>
 8005a58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a5a:	ee19 1a10 	vmov	r1, s18
 8005a5e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8005a60:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 8005a62:	f000 fc69 	bl	8006338 <st_int8_to16_dual_interleaved>
 8005a66:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 817f 	beq.w	8005d6c <forward_lite_conv2d_sssa8_ch+0xa2c>
 8005a6e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8005a70:	eeb0 aa69 	vmov.f32	s20, s19
 8005a74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a76:	46b8      	mov	r8, r7
 8005a78:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8005a7a:	1a9b      	subs	r3, r3, r2
 8005a7c:	edcd 8a32 	vstr	s17, [sp, #200]	@ 0xc8
 8005a80:	fb01 f303 	mul.w	r3, r1, r3
 8005a84:	931d      	str	r3, [sp, #116]	@ 0x74
 8005a86:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8005a88:	18d3      	adds	r3, r2, r3
 8005a8a:	9333      	str	r3, [sp, #204]	@ 0xcc
 8005a8c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005a8e:	9331      	str	r3, [sp, #196]	@ 0xc4
 8005a90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a92:	9323      	str	r3, [sp, #140]	@ 0x8c
 8005a94:	9b72      	ldr	r3, [sp, #456]	@ 0x1c8
 8005a96:	9336      	str	r3, [sp, #216]	@ 0xd8
 8005a98:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8005a9a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8005a9c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005a9e:	932e      	str	r3, [sp, #184]	@ 0xb8
 8005aa0:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 8005aa2:	932a      	str	r3, [sp, #168]	@ 0xa8
 8005aa4:	9a52      	ldr	r2, [sp, #328]	@ 0x148
 8005aa6:	9b51      	ldr	r3, [sp, #324]	@ 0x144
 8005aa8:	924f      	str	r2, [sp, #316]	@ 0x13c
 8005aaa:	9a53      	ldr	r2, [sp, #332]	@ 0x14c
 8005aac:	934e      	str	r3, [sp, #312]	@ 0x138
 8005aae:	9250      	str	r2, [sp, #320]	@ 0x140
 8005ab0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005ab2:	2a00      	cmp	r2, #0
 8005ab4:	f000 8120 	beq.w	8005cf8 <forward_lite_conv2d_sssa8_ch+0x9b8>
 8005ab8:	e9dd 212c 	ldrd	r2, r1, [sp, #176]	@ 0xb0
 8005abc:	1a57      	subs	r7, r2, r1
 8005abe:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 8005ac0:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ac2:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8005ac4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005ac6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8005ac8:	921e      	str	r2, [sp, #120]	@ 0x78
 8005aca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005acc:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005ace:	2200      	movs	r2, #0
 8005ad0:	9211      	str	r2, [sp, #68]	@ 0x44
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d05f      	beq.n	8005b96 <forward_lite_conv2d_sssa8_ch+0x856>
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	934e      	str	r3, [sp, #312]	@ 0x138
 8005ada:	2301      	movs	r3, #1
 8005adc:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 8005ae0:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8005ae2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	dd3f      	ble.n	8005b68 <forward_lite_conv2d_sssa8_ch+0x828>
 8005ae8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005aea:	ee08 8a10 	vmov	s16, r8
 8005aee:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 8005af0:	ee1a 9a90 	vmov	r9, s21
 8005af4:	1afb      	subs	r3, r7, r3
 8005af6:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 8005af8:	fb05 f303 	mul.w	r3, r5, r3
 8005afc:	9317      	str	r3, [sp, #92]	@ 0x5c
 8005afe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b00:	930d      	str	r3, [sp, #52]	@ 0x34
 8005b02:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8005b04:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b06:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005b08:	42bc      	cmp	r4, r7
 8005b0a:	da21      	bge.n	8005b50 <forward_lite_conv2d_sssa8_ch+0x810>
 8005b0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b0e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005b10:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8005b14:	4293      	cmp	r3, r2
 8005b16:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 8005b1a:	bf34      	ite	cc
 8005b1c:	2300      	movcc	r3, #0
 8005b1e:	2301      	movcs	r3, #1
 8005b20:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d03f      	beq.n	8005ba8 <forward_lite_conv2d_sssa8_ch+0x868>
 8005b28:	42b4      	cmp	r4, r6
 8005b2a:	4641      	mov	r1, r8
 8005b2c:	464a      	mov	r2, r9
 8005b2e:	4650      	mov	r0, sl
 8005b30:	d203      	bcs.n	8005b3a <forward_lite_conv2d_sssa8_ch+0x7fa>
 8005b32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 80bf 	beq.w	8005cb8 <forward_lite_conv2d_sssa8_ch+0x978>
 8005b3a:	f000 fd2b 	bl	8006594 <st_int16_fill>
 8005b3e:	3401      	adds	r4, #1
 8005b40:	44a8      	add	r8, r5
 8005b42:	44cb      	add	fp, r9
 8005b44:	42a7      	cmp	r7, r4
 8005b46:	d1ef      	bne.n	8005b28 <forward_lite_conv2d_sssa8_ch+0x7e8>
 8005b48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b4a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005b4c:	4413      	add	r3, r2
 8005b4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005b52:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005b54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b56:	440a      	add	r2, r1
 8005b58:	3301      	adds	r3, #1
 8005b5a:	920d      	str	r2, [sp, #52]	@ 0x34
 8005b5c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005b5e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d1d0      	bne.n	8005b06 <forward_lite_conv2d_sssa8_ch+0x7c6>
 8005b64:	ee18 8a10 	vmov	r8, s16
 8005b68:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005b6a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d055      	beq.n	8005c1c <forward_lite_conv2d_sssa8_ch+0x8dc>
 8005b70:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005b72:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8005b74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005b76:	440a      	add	r2, r1
 8005b78:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005b7e:	440f      	add	r7, r1
 8005b80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005b82:	9311      	str	r3, [sp, #68]	@ 0x44
 8005b84:	440a      	add	r2, r1
 8005b86:	920c      	str	r2, [sp, #48]	@ 0x30
 8005b88:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	f000 8098 	beq.w	8005cc0 <forward_lite_conv2d_sssa8_ch+0x980>
 8005b90:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d19f      	bne.n	8005ad6 <forward_lite_conv2d_sssa8_ch+0x796>
 8005b96:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 8005b98:	b9b3      	cbnz	r3, 8005bc8 <forward_lite_conv2d_sssa8_ch+0x888>
 8005b9a:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	9350      	str	r3, [sp, #320]	@ 0x140
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 8005ba6:	e79b      	b.n	8005ae0 <forward_lite_conv2d_sssa8_ch+0x7a0>
 8005ba8:	42b4      	cmp	r4, r6
 8005baa:	464a      	mov	r2, r9
 8005bac:	4641      	mov	r1, r8
 8005bae:	4650      	mov	r0, sl
 8005bb0:	d202      	bcs.n	8005bb8 <forward_lite_conv2d_sssa8_ch+0x878>
 8005bb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d07b      	beq.n	8005cb0 <forward_lite_conv2d_sssa8_ch+0x970>
 8005bb8:	f000 fcec 	bl	8006594 <st_int16_fill>
 8005bbc:	3401      	adds	r4, #1
 8005bbe:	44a8      	add	r8, r5
 8005bc0:	44cb      	add	fp, r9
 8005bc2:	42bc      	cmp	r4, r7
 8005bc4:	d1f0      	bne.n	8005ba8 <forward_lite_conv2d_sssa8_ch+0x868>
 8005bc6:	e7bf      	b.n	8005b48 <forward_lite_conv2d_sssa8_ch+0x808>
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	934f      	str	r3, [sp, #316]	@ 0x13c
 8005bcc:	f8bd 315c 	ldrh.w	r3, [sp, #348]	@ 0x15c
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 8005bd6:	d083      	beq.n	8005ae0 <forward_lite_conv2d_sssa8_ch+0x7a0>
 8005bd8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005bda:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d14b      	bne.n	8005c78 <forward_lite_conv2d_sssa8_ch+0x938>
 8005be0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005be2:	429c      	cmp	r4, r3
 8005be4:	dac0      	bge.n	8005b68 <forward_lite_conv2d_sssa8_ch+0x828>
 8005be6:	970a      	str	r7, [sp, #40]	@ 0x28
 8005be8:	461f      	mov	r7, r3
 8005bea:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8005bec:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005bee:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
 8005bf2:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 8005bf6:	3401      	adds	r4, #1
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	4642      	mov	r2, r8
 8005bfe:	f000 fa6d 	bl	80060dc <st_int8_to16_no_shift_interleaved>
 8005c02:	42bc      	cmp	r4, r7
 8005c04:	444d      	add	r5, r9
 8005c06:	445e      	add	r6, fp
 8005c08:	d1f5      	bne.n	8005bf6 <forward_lite_conv2d_sssa8_ch+0x8b6>
 8005c0a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005c0c:	e9dd 730a 	ldrd	r7, r3, [sp, #40]	@ 0x28
 8005c10:	4413      	add	r3, r2
 8005c12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c14:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005c16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d1a9      	bne.n	8005b70 <forward_lite_conv2d_sssa8_ch+0x830>
 8005c1c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005c1e:	ee19 0a10 	vmov	r0, s18
 8005c22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c24:	9308      	str	r3, [sp, #32]
 8005c26:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005c28:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8005c2a:	9307      	str	r3, [sp, #28]
 8005c2c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8005c2e:	3401      	adds	r4, #1
 8005c30:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8005c32:	9306      	str	r3, [sp, #24]
 8005c34:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8005c36:	9411      	str	r4, [sp, #68]	@ 0x44
 8005c38:	9305      	str	r3, [sp, #20]
 8005c3a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8005c3c:	9304      	str	r3, [sp, #16]
 8005c3e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8005c40:	9303      	str	r3, [sp, #12]
 8005c42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c44:	9302      	str	r3, [sp, #8]
 8005c46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c4c:	4413      	add	r3, r2
 8005c4e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005c50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c52:	4417      	add	r7, r2
 8005c54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c56:	4413      	add	r3, r2
 8005c58:	ee1a 2a10 	vmov	r2, s20
 8005c5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8005c5e:	2300      	movs	r3, #0
 8005c60:	9301      	str	r3, [sp, #4]
 8005c62:	ee18 3a90 	vmov	r3, s17
 8005c66:	f001 fa6d 	bl	8007144 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8005c6a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c6c:	901e      	str	r0, [sp, #120]	@ 0x78
 8005c6e:	42a3      	cmp	r3, r4
 8005c70:	d042      	beq.n	8005cf8 <forward_lite_conv2d_sssa8_ch+0x9b8>
 8005c72:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8005c74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c76:	e78b      	b.n	8005b90 <forward_lite_conv2d_sssa8_ch+0x850>
 8005c78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c7a:	429c      	cmp	r4, r3
 8005c7c:	f6bf af74 	bge.w	8005b68 <forward_lite_conv2d_sssa8_ch+0x828>
 8005c80:	970a      	str	r7, [sp, #40]	@ 0x28
 8005c82:	461f      	mov	r7, r3
 8005c84:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8005c86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005c88:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
 8005c8c:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 8005c90:	3401      	adds	r4, #1
 8005c92:	4629      	mov	r1, r5
 8005c94:	4630      	mov	r0, r6
 8005c96:	4642      	mov	r2, r8
 8005c98:	f000 f9be 	bl	8006018 <st_int8_to16_no_shift>
 8005c9c:	42bc      	cmp	r4, r7
 8005c9e:	444d      	add	r5, r9
 8005ca0:	445e      	add	r6, fp
 8005ca2:	d1f5      	bne.n	8005c90 <forward_lite_conv2d_sssa8_ch+0x950>
 8005ca4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005ca6:	e9dd 730a 	ldrd	r7, r3, [sp, #40]	@ 0x28
 8005caa:	4413      	add	r3, r2
 8005cac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cae:	e7b1      	b.n	8005c14 <forward_lite_conv2d_sssa8_ch+0x8d4>
 8005cb0:	4658      	mov	r0, fp
 8005cb2:	f000 fa13 	bl	80060dc <st_int8_to16_no_shift_interleaved>
 8005cb6:	e781      	b.n	8005bbc <forward_lite_conv2d_sssa8_ch+0x87c>
 8005cb8:	4658      	mov	r0, fp
 8005cba:	f000 f9ad 	bl	8006018 <st_int8_to16_no_shift>
 8005cbe:	e73e      	b.n	8005b3e <forward_lite_conv2d_sssa8_ch+0x7fe>
 8005cc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cc2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8005cc4:	428b      	cmp	r3, r1
 8005cc6:	d017      	beq.n	8005cf8 <forward_lite_conv2d_sssa8_ch+0x9b8>
 8005cc8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005cca:	ee1a 2a10 	vmov	r2, s20
 8005cce:	ee19 0a10 	vmov	r0, s18
 8005cd2:	9307      	str	r3, [sp, #28]
 8005cd4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005cd6:	9306      	str	r3, [sp, #24]
 8005cd8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8005cda:	9305      	str	r3, [sp, #20]
 8005cdc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8005cde:	9304      	str	r3, [sp, #16]
 8005ce0:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8005ce2:	9303      	str	r3, [sp, #12]
 8005ce4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8005ce6:	9302      	str	r3, [sp, #8]
 8005ce8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cea:	9301      	str	r3, [sp, #4]
 8005cec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	ee18 3a90 	vmov	r3, s17
 8005cf4:	f001 f85c 	bl	8006db0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8005cf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005cfa:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8005cfc:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8005cfe:	1a9b      	subs	r3, r3, r2
 8005d00:	4411      	add	r1, r2
 8005d02:	9128      	str	r1, [sp, #160]	@ 0xa0
 8005d04:	b299      	uxth	r1, r3
 8005d06:	4613      	mov	r3, r2
 8005d08:	428a      	cmp	r2, r1
 8005d0a:	9132      	str	r1, [sp, #200]	@ 0xc8
 8005d0c:	bf28      	it	cs
 8005d0e:	460b      	movcs	r3, r1
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d051      	beq.n	8005dba <forward_lite_conv2d_sssa8_ch+0xa7a>
 8005d16:	ee1a 4a10 	vmov	r4, s20
 8005d1a:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8005d1c:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8005d1e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8005d22:	fb01 0002 	mla	r0, r1, r2, r0
 8005d26:	ee0a 4a10 	vmov	s20, r4
 8005d2a:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
 8005d2c:	9036      	str	r0, [sp, #216]	@ 0xd8
 8005d2e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8005d32:	942e      	str	r4, [sp, #184]	@ 0xb8
 8005d34:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 8005d36:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8005d3a:	942a      	str	r4, [sp, #168]	@ 0xa8
 8005d3c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8005d3e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005d42:	9229      	str	r2, [sp, #164]	@ 0xa4
 8005d44:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d46:	2a00      	cmp	r2, #0
 8005d48:	d139      	bne.n	8005dbe <forward_lite_conv2d_sssa8_ch+0xa7e>
 8005d4a:	460a      	mov	r2, r1
 8005d4c:	ee19 1a10 	vmov	r1, s18
 8005d50:	9323      	str	r3, [sp, #140]	@ 0x8c
 8005d52:	f000 faf1 	bl	8006338 <st_int8_to16_dual_interleaved>
 8005d56:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	9331      	str	r3, [sp, #196]	@ 0xc4
 8005d60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005d64:	429a      	cmp	r2, r3
 8005d66:	f47f ae9d 	bne.w	8005aa4 <forward_lite_conv2d_sssa8_ch+0x764>
 8005d6a:	4647      	mov	r7, r8
 8005d6c:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 8005d6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d70:	4413      	add	r3, r2
 8005d72:	9310      	str	r3, [sp, #64]	@ 0x40
 8005d74:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8005d76:	4413      	add	r3, r2
 8005d78:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 8005d7a:	9318      	str	r3, [sp, #96]	@ 0x60
 8005d7c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8005d7e:	4413      	add	r3, r2
 8005d80:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8005d82:	9335      	str	r3, [sp, #212]	@ 0xd4
 8005d84:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8005d86:	4413      	add	r3, r2
 8005d88:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8005d8a:	933b      	str	r3, [sp, #236]	@ 0xec
 8005d8c:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8005d8e:	4413      	add	r3, r2
 8005d90:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 8005d92:	933c      	str	r3, [sp, #240]	@ 0xf0
 8005d94:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8005d96:	3301      	adds	r3, #1
 8005d98:	9338      	str	r3, [sp, #224]	@ 0xe0
 8005d9a:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	f77f ad05 	ble.w	80057ac <forward_lite_conv2d_sssa8_ch+0x46c>
 8005da2:	a84e      	add	r0, sp, #312	@ 0x138
 8005da4:	f000 fbdc 	bl	8006560 <ai_padding_opt_phase1>
 8005da8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	f47f ae4a 	bne.w	8005a44 <forward_lite_conv2d_sssa8_ch+0x704>
 8005db0:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8005db2:	933d      	str	r3, [sp, #244]	@ 0xf4
 8005db4:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8005db6:	9328      	str	r3, [sp, #160]	@ 0xa0
 8005db8:	e648      	b.n	8005a4c <forward_lite_conv2d_sssa8_ch+0x70c>
 8005dba:	9323      	str	r3, [sp, #140]	@ 0x8c
 8005dbc:	e7cb      	b.n	8005d56 <forward_lite_conv2d_sssa8_ch+0xa16>
 8005dbe:	460a      	mov	r2, r1
 8005dc0:	ee19 1a10 	vmov	r1, s18
 8005dc4:	9323      	str	r3, [sp, #140]	@ 0x8c
 8005dc6:	f000 f9cd 	bl	8006164 <st_int8_to16_dual>
 8005dca:	e7c4      	b.n	8005d56 <forward_lite_conv2d_sssa8_ch+0xa16>
 8005dcc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005dce:	ee19 1a10 	vmov	r1, s18
 8005dd2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8005dd4:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 8005dd6:	f000 f9c5 	bl	8006164 <st_int8_to16_dual>
 8005dda:	e644      	b.n	8005a66 <forward_lite_conv2d_sssa8_ch+0x726>
 8005ddc:	ee18 3a90 	vmov	r3, s17
 8005de0:	ee19 1a10 	vmov	r1, s18
 8005de4:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 8005de6:	f000 f9bd 	bl	8006164 <st_int8_to16_dual>
 8005dea:	f7ff bb86 	b.w	80054fa <forward_lite_conv2d_sssa8_ch+0x1ba>
 8005dee:	bf00      	nop

08005df0 <forward_lite_maxpool_is8os8_scaleneg>:
 8005df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	b095      	sub	sp, #84	@ 0x54
 8005df6:	4614      	mov	r4, r2
 8005df8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005dfc:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8005e00:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 8005e04:	910d      	str	r1, [sp, #52]	@ 0x34
 8005e06:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8005e0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8005e0c:	910e      	str	r1, [sp, #56]	@ 0x38
 8005e0e:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8005e12:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 8005e16:	910f      	str	r1, [sp, #60]	@ 0x3c
 8005e18:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 8005e1c:	9206      	str	r2, [sp, #24]
 8005e1e:	9110      	str	r1, [sp, #64]	@ 0x40
 8005e20:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 8005e24:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 8005e28:	9111      	str	r1, [sp, #68]	@ 0x44
 8005e2a:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 8005e2e:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 8005e32:	9112      	str	r1, [sp, #72]	@ 0x48
 8005e34:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 8005e38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e3a:	9107      	str	r1, [sp, #28]
 8005e3c:	9003      	str	r0, [sp, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 8093 	beq.w	8005f6a <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 8005e44:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005e48:	eeb4 0a67 	vcmp.f32	s0, s15
 8005e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e50:	bf0c      	ite	eq
 8005e52:	2301      	moveq	r3, #1
 8005e54:	2300      	movne	r3, #0
 8005e56:	4290      	cmp	r0, r2
 8005e58:	bf14      	ite	ne
 8005e5a:	2300      	movne	r3, #0
 8005e5c:	f003 0301 	andeq.w	r3, r3, #1
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	2900      	cmp	r1, #0
 8005e64:	f000 8081 	beq.w	8005f6a <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 8005e68:	f1ba 0f00 	cmp.w	sl, #0
 8005e6c:	d07d      	beq.n	8005f6a <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 8005e6e:	ee07 2a90 	vmov	s15, r2
 8005e72:	2300      	movs	r3, #0
 8005e74:	ed9f 6a4d 	vldr	s12, [pc, #308]	@ 8005fac <forward_lite_maxpool_is8os8_scaleneg+0x1bc>
 8005e78:	fb04 fb0a 	mul.w	fp, r4, sl
 8005e7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005e80:	9304      	str	r3, [sp, #16]
 8005e82:	9b04      	ldr	r3, [sp, #16]
 8005e84:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8005e88:	9907      	ldr	r1, [sp, #28]
 8005e8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005e8c:	fb03 f202 	mul.w	r2, r3, r2
 8005e90:	fb03 f301 	mul.w	r3, r3, r1
 8005e94:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005e96:	9308      	str	r3, [sp, #32]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	9305      	str	r3, [sp, #20]
 8005e9c:	1a53      	subs	r3, r2, r1
 8005e9e:	1a8a      	subs	r2, r1, r2
 8005ea0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	eb02 0c01 	add.w	ip, r2, r1
 8005ea8:	bfd8      	it	le
 8005eaa:	4691      	movle	r9, r2
 8005eac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005eae:	bfc8      	it	gt
 8005eb0:	f04f 0900 	movgt.w	r9, #0
 8005eb4:	4594      	cmp	ip, r2
 8005eb6:	444b      	add	r3, r9
 8005eb8:	bfa8      	it	ge
 8005eba:	4694      	movge	ip, r2
 8005ebc:	9a06      	ldr	r2, [sp, #24]
 8005ebe:	fb02 f303 	mul.w	r3, r2, r3
 8005ec2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ec4:	9a05      	ldr	r2, [sp, #20]
 8005ec6:	f04f 0e00 	mov.w	lr, #0
 8005eca:	9908      	ldr	r1, [sp, #32]
 8005ecc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005ece:	eb02 0801 	add.w	r8, r2, r1
 8005ed2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005ed4:	fb03 f302 	mul.w	r3, r3, r2
 8005ed8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005eda:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8005edc:	fb0a 2808 	mla	r8, sl, r8, r2
 8005ee0:	1a5a      	subs	r2, r3, r1
 8005ee2:	1acb      	subs	r3, r1, r3
 8005ee4:	9906      	ldr	r1, [sp, #24]
 8005ee6:	2a00      	cmp	r2, #0
 8005ee8:	bfd8      	it	le
 8005eea:	461f      	movle	r7, r3
 8005eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eee:	bfc8      	it	gt
 8005ef0:	2700      	movgt	r7, #0
 8005ef2:	18d3      	adds	r3, r2, r3
 8005ef4:	1a8a      	subs	r2, r1, r2
 8005ef6:	4294      	cmp	r4, r2
 8005ef8:	443b      	add	r3, r7
 8005efa:	bfa8      	it	ge
 8005efc:	4614      	movge	r4, r2
 8005efe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f00:	fb0a 2303 	mla	r3, sl, r3, r2
 8005f04:	9302      	str	r3, [sp, #8]
 8005f06:	45e1      	cmp	r9, ip
 8005f08:	da4d      	bge.n	8005fa6 <forward_lite_maxpool_is8os8_scaleneg+0x1b6>
 8005f0a:	9b02      	ldr	r3, [sp, #8]
 8005f0c:	464d      	mov	r5, r9
 8005f0e:	217f      	movs	r1, #127	@ 0x7f
 8005f10:	eb03 060e 	add.w	r6, r3, lr
 8005f14:	42a7      	cmp	r7, r4
 8005f16:	da0a      	bge.n	8005f2e <forward_lite_maxpool_is8os8_scaleneg+0x13e>
 8005f18:	4632      	mov	r2, r6
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	f992 0000 	ldrsb.w	r0, [r2]
 8005f20:	3301      	adds	r3, #1
 8005f22:	4452      	add	r2, sl
 8005f24:	4281      	cmp	r1, r0
 8005f26:	bfa8      	it	ge
 8005f28:	4601      	movge	r1, r0
 8005f2a:	429c      	cmp	r4, r3
 8005f2c:	d1f6      	bne.n	8005f1c <forward_lite_maxpool_is8os8_scaleneg+0x12c>
 8005f2e:	3501      	adds	r5, #1
 8005f30:	445e      	add	r6, fp
 8005f32:	45ac      	cmp	ip, r5
 8005f34:	d1ee      	bne.n	8005f14 <forward_lite_maxpool_is8os8_scaleneg+0x124>
 8005f36:	9b01      	ldr	r3, [sp, #4]
 8005f38:	b1d3      	cbz	r3, 8005f70 <forward_lite_maxpool_is8os8_scaleneg+0x180>
 8005f3a:	f888 1000 	strb.w	r1, [r8]
 8005f3e:	f10e 0e01 	add.w	lr, lr, #1
 8005f42:	f108 0801 	add.w	r8, r8, #1
 8005f46:	fa1f f38e 	uxth.w	r3, lr
 8005f4a:	459a      	cmp	sl, r3
 8005f4c:	d8db      	bhi.n	8005f06 <forward_lite_maxpool_is8os8_scaleneg+0x116>
 8005f4e:	9b05      	ldr	r3, [sp, #20]
 8005f50:	9a07      	ldr	r2, [sp, #28]
 8005f52:	3301      	adds	r3, #1
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	429a      	cmp	r2, r3
 8005f58:	9305      	str	r3, [sp, #20]
 8005f5a:	d8b3      	bhi.n	8005ec4 <forward_lite_maxpool_is8os8_scaleneg+0xd4>
 8005f5c:	9b04      	ldr	r3, [sp, #16]
 8005f5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f60:	3301      	adds	r3, #1
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	429a      	cmp	r2, r3
 8005f66:	9304      	str	r3, [sp, #16]
 8005f68:	d88b      	bhi.n	8005e82 <forward_lite_maxpool_is8os8_scaleneg+0x92>
 8005f6a:	b015      	add	sp, #84	@ 0x54
 8005f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f70:	9b03      	ldr	r3, [sp, #12]
 8005f72:	eeb0 7a66 	vmov.f32	s14, s13
 8005f76:	1ac9      	subs	r1, r1, r3
 8005f78:	ee07 1a90 	vmov	s15, r1
 8005f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f80:	eea7 7a80 	vfma.f32	s14, s15, s0
 8005f84:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f8c:	fe65 7a86 	vselge.f32	s15, s11, s12
 8005f90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f98:	ee17 3a90 	vmov	r3, s15
 8005f9c:	f303 0307 	ssat	r3, #8, r3
 8005fa0:	f888 3000 	strb.w	r3, [r8]
 8005fa4:	e7cb      	b.n	8005f3e <forward_lite_maxpool_is8os8_scaleneg+0x14e>
 8005fa6:	217f      	movs	r1, #127	@ 0x7f
 8005fa8:	e7c5      	b.n	8005f36 <forward_lite_maxpool_is8os8_scaleneg+0x146>
 8005faa:	bf00      	nop
 8005fac:	befffffc 	.word	0xbefffffc

08005fb0 <forward_lite_nl_softmax_is8os8>:
 8005fb0:	f001 bb64 	b.w	800767c <_lite_kernel_nl_softmax_is8os8>

08005fb4 <forward_lite_nl_softmax_iu8ou8>:
 8005fb4:	f002 bb68 	b.w	8008688 <_lite_kernel_nl_softmax_iu8ou8>

08005fb8 <align_factor_ch>:
 8005fb8:	b361      	cbz	r1, 8006014 <align_factor_ch+0x5c>
 8005fba:	ee80 7a20 	vdiv.f32	s14, s0, s1
 8005fbe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005fc2:	b570      	push	{r4, r5, r6, lr}
 8005fc4:	1e9d      	subs	r5, r3, #2
 8005fc6:	1f14      	subs	r4, r2, #4
 8005fc8:	2600      	movs	r6, #0
 8005fca:	ecf0 7a01 	vldmia	r0!, {s15}
 8005fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd2:	ee17 ea90 	vmov	lr, s15
 8005fd6:	f3ce 52c7 	ubfx	r2, lr, #23, #8
 8005fda:	f3ce 0c16 	ubfx	ip, lr, #0, #23
 8005fde:	f1be 0f00 	cmp.w	lr, #0
 8005fe2:	f50c 0c00 	add.w	ip, ip, #8388608	@ 0x800000
 8005fe6:	f1c2 027e 	rsb	r2, r2, #126	@ 0x7e
 8005fea:	bfb8      	it	lt
 8005fec:	f1cc 0c00 	rsblt	ip, ip, #0
 8005ff0:	2a1f      	cmp	r2, #31
 8005ff2:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 8005ff6:	dc06      	bgt.n	8006006 <align_factor_ch+0x4e>
 8005ff8:	4281      	cmp	r1, r0
 8005ffa:	f825 2f02 	strh.w	r2, [r5, #2]!
 8005ffe:	f844 3f04 	str.w	r3, [r4, #4]!
 8006002:	d1e2      	bne.n	8005fca <align_factor_ch+0x12>
 8006004:	bd70      	pop	{r4, r5, r6, pc}
 8006006:	4281      	cmp	r1, r0
 8006008:	f825 6f02 	strh.w	r6, [r5, #2]!
 800600c:	f844 6f04 	str.w	r6, [r4, #4]!
 8006010:	d1db      	bne.n	8005fca <align_factor_ch+0x12>
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop

08006018 <st_int8_to16_no_shift>:
 8006018:	b570      	push	{r4, r5, r6, lr}
 800601a:	f1b2 0410 	subs.w	r4, r2, #16
 800601e:	f04f 0e00 	mov.w	lr, #0
 8006022:	d438      	bmi.n	8006096 <st_int8_to16_no_shift+0x7e>
 8006024:	f8d0 c000 	ldr.w	ip, [r0]
 8006028:	6843      	ldr	r3, [r0, #4]
 800602a:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800602e:	fa2f fc8c 	sxtb16	ip, ip
 8006032:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 8006036:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800603a:	fa2f f593 	sxtb16	r5, r3, ror #8
 800603e:	3010      	adds	r0, #16
 8006040:	604e      	str	r6, [r1, #4]
 8006042:	f8c1 c000 	str.w	ip, [r1]
 8006046:	fa2f f383 	sxtb16	r3, r3
 800604a:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800604e:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 8006052:	60ce      	str	r6, [r1, #12]
 8006054:	608b      	str	r3, [r1, #8]
 8006056:	f850 cc08 	ldr.w	ip, [r0, #-8]
 800605a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800605e:	fa2f f59c 	sxtb16	r5, ip, ror #8
 8006062:	fa2f fc8c 	sxtb16	ip, ip
 8006066:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800606a:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800606e:	fa2f f593 	sxtb16	r5, r3, ror #8
 8006072:	f10e 0e10 	add.w	lr, lr, #16
 8006076:	f8c1 c010 	str.w	ip, [r1, #16]
 800607a:	614e      	str	r6, [r1, #20]
 800607c:	3120      	adds	r1, #32
 800607e:	45a6      	cmp	lr, r4
 8006080:	fa2f f383 	sxtb16	r3, r3
 8006084:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 8006088:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800608c:	f841 cc04 	str.w	ip, [r1, #-4]
 8006090:	f841 3c08 	str.w	r3, [r1, #-8]
 8006094:	ddc6      	ble.n	8006024 <st_int8_to16_no_shift+0xc>
 8006096:	1f16      	subs	r6, r2, #4
 8006098:	4576      	cmp	r6, lr
 800609a:	db12      	blt.n	80060c2 <st_int8_to16_no_shift+0xaa>
 800609c:	f850 3b04 	ldr.w	r3, [r0], #4
 80060a0:	fa2f f493 	sxtb16	r4, r3, ror #8
 80060a4:	f10e 0e04 	add.w	lr, lr, #4
 80060a8:	3108      	adds	r1, #8
 80060aa:	fa2f f383 	sxtb16	r3, r3
 80060ae:	45b6      	cmp	lr, r6
 80060b0:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 80060b4:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 80060b8:	f841 5c04 	str.w	r5, [r1, #-4]
 80060bc:	f841 3c08 	str.w	r3, [r1, #-8]
 80060c0:	ddec      	ble.n	800609c <st_int8_to16_no_shift+0x84>
 80060c2:	4572      	cmp	r2, lr
 80060c4:	dd08      	ble.n	80060d8 <st_int8_to16_no_shift+0xc0>
 80060c6:	eba2 020e 	sub.w	r2, r2, lr
 80060ca:	4402      	add	r2, r0
 80060cc:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80060d0:	4290      	cmp	r0, r2
 80060d2:	f821 3b02 	strh.w	r3, [r1], #2
 80060d6:	d1f9      	bne.n	80060cc <st_int8_to16_no_shift+0xb4>
 80060d8:	bd70      	pop	{r4, r5, r6, pc}
 80060da:	bf00      	nop

080060dc <st_int8_to16_no_shift_interleaved>:
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	f1b2 0510 	subs.w	r5, r2, #16
 80060e2:	f04f 0e00 	mov.w	lr, #0
 80060e6:	d428      	bmi.n	800613a <st_int8_to16_no_shift_interleaved+0x5e>
 80060e8:	f8d0 c000 	ldr.w	ip, [r0]
 80060ec:	6843      	ldr	r3, [r0, #4]
 80060ee:	fa2f f69c 	sxtb16	r6, ip, ror #8
 80060f2:	fa2f fc8c 	sxtb16	ip, ip
 80060f6:	fa2f f493 	sxtb16	r4, r3, ror #8
 80060fa:	3010      	adds	r0, #16
 80060fc:	600e      	str	r6, [r1, #0]
 80060fe:	f8c1 c004 	str.w	ip, [r1, #4]
 8006102:	608c      	str	r4, [r1, #8]
 8006104:	fa2f f383 	sxtb16	r3, r3
 8006108:	60cb      	str	r3, [r1, #12]
 800610a:	f850 cc08 	ldr.w	ip, [r0, #-8]
 800610e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006112:	fa2f f69c 	sxtb16	r6, ip, ror #8
 8006116:	fa2f fc8c 	sxtb16	ip, ip
 800611a:	fa2f f493 	sxtb16	r4, r3, ror #8
 800611e:	f10e 0e10 	add.w	lr, lr, #16
 8006122:	610e      	str	r6, [r1, #16]
 8006124:	f8c1 c014 	str.w	ip, [r1, #20]
 8006128:	3120      	adds	r1, #32
 800612a:	45ae      	cmp	lr, r5
 800612c:	f841 4c08 	str.w	r4, [r1, #-8]
 8006130:	fa2f f383 	sxtb16	r3, r3
 8006134:	f841 3c04 	str.w	r3, [r1, #-4]
 8006138:	ddd6      	ble.n	80060e8 <st_int8_to16_no_shift_interleaved+0xc>
 800613a:	3a04      	subs	r2, #4
 800613c:	4572      	cmp	r2, lr
 800613e:	db0f      	blt.n	8006160 <st_int8_to16_no_shift_interleaved+0x84>
 8006140:	ebae 0e00 	sub.w	lr, lr, r0
 8006144:	f850 3b04 	ldr.w	r3, [r0], #4
 8006148:	fa2f f493 	sxtb16	r4, r3, ror #8
 800614c:	eb00 0c0e 	add.w	ip, r0, lr
 8006150:	600c      	str	r4, [r1, #0]
 8006152:	3108      	adds	r1, #8
 8006154:	4562      	cmp	r2, ip
 8006156:	fa2f f383 	sxtb16	r3, r3
 800615a:	f841 3c04 	str.w	r3, [r1, #-4]
 800615e:	daf1      	bge.n	8006144 <st_int8_to16_no_shift_interleaved+0x68>
 8006160:	bd70      	pop	{r4, r5, r6, pc}
 8006162:	bf00      	nop

08006164 <st_int8_to16_dual>:
 8006164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006168:	4698      	mov	r8, r3
 800616a:	085b      	lsrs	r3, r3, #1
 800616c:	eb00 0c02 	add.w	ip, r0, r2
 8006170:	f000 80b9 	beq.w	80062e6 <st_int8_to16_dual+0x182>
 8006174:	f1a2 0710 	sub.w	r7, r2, #16
 8006178:	1f16      	subs	r6, r2, #4
 800617a:	2f00      	cmp	r7, #0
 800617c:	f04f 0500 	mov.w	r5, #0
 8006180:	db73      	blt.n	800626a <st_int8_to16_dual+0x106>
 8006182:	f8d0 e000 	ldr.w	lr, [r0]
 8006186:	f8dc 4000 	ldr.w	r4, [ip]
 800618a:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800618e:	fa2f fe8e 	sxtb16	lr, lr
 8006192:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8006196:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800619a:	fa2f f994 	sxtb16	r9, r4, ror #8
 800619e:	f8c1 e000 	str.w	lr, [r1]
 80061a2:	f8c1 a008 	str.w	sl, [r1, #8]
 80061a6:	fa2f f484 	sxtb16	r4, r4
 80061aa:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 80061ae:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 80061b2:	f8c1 e00c 	str.w	lr, [r1, #12]
 80061b6:	604c      	str	r4, [r1, #4]
 80061b8:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80061bc:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80061c0:	fa2f f99e 	sxtb16	r9, lr, ror #8
 80061c4:	fa2f fe8e 	sxtb16	lr, lr
 80061c8:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 80061cc:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 80061d0:	fa2f f994 	sxtb16	r9, r4, ror #8
 80061d4:	f8c1 e010 	str.w	lr, [r1, #16]
 80061d8:	f8c1 a018 	str.w	sl, [r1, #24]
 80061dc:	fa2f f484 	sxtb16	r4, r4
 80061e0:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 80061e4:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 80061e8:	f8c1 e01c 	str.w	lr, [r1, #28]
 80061ec:	614c      	str	r4, [r1, #20]
 80061ee:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80061f2:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80061f6:	fa2f f99e 	sxtb16	r9, lr, ror #8
 80061fa:	fa2f fe8e 	sxtb16	lr, lr
 80061fe:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8006202:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8006206:	fa2f f994 	sxtb16	r9, r4, ror #8
 800620a:	3010      	adds	r0, #16
 800620c:	f10c 0c10 	add.w	ip, ip, #16
 8006210:	f8c1 e020 	str.w	lr, [r1, #32]
 8006214:	f8c1 a028 	str.w	sl, [r1, #40]	@ 0x28
 8006218:	fa2f f484 	sxtb16	r4, r4
 800621c:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8006220:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8006224:	f8c1 e02c 	str.w	lr, [r1, #44]	@ 0x2c
 8006228:	624c      	str	r4, [r1, #36]	@ 0x24
 800622a:	f850 ec04 	ldr.w	lr, [r0, #-4]
 800622e:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 8006232:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 8006236:	fa2f fe8e 	sxtb16	lr, lr
 800623a:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 800623e:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 8006242:	fa2f fa94 	sxtb16	sl, r4, ror #8
 8006246:	3510      	adds	r5, #16
 8006248:	f8c1 e030 	str.w	lr, [r1, #48]	@ 0x30
 800624c:	f8c1 9038 	str.w	r9, [r1, #56]	@ 0x38
 8006250:	3140      	adds	r1, #64	@ 0x40
 8006252:	42bd      	cmp	r5, r7
 8006254:	fa2f f484 	sxtb16	r4, r4
 8006258:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 800625c:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 8006260:	f841 ec04 	str.w	lr, [r1, #-4]
 8006264:	f841 4c0c 	str.w	r4, [r1, #-12]
 8006268:	dd8b      	ble.n	8006182 <st_int8_to16_dual+0x1e>
 800626a:	42ae      	cmp	r6, r5
 800626c:	db1e      	blt.n	80062ac <st_int8_to16_dual+0x148>
 800626e:	f850 4b04 	ldr.w	r4, [r0], #4
 8006272:	f85c eb04 	ldr.w	lr, [ip], #4
 8006276:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800627a:	fa2f f484 	sxtb16	r4, r4
 800627e:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 8006282:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 8006286:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800628a:	3504      	adds	r5, #4
 800628c:	600c      	str	r4, [r1, #0]
 800628e:	f8c1 9008 	str.w	r9, [r1, #8]
 8006292:	3110      	adds	r1, #16
 8006294:	42b5      	cmp	r5, r6
 8006296:	fa2f fe8e 	sxtb16	lr, lr
 800629a:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 800629e:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 80062a2:	f841 4c04 	str.w	r4, [r1, #-4]
 80062a6:	f841 ec0c 	str.w	lr, [r1, #-12]
 80062aa:	dde0      	ble.n	800626e <st_int8_to16_dual+0x10a>
 80062ac:	42aa      	cmp	r2, r5
 80062ae:	dd40      	ble.n	8006332 <st_int8_to16_dual+0x1ce>
 80062b0:	1b55      	subs	r5, r2, r5
 80062b2:	1d0c      	adds	r4, r1, #4
 80062b4:	46e6      	mov	lr, ip
 80062b6:	eb00 0a05 	add.w	sl, r0, r5
 80062ba:	f910 9b01 	ldrsb.w	r9, [r0], #1
 80062be:	3404      	adds	r4, #4
 80062c0:	f824 9c08 	strh.w	r9, [r4, #-8]
 80062c4:	4550      	cmp	r0, sl
 80062c6:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 80062ca:	f824 9c06 	strh.w	r9, [r4, #-6]
 80062ce:	d1f4      	bne.n	80062ba <st_int8_to16_dual+0x156>
 80062d0:	44ac      	add	ip, r5
 80062d2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80062d6:	3b01      	subs	r3, #1
 80062d8:	eb0a 0002 	add.w	r0, sl, r2
 80062dc:	4494      	add	ip, r2
 80062de:	b29b      	uxth	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f47f af4a 	bne.w	800617a <st_int8_to16_dual+0x16>
 80062e6:	f018 0f01 	tst.w	r8, #1
 80062ea:	d020      	beq.n	800632e <st_int8_to16_dual+0x1ca>
 80062ec:	1f17      	subs	r7, r2, #4
 80062ee:	f04f 0400 	mov.w	r4, #0
 80062f2:	d411      	bmi.n	8006318 <st_int8_to16_dual+0x1b4>
 80062f4:	f850 3b04 	ldr.w	r3, [r0], #4
 80062f8:	fa2f f593 	sxtb16	r5, r3, ror #8
 80062fc:	3404      	adds	r4, #4
 80062fe:	3108      	adds	r1, #8
 8006300:	fa2f f383 	sxtb16	r3, r3
 8006304:	42a7      	cmp	r7, r4
 8006306:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800630a:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800630e:	f841 6c04 	str.w	r6, [r1, #-4]
 8006312:	f841 3c08 	str.w	r3, [r1, #-8]
 8006316:	daed      	bge.n	80062f4 <st_int8_to16_dual+0x190>
 8006318:	42a2      	cmp	r2, r4
 800631a:	dd08      	ble.n	800632e <st_int8_to16_dual+0x1ca>
 800631c:	1b13      	subs	r3, r2, r4
 800631e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006322:	f910 2b01 	ldrsb.w	r2, [r0], #1
 8006326:	f821 2b02 	strh.w	r2, [r1], #2
 800632a:	428b      	cmp	r3, r1
 800632c:	d1f9      	bne.n	8006322 <st_int8_to16_dual+0x1be>
 800632e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006332:	4682      	mov	sl, r0
 8006334:	e7cf      	b.n	80062d6 <st_int8_to16_dual+0x172>
 8006336:	bf00      	nop

08006338 <st_int8_to16_dual_interleaved>:
 8006338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800633c:	4698      	mov	r8, r3
 800633e:	085b      	lsrs	r3, r3, #1
 8006340:	eb00 0c02 	add.w	ip, r0, r2
 8006344:	f000 808f 	beq.w	8006466 <st_int8_to16_dual_interleaved+0x12e>
 8006348:	f1a2 0710 	sub.w	r7, r2, #16
 800634c:	1f16      	subs	r6, r2, #4
 800634e:	2f00      	cmp	r7, #0
 8006350:	f04f 0e00 	mov.w	lr, #0
 8006354:	db4e      	blt.n	80063f4 <st_int8_to16_dual_interleaved+0xbc>
 8006356:	6805      	ldr	r5, [r0, #0]
 8006358:	f8dc 4000 	ldr.w	r4, [ip]
 800635c:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8006360:	fa2f f585 	sxtb16	r5, r5
 8006364:	fa2f f994 	sxtb16	r9, r4, ror #8
 8006368:	f8c1 a000 	str.w	sl, [r1]
 800636c:	f8c1 9004 	str.w	r9, [r1, #4]
 8006370:	608d      	str	r5, [r1, #8]
 8006372:	fa2f f484 	sxtb16	r4, r4
 8006376:	60cc      	str	r4, [r1, #12]
 8006378:	6845      	ldr	r5, [r0, #4]
 800637a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800637e:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8006382:	fa2f f585 	sxtb16	r5, r5
 8006386:	fa2f f994 	sxtb16	r9, r4, ror #8
 800638a:	f8c1 a010 	str.w	sl, [r1, #16]
 800638e:	f8c1 9014 	str.w	r9, [r1, #20]
 8006392:	618d      	str	r5, [r1, #24]
 8006394:	fa2f f484 	sxtb16	r4, r4
 8006398:	61cc      	str	r4, [r1, #28]
 800639a:	6885      	ldr	r5, [r0, #8]
 800639c:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80063a0:	fa2f fa95 	sxtb16	sl, r5, ror #8
 80063a4:	fa2f f585 	sxtb16	r5, r5
 80063a8:	fa2f f994 	sxtb16	r9, r4, ror #8
 80063ac:	3010      	adds	r0, #16
 80063ae:	f10c 0c10 	add.w	ip, ip, #16
 80063b2:	f8c1 a020 	str.w	sl, [r1, #32]
 80063b6:	f8c1 9024 	str.w	r9, [r1, #36]	@ 0x24
 80063ba:	628d      	str	r5, [r1, #40]	@ 0x28
 80063bc:	fa2f f484 	sxtb16	r4, r4
 80063c0:	62cc      	str	r4, [r1, #44]	@ 0x2c
 80063c2:	f850 5c04 	ldr.w	r5, [r0, #-4]
 80063c6:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 80063ca:	fa2f fa95 	sxtb16	sl, r5, ror #8
 80063ce:	fa2f f585 	sxtb16	r5, r5
 80063d2:	fa2f f994 	sxtb16	r9, r4, ror #8
 80063d6:	f10e 0e10 	add.w	lr, lr, #16
 80063da:	f8c1 a030 	str.w	sl, [r1, #48]	@ 0x30
 80063de:	f8c1 9034 	str.w	r9, [r1, #52]	@ 0x34
 80063e2:	3140      	adds	r1, #64	@ 0x40
 80063e4:	45be      	cmp	lr, r7
 80063e6:	f841 5c08 	str.w	r5, [r1, #-8]
 80063ea:	fa2f f484 	sxtb16	r4, r4
 80063ee:	f841 4c04 	str.w	r4, [r1, #-4]
 80063f2:	ddb0      	ble.n	8006356 <st_int8_to16_dual_interleaved+0x1e>
 80063f4:	4576      	cmp	r6, lr
 80063f6:	db18      	blt.n	800642a <st_int8_to16_dual_interleaved+0xf2>
 80063f8:	f850 5b04 	ldr.w	r5, [r0], #4
 80063fc:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006400:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8006404:	fa2f f585 	sxtb16	r5, r5
 8006408:	fa2f f994 	sxtb16	r9, r4, ror #8
 800640c:	f10e 0e04 	add.w	lr, lr, #4
 8006410:	f8c1 a000 	str.w	sl, [r1]
 8006414:	f8c1 9004 	str.w	r9, [r1, #4]
 8006418:	3110      	adds	r1, #16
 800641a:	45b6      	cmp	lr, r6
 800641c:	f841 5c08 	str.w	r5, [r1, #-8]
 8006420:	fa2f f484 	sxtb16	r4, r4
 8006424:	f841 4c04 	str.w	r4, [r1, #-4]
 8006428:	dde6      	ble.n	80063f8 <st_int8_to16_dual_interleaved+0xc0>
 800642a:	4572      	cmp	r2, lr
 800642c:	dd3c      	ble.n	80064a8 <st_int8_to16_dual_interleaved+0x170>
 800642e:	eba2 0e0e 	sub.w	lr, r2, lr
 8006432:	1d0c      	adds	r4, r1, #4
 8006434:	4665      	mov	r5, ip
 8006436:	eb00 0a0e 	add.w	sl, r0, lr
 800643a:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800643e:	3404      	adds	r4, #4
 8006440:	f824 9c08 	strh.w	r9, [r4, #-8]
 8006444:	4550      	cmp	r0, sl
 8006446:	f915 9b01 	ldrsb.w	r9, [r5], #1
 800644a:	f824 9c06 	strh.w	r9, [r4, #-6]
 800644e:	d1f4      	bne.n	800643a <st_int8_to16_dual_interleaved+0x102>
 8006450:	44f4      	add	ip, lr
 8006452:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8006456:	3b01      	subs	r3, #1
 8006458:	eb0a 0002 	add.w	r0, sl, r2
 800645c:	4494      	add	ip, r2
 800645e:	b29b      	uxth	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	f47f af74 	bne.w	800634e <st_int8_to16_dual_interleaved+0x16>
 8006466:	f018 0f01 	tst.w	r8, #1
 800646a:	d01b      	beq.n	80064a4 <st_int8_to16_dual_interleaved+0x16c>
 800646c:	1f16      	subs	r6, r2, #4
 800646e:	f04f 0400 	mov.w	r4, #0
 8006472:	d40c      	bmi.n	800648e <st_int8_to16_dual_interleaved+0x156>
 8006474:	f850 3b04 	ldr.w	r3, [r0], #4
 8006478:	fa2f f593 	sxtb16	r5, r3, ror #8
 800647c:	3404      	adds	r4, #4
 800647e:	600d      	str	r5, [r1, #0]
 8006480:	3108      	adds	r1, #8
 8006482:	42a6      	cmp	r6, r4
 8006484:	fa2f f383 	sxtb16	r3, r3
 8006488:	f841 3c04 	str.w	r3, [r1, #-4]
 800648c:	daf2      	bge.n	8006474 <st_int8_to16_dual_interleaved+0x13c>
 800648e:	42a2      	cmp	r2, r4
 8006490:	dd08      	ble.n	80064a4 <st_int8_to16_dual_interleaved+0x16c>
 8006492:	1b13      	subs	r3, r2, r4
 8006494:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006498:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800649c:	f821 2b02 	strh.w	r2, [r1], #2
 80064a0:	428b      	cmp	r3, r1
 80064a2:	d1f9      	bne.n	8006498 <st_int8_to16_dual_interleaved+0x160>
 80064a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a8:	4682      	mov	sl, r0
 80064aa:	e7d4      	b.n	8006456 <st_int8_to16_dual_interleaved+0x11e>

080064ac <ai_padding_opt_init>:
 80064ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064b0:	2700      	movs	r7, #0
 80064b2:	9c07      	ldr	r4, [sp, #28]
 80064b4:	e9c0 7700 	strd	r7, r7, [r0]
 80064b8:	6087      	str	r7, [r0, #8]
 80064ba:	46b9      	mov	r9, r7
 80064bc:	690e      	ldr	r6, [r1, #16]
 80064be:	f1c6 0c00 	rsb	ip, r6, #0
 80064c2:	689e      	ldr	r6, [r3, #8]
 80064c4:	42be      	cmp	r6, r7
 80064c6:	dd1c      	ble.n	8006502 <ai_padding_opt_init+0x56>
 80064c8:	463e      	mov	r6, r7
 80064ca:	46be      	mov	lr, r7
 80064cc:	e010      	b.n	80064f0 <ai_padding_opt_init+0x44>
 80064ce:	6895      	ldr	r5, [r2, #8]
 80064d0:	eba5 080c 	sub.w	r8, r5, ip
 80064d4:	68a5      	ldr	r5, [r4, #8]
 80064d6:	45a8      	cmp	r8, r5
 80064d8:	da10      	bge.n	80064fc <ai_padding_opt_init+0x50>
 80064da:	f109 0901 	add.w	r9, r9, #1
 80064de:	f8c0 9008 	str.w	r9, [r0, #8]
 80064e2:	688d      	ldr	r5, [r1, #8]
 80064e4:	f10e 0e01 	add.w	lr, lr, #1
 80064e8:	44ac      	add	ip, r5
 80064ea:	689d      	ldr	r5, [r3, #8]
 80064ec:	4575      	cmp	r5, lr
 80064ee:	dd09      	ble.n	8006504 <ai_padding_opt_init+0x58>
 80064f0:	f1bc 0f00 	cmp.w	ip, #0
 80064f4:	daeb      	bge.n	80064ce <ai_padding_opt_init+0x22>
 80064f6:	3601      	adds	r6, #1
 80064f8:	6006      	str	r6, [r0, #0]
 80064fa:	e7f2      	b.n	80064e2 <ai_padding_opt_init+0x36>
 80064fc:	3701      	adds	r7, #1
 80064fe:	6047      	str	r7, [r0, #4]
 8006500:	e7ef      	b.n	80064e2 <ai_padding_opt_init+0x36>
 8006502:	463e      	mov	r6, r7
 8006504:	2500      	movs	r5, #0
 8006506:	f8c0 9014 	str.w	r9, [r0, #20]
 800650a:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800650e:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8006512:	6205      	str	r5, [r0, #32]
 8006514:	694e      	ldr	r6, [r1, #20]
 8006516:	f1c6 0c00 	rsb	ip, r6, #0
 800651a:	685e      	ldr	r6, [r3, #4]
 800651c:	42ae      	cmp	r6, r5
 800651e:	dd1c      	ble.n	800655a <ai_padding_opt_init+0xae>
 8006520:	46ae      	mov	lr, r5
 8006522:	e00f      	b.n	8006544 <ai_padding_opt_init+0x98>
 8006524:	6855      	ldr	r5, [r2, #4]
 8006526:	6866      	ldr	r6, [r4, #4]
 8006528:	eba5 050c 	sub.w	r5, r5, ip
 800652c:	42b5      	cmp	r5, r6
 800652e:	da10      	bge.n	8006552 <ai_padding_opt_init+0xa6>
 8006530:	6a05      	ldr	r5, [r0, #32]
 8006532:	3501      	adds	r5, #1
 8006534:	6205      	str	r5, [r0, #32]
 8006536:	68cd      	ldr	r5, [r1, #12]
 8006538:	f10e 0e01 	add.w	lr, lr, #1
 800653c:	44ac      	add	ip, r5
 800653e:	685d      	ldr	r5, [r3, #4]
 8006540:	4575      	cmp	r5, lr
 8006542:	dd0a      	ble.n	800655a <ai_padding_opt_init+0xae>
 8006544:	f1bc 0f00 	cmp.w	ip, #0
 8006548:	daec      	bge.n	8006524 <ai_padding_opt_init+0x78>
 800654a:	6985      	ldr	r5, [r0, #24]
 800654c:	3501      	adds	r5, #1
 800654e:	6185      	str	r5, [r0, #24]
 8006550:	e7f1      	b.n	8006536 <ai_padding_opt_init+0x8a>
 8006552:	69c5      	ldr	r5, [r0, #28]
 8006554:	3501      	adds	r5, #1
 8006556:	61c5      	str	r5, [r0, #28]
 8006558:	e7ed      	b.n	8006536 <ai_padding_opt_init+0x8a>
 800655a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800655e:	bf00      	nop

08006560 <ai_padding_opt_phase1>:
 8006560:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 8006564:	b923      	cbnz	r3, 8006570 <ai_padding_opt_phase1+0x10>
 8006566:	b17a      	cbz	r2, 8006588 <ai_padding_opt_phase1+0x28>
 8006568:	3a01      	subs	r2, #1
 800656a:	8483      	strh	r3, [r0, #36]	@ 0x24
 800656c:	61c2      	str	r2, [r0, #28]
 800656e:	e004      	b.n	800657a <ai_padding_opt_phase1+0x1a>
 8006570:	b152      	cbz	r2, 8006588 <ai_padding_opt_phase1+0x28>
 8006572:	2201      	movs	r2, #1
 8006574:	3b01      	subs	r3, #1
 8006576:	8482      	strh	r2, [r0, #36]	@ 0x24
 8006578:	6183      	str	r3, [r0, #24]
 800657a:	68c3      	ldr	r3, [r0, #12]
 800657c:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 8006580:	6003      	str	r3, [r0, #0]
 8006582:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8006586:	4770      	bx	lr
 8006588:	6a03      	ldr	r3, [r0, #32]
 800658a:	2201      	movs	r2, #1
 800658c:	3b01      	subs	r3, #1
 800658e:	8482      	strh	r2, [r0, #36]	@ 0x24
 8006590:	6203      	str	r3, [r0, #32]
 8006592:	e7f2      	b.n	800657a <ai_padding_opt_phase1+0x1a>

08006594 <st_int16_fill>:
 8006594:	b510      	push	{r4, lr}
 8006596:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 800659a:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800659e:	d013      	beq.n	80065c8 <st_int16_fill+0x34>
 80065a0:	f10e 33ff 	add.w	r3, lr, #4294967295
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	460b      	mov	r3, r1
 80065a8:	d919      	bls.n	80065de <st_int16_fill+0x4a>
 80065aa:	f011 0f07 	tst.w	r1, #7
 80065ae:	d116      	bne.n	80065de <st_int16_fill+0x4a>
 80065b0:	f04f 0c00 	mov.w	ip, #0
 80065b4:	f10c 0c01 	add.w	ip, ip, #1
 80065b8:	45e6      	cmp	lr, ip
 80065ba:	e9c3 4400 	strd	r4, r4, [r3]
 80065be:	f103 0308 	add.w	r3, r3, #8
 80065c2:	d1f7      	bne.n	80065b4 <st_int16_fill+0x20>
 80065c4:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 80065c8:	f012 0203 	ands.w	r2, r2, #3
 80065cc:	d006      	beq.n	80065dc <st_int16_fill+0x48>
 80065ce:	3a01      	subs	r2, #1
 80065d0:	8008      	strh	r0, [r1, #0]
 80065d2:	d003      	beq.n	80065dc <st_int16_fill+0x48>
 80065d4:	2a01      	cmp	r2, #1
 80065d6:	8048      	strh	r0, [r1, #2]
 80065d8:	bf18      	it	ne
 80065da:	8088      	strhne	r0, [r1, #4]
 80065dc:	bd10      	pop	{r4, pc}
 80065de:	46f4      	mov	ip, lr
 80065e0:	f1bc 0c01 	subs.w	ip, ip, #1
 80065e4:	601c      	str	r4, [r3, #0]
 80065e6:	605c      	str	r4, [r3, #4]
 80065e8:	f103 0308 	add.w	r3, r3, #8
 80065ec:	d1f8      	bne.n	80065e0 <st_int16_fill+0x4c>
 80065ee:	e7e9      	b.n	80065c4 <st_int16_fill+0x30>

080065f0 <st_sssa8_ch_convolve_rank1upd>:
 80065f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	b085      	sub	sp, #20
 80065f6:	f8bd 4038 	ldrh.w	r4, [sp, #56]	@ 0x38
 80065fa:	f99d b040 	ldrsb.w	fp, [sp, #64]	@ 0x40
 80065fe:	fb13 f304 	smulbb	r3, r3, r4
 8006602:	460c      	mov	r4, r1
 8006604:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006606:	fb13 f500 	smulbb	r5, r3, r0
 800660a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800660c:	2a00      	cmp	r2, #0
 800660e:	d070      	beq.n	80066f2 <st_sssa8_ch_convolve_rank1upd+0x102>
 8006610:	b2ad      	uxth	r5, r5
 8006612:	f1a1 0904 	sub.w	r9, r1, #4
 8006616:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 800661a:	08af      	lsrs	r7, r5, #2
 800661c:	f005 0503 	and.w	r5, r5, #3
 8006620:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 8006624:	1e69      	subs	r1, r5, #1
 8006626:	f1a7 0381 	sub.w	r3, r7, #129	@ 0x81
 800662a:	f1a7 0280 	sub.w	r2, r7, #128	@ 0x80
 800662e:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8006632:	b289      	uxth	r1, r1
 8006634:	9100      	str	r1, [sp, #0]
 8006636:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 800663a:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 800663e:	b292      	uxth	r2, r2
 8006640:	9202      	str	r2, [sp, #8]
 8006642:	025a      	lsls	r2, r3, #9
 8006644:	3301      	adds	r3, #1
 8006646:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800664a:	025b      	lsls	r3, r3, #9
 800664c:	9203      	str	r2, [sp, #12]
 800664e:	9301      	str	r3, [sp, #4]
 8006650:	2f80      	cmp	r7, #128	@ 0x80
 8006652:	d953      	bls.n	80066fc <st_sssa8_ch_convolve_rank1upd+0x10c>
 8006654:	9b03      	ldr	r3, [sp, #12]
 8006656:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 800665a:	2600      	movs	r6, #0
 800665c:	eb04 0c03 	add.w	ip, r4, r3
 8006660:	f5a0 7100 	sub.w	r1, r0, #512	@ 0x200
 8006664:	2200      	movs	r2, #0
 8006666:	f851 3b04 	ldr.w	r3, [r1], #4
 800666a:	fa2f fe83 	sxtb16	lr, r3
 800666e:	4281      	cmp	r1, r0
 8006670:	ea4f 2333 	mov.w	r3, r3, ror #8
 8006674:	fa92 f21e 	qadd16	r2, r2, lr
 8006678:	fa2f f383 	sxtb16	r3, r3
 800667c:	fa92 f213 	qadd16	r2, r2, r3
 8006680:	d1f1      	bne.n	8006666 <st_sssa8_ch_convolve_rank1upd+0x76>
 8006682:	f501 7000 	add.w	r0, r1, #512	@ 0x200
 8006686:	b213      	sxth	r3, r2
 8006688:	4560      	cmp	r0, ip
 800668a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800668e:	441e      	add	r6, r3
 8006690:	d1e6      	bne.n	8006660 <st_sssa8_ch_convolve_rank1upd+0x70>
 8006692:	9b01      	ldr	r3, [sp, #4]
 8006694:	18e1      	adds	r1, r4, r3
 8006696:	9c02      	ldr	r4, [sp, #8]
 8006698:	b374      	cbz	r4, 80066f8 <st_sssa8_ch_convolve_rank1upd+0x108>
 800669a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800669e:	2200      	movs	r2, #0
 80066a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80066a4:	fa2f f083 	sxtb16	r0, r3
 80066a8:	428c      	cmp	r4, r1
 80066aa:	ea4f 2333 	mov.w	r3, r3, ror #8
 80066ae:	fa92 f210 	qadd16	r2, r2, r0
 80066b2:	fa2f f383 	sxtb16	r3, r3
 80066b6:	fa92 f213 	qadd16	r2, r2, r3
 80066ba:	d1f1      	bne.n	80066a0 <st_sssa8_ch_convolve_rank1upd+0xb0>
 80066bc:	b213      	sxth	r3, r2
 80066be:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80066c2:	441e      	add	r6, r3
 80066c4:	b16d      	cbz	r5, 80066e2 <st_sssa8_ch_convolve_rank1upd+0xf2>
 80066c6:	f994 3000 	ldrsb.w	r3, [r4]
 80066ca:	441e      	add	r6, r3
 80066cc:	9b00      	ldr	r3, [sp, #0]
 80066ce:	b13b      	cbz	r3, 80066e0 <st_sssa8_ch_convolve_rank1upd+0xf0>
 80066d0:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80066d4:	2d02      	cmp	r5, #2
 80066d6:	441e      	add	r6, r3
 80066d8:	d002      	beq.n	80066e0 <st_sssa8_ch_convolve_rank1upd+0xf0>
 80066da:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80066de:	441e      	add	r6, r3
 80066e0:	442c      	add	r4, r5
 80066e2:	f859 3f04 	ldr.w	r3, [r9, #4]!
 80066e6:	fb06 331b 	mls	r3, r6, fp, r3
 80066ea:	f84a 3b04 	str.w	r3, [sl], #4
 80066ee:	45c2      	cmp	sl, r8
 80066f0:	d1ae      	bne.n	8006650 <st_sssa8_ch_convolve_rank1upd+0x60>
 80066f2:	b005      	add	sp, #20
 80066f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f8:	460c      	mov	r4, r1
 80066fa:	e7e3      	b.n	80066c4 <st_sssa8_ch_convolve_rank1upd+0xd4>
 80066fc:	4621      	mov	r1, r4
 80066fe:	2600      	movs	r6, #0
 8006700:	463c      	mov	r4, r7
 8006702:	e7c9      	b.n	8006698 <st_sssa8_ch_convolve_rank1upd+0xa8>

08006704 <st_sssa8_ch_fully_connected>:
 8006704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006708:	b097      	sub	sp, #92	@ 0x5c
 800670a:	468a      	mov	sl, r1
 800670c:	4693      	mov	fp, r2
 800670e:	4619      	mov	r1, r3
 8006710:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006712:	9314      	str	r3, [sp, #80]	@ 0x50
 8006714:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006718:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800671c:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800671e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8006722:	f99d e088 	ldrsb.w	lr, [sp, #136]	@ 0x88
 8006726:	9512      	str	r5, [sp, #72]	@ 0x48
 8006728:	930d      	str	r3, [sp, #52]	@ 0x34
 800672a:	f99d 308c 	ldrsb.w	r3, [sp, #140]	@ 0x8c
 800672e:	2900      	cmp	r1, #0
 8006730:	f000 827b 	beq.w	8006c2a <st_sssa8_ch_fully_connected+0x526>
 8006734:	463c      	mov	r4, r7
 8006736:	3504      	adds	r5, #4
 8006738:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800673c:	f04f 0c01 	mov.w	ip, #1
 8006740:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 8006744:	f934 2b02 	ldrsh.w	r2, [r4], #2
 8006748:	1e51      	subs	r1, r2, #1
 800674a:	fa0c f602 	lsl.w	r6, ip, r2
 800674e:	fa03 f202 	lsl.w	r2, r3, r2
 8006752:	b289      	uxth	r1, r1
 8006754:	eb02 0256 	add.w	r2, r2, r6, lsr #1
 8006758:	2914      	cmp	r1, #20
 800675a:	f200 81e8 	bhi.w	8006b2e <st_sssa8_ch_fully_connected+0x42a>
 800675e:	42bc      	cmp	r4, r7
 8006760:	f845 2c04 	str.w	r2, [r5, #-4]
 8006764:	f105 0504 	add.w	r5, r5, #4
 8006768:	d1ec      	bne.n	8006744 <st_sssa8_ch_fully_connected+0x40>
 800676a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800676c:	fa1f f38e 	uxth.w	r3, lr
 8006770:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8006772:	eba7 0508 	sub.w	r5, r7, r8
 8006776:	0852      	lsrs	r2, r2, #1
 8006778:	f8cd e000 	str.w	lr, [sp]
 800677c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8006780:	4631      	mov	r1, r6
 8006782:	4614      	mov	r4, r2
 8006784:	9215      	str	r2, [sp, #84]	@ 0x54
 8006786:	465a      	mov	r2, fp
 8006788:	9513      	str	r5, [sp, #76]	@ 0x4c
 800678a:	f000 fadb 	bl	8006d44 <st_int8_reordered_no_shift_zero>
 800678e:	2c00      	cmp	r4, #0
 8006790:	f000 8179 	beq.w	8006a86 <st_sssa8_ch_fully_connected+0x382>
 8006794:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8006796:	1e62      	subs	r2, r4, #1
 8006798:	f1ab 0310 	sub.w	r3, fp, #16
 800679c:	46d9      	mov	r9, fp
 800679e:	b292      	uxth	r2, r2
 80067a0:	f100 0110 	add.w	r1, r0, #16
 80067a4:	091b      	lsrs	r3, r3, #4
 80067a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80067aa:	3301      	adds	r3, #1
 80067ac:	920e      	str	r2, [sp, #56]	@ 0x38
 80067ae:	f1ab 0203 	sub.w	r2, fp, #3
 80067b2:	920f      	str	r2, [sp, #60]	@ 0x3c
 80067b4:	4602      	mov	r2, r0
 80067b6:	3208      	adds	r2, #8
 80067b8:	9208      	str	r2, [sp, #32]
 80067ba:	1d2a      	adds	r2, r5, #4
 80067bc:	9207      	str	r2, [sp, #28]
 80067be:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80067c0:	3202      	adds	r2, #2
 80067c2:	9204      	str	r2, [sp, #16]
 80067c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80067c6:	3204      	adds	r2, #4
 80067c8:	9205      	str	r2, [sp, #20]
 80067ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80067cc:	3204      	adds	r2, #4
 80067ce:	9206      	str	r2, [sp, #24]
 80067d0:	011a      	lsls	r2, r3, #4
 80067d2:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 80067d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80067d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80067da:	f1ab 0304 	sub.w	r3, fp, #4
 80067de:	9311      	str	r3, [sp, #68]	@ 0x44
 80067e0:	9b08      	ldr	r3, [sp, #32]
 80067e2:	f1b9 0f0f 	cmp.w	r9, #15
 80067e6:	eb0a 0b09 	add.w	fp, sl, r9
 80067ea:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 80067ee:	f340 81ef 	ble.w	8006bd0 <st_sssa8_ch_fully_connected+0x4cc>
 80067f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067f4:	465c      	mov	r4, fp
 80067f6:	eb0a 0502 	add.w	r5, sl, r2
 80067fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80067fc:	f8da 6000 	ldr.w	r6, [sl]
 8006800:	6820      	ldr	r0, [r4, #0]
 8006802:	ea4f 2736 	mov.w	r7, r6, ror #8
 8006806:	f8d2 e000 	ldr.w	lr, [r2]
 800680a:	ea4f 2c30 	mov.w	ip, r0, ror #8
 800680e:	fa2f f787 	sxtb16	r7, r7
 8006812:	fa2f f686 	sxtb16	r6, r6
 8006816:	fa2f fc8c 	sxtb16	ip, ip
 800681a:	fa2f f080 	sxtb16	r0, r0
 800681e:	fb2e 1106 	smlad	r1, lr, r6, r1
 8006822:	fb2e 3300 	smlad	r3, lr, r0, r3
 8006826:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800682a:	fb2e 1707 	smlad	r7, lr, r7, r1
 800682e:	fb2e 3e0c 	smlad	lr, lr, ip, r3
 8006832:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006836:	6860      	ldr	r0, [r4, #4]
 8006838:	ea4f 2631 	mov.w	r6, r1, ror #8
 800683c:	6893      	ldr	r3, [r2, #8]
 800683e:	ea4f 2c30 	mov.w	ip, r0, ror #8
 8006842:	fa2f f686 	sxtb16	r6, r6
 8006846:	fa2f f181 	sxtb16	r1, r1
 800684a:	fa2f fc8c 	sxtb16	ip, ip
 800684e:	fa2f f080 	sxtb16	r0, r0
 8006852:	fb23 7101 	smlad	r1, r3, r1, r7
 8006856:	fb23 e300 	smlad	r3, r3, r0, lr
 800685a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 800685e:	fb2e 1606 	smlad	r6, lr, r6, r1
 8006862:	fb2e 3e0c 	smlad	lr, lr, ip, r3
 8006866:	f8da 0008 	ldr.w	r0, [sl, #8]
 800686a:	68a1      	ldr	r1, [r4, #8]
 800686c:	ea4f 2c30 	mov.w	ip, r0, ror #8
 8006870:	6913      	ldr	r3, [r2, #16]
 8006872:	ea4f 2731 	mov.w	r7, r1, ror #8
 8006876:	fa2f fc8c 	sxtb16	ip, ip
 800687a:	fa2f f080 	sxtb16	r0, r0
 800687e:	fa2f f787 	sxtb16	r7, r7
 8006882:	fa2f f181 	sxtb16	r1, r1
 8006886:	fb23 6000 	smlad	r0, r3, r0, r6
 800688a:	fb23 e301 	smlad	r3, r3, r1, lr
 800688e:	6951      	ldr	r1, [r2, #20]
 8006890:	fb21 000c 	smlad	r0, r1, ip, r0
 8006894:	fb21 3c07 	smlad	ip, r1, r7, r3
 8006898:	f8da 100c 	ldr.w	r1, [sl, #12]
 800689c:	3410      	adds	r4, #16
 800689e:	f854 ec04 	ldr.w	lr, [r4, #-4]
 80068a2:	f10a 0a10 	add.w	sl, sl, #16
 80068a6:	ea4f 2731 	mov.w	r7, r1, ror #8
 80068aa:	6993      	ldr	r3, [r2, #24]
 80068ac:	ea4f 263e 	mov.w	r6, lr, ror #8
 80068b0:	fa2f f787 	sxtb16	r7, r7
 80068b4:	fa2f f181 	sxtb16	r1, r1
 80068b8:	fa2f fe8e 	sxtb16	lr, lr
 80068bc:	fa2f f686 	sxtb16	r6, r6
 80068c0:	fb23 0101 	smlad	r1, r3, r1, r0
 80068c4:	fb23 c00e 	smlad	r0, r3, lr, ip
 80068c8:	69d3      	ldr	r3, [r2, #28]
 80068ca:	3220      	adds	r2, #32
 80068cc:	fb23 1107 	smlad	r1, r3, r7, r1
 80068d0:	fb23 0306 	smlad	r3, r3, r6, r0
 80068d4:	4555      	cmp	r5, sl
 80068d6:	d191      	bne.n	80067fc <st_sssa8_ch_fully_connected+0xf8>
 80068d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068da:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80068dc:	4493      	add	fp, r2
 80068de:	4690      	mov	r8, r2
 80068e0:	9003      	str	r0, [sp, #12]
 80068e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80068e4:	4542      	cmp	r2, r8
 80068e6:	f340 8171 	ble.w	8006bcc <st_sssa8_ch_fully_connected+0x4c8>
 80068ea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80068ec:	46dc      	mov	ip, fp
 80068ee:	9d03      	ldr	r5, [sp, #12]
 80068f0:	eba2 0208 	sub.w	r2, r2, r8
 80068f4:	0892      	lsrs	r2, r2, #2
 80068f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80068f8:	3201      	adds	r2, #1
 80068fa:	0090      	lsls	r0, r2, #2
 80068fc:	920b      	str	r2, [sp, #44]	@ 0x2c
 80068fe:	eb0a 0e82 	add.w	lr, sl, r2, lsl #2
 8006902:	900a      	str	r0, [sp, #40]	@ 0x28
 8006904:	f85a 7b04 	ldr.w	r7, [sl], #4
 8006908:	f85c 0b04 	ldr.w	r0, [ip], #4
 800690c:	ea4f 2637 	mov.w	r6, r7, ror #8
 8006910:	682a      	ldr	r2, [r5, #0]
 8006912:	ea4f 2430 	mov.w	r4, r0, ror #8
 8006916:	fa2f f686 	sxtb16	r6, r6
 800691a:	fa2f f787 	sxtb16	r7, r7
 800691e:	fa2f f484 	sxtb16	r4, r4
 8006922:	fa2f f080 	sxtb16	r0, r0
 8006926:	fb22 1107 	smlad	r1, r2, r7, r1
 800692a:	fb22 3200 	smlad	r2, r2, r0, r3
 800692e:	686b      	ldr	r3, [r5, #4]
 8006930:	3508      	adds	r5, #8
 8006932:	fb23 1106 	smlad	r1, r3, r6, r1
 8006936:	fb23 2304 	smlad	r3, r3, r4, r2
 800693a:	45d6      	cmp	lr, sl
 800693c:	d1e2      	bne.n	8006904 <st_sssa8_ch_fully_connected+0x200>
 800693e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006940:	f108 0804 	add.w	r8, r8, #4
 8006944:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006946:	4493      	add	fp, r2
 8006948:	9a03      	ldr	r2, [sp, #12]
 800694a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800694e:	9203      	str	r2, [sp, #12]
 8006950:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006952:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 8006956:	45c1      	cmp	r9, r8
 8006958:	dd37      	ble.n	80069ca <st_sssa8_ch_fully_connected+0x2c6>
 800695a:	9c03      	ldr	r4, [sp, #12]
 800695c:	f99e 0000 	ldrsb.w	r0, [lr]
 8006960:	f9b4 2000 	ldrsh.w	r2, [r4]
 8006964:	fb12 1100 	smlabb	r1, r2, r0, r1
 8006968:	f99b 0000 	ldrsb.w	r0, [fp]
 800696c:	fb12 3300 	smlabb	r3, r2, r0, r3
 8006970:	f108 0201 	add.w	r2, r8, #1
 8006974:	454a      	cmp	r2, r9
 8006976:	da25      	bge.n	80069c4 <st_sssa8_ch_fully_connected+0x2c0>
 8006978:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800697c:	f99e 0001 	ldrsb.w	r0, [lr, #1]
 8006980:	fb12 1100 	smlabb	r1, r2, r0, r1
 8006984:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 8006988:	fb12 3300 	smlabb	r3, r2, r0, r3
 800698c:	f108 0202 	add.w	r2, r8, #2
 8006990:	4591      	cmp	r9, r2
 8006992:	dd17      	ble.n	80069c4 <st_sssa8_ch_fully_connected+0x2c0>
 8006994:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8006998:	f99e 0002 	ldrsb.w	r0, [lr, #2]
 800699c:	fb12 1100 	smlabb	r1, r2, r0, r1
 80069a0:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 80069a4:	fb12 3300 	smlabb	r3, r2, r0, r3
 80069a8:	f108 0203 	add.w	r2, r8, #3
 80069ac:	4591      	cmp	r9, r2
 80069ae:	dd09      	ble.n	80069c4 <st_sssa8_ch_fully_connected+0x2c0>
 80069b0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80069b4:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 80069b8:	fb12 3300 	smlabb	r3, r2, r0, r3
 80069bc:	f99e 0003 	ldrsb.w	r0, [lr, #3]
 80069c0:	fb12 1100 	smlabb	r1, r2, r0, r1
 80069c4:	eba9 0808 	sub.w	r8, r9, r8
 80069c8:	44c6      	add	lr, r8
 80069ca:	9d07      	ldr	r5, [sp, #28]
 80069cc:	f935 0c04 	ldrsh.w	r0, [r5, #-4]
 80069d0:	2815      	cmp	r0, #21
 80069d2:	f340 80c2 	ble.w	8006b5a <st_sssa8_ch_fully_connected+0x456>
 80069d6:	1e84      	subs	r4, r0, #2
 80069d8:	2201      	movs	r2, #1
 80069da:	3801      	subs	r0, #1
 80069dc:	fa02 f404 	lsl.w	r4, r2, r4
 80069e0:	9a05      	ldr	r2, [sp, #20]
 80069e2:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80069e6:	fb51 4202 	smmla	r2, r1, r2, r4
 80069ea:	9906      	ldr	r1, [sp, #24]
 80069ec:	4102      	asrs	r2, r0
 80069ee:	1eac      	subs	r4, r5, #2
 80069f0:	f851 1c04 	ldr.w	r1, [r1, #-4]
 80069f4:	440a      	add	r2, r1
 80069f6:	f302 0207 	ssat	r2, #8, r2
 80069fa:	9904      	ldr	r1, [sp, #16]
 80069fc:	b252      	sxtb	r2, r2
 80069fe:	1e48      	subs	r0, r1, #1
 8006a00:	f801 2c02 	strb.w	r2, [r1, #-2]
 8006a04:	f9b4 4000 	ldrsh.w	r4, [r4]
 8006a08:	2c15      	cmp	r4, #21
 8006a0a:	f340 8098 	ble.w	8006b3e <st_sssa8_ch_fully_connected+0x43a>
 8006a0e:	1ea1      	subs	r1, r4, #2
 8006a10:	2201      	movs	r2, #1
 8006a12:	3c01      	subs	r4, #1
 8006a14:	fa02 f101 	lsl.w	r1, r2, r1
 8006a18:	9a05      	ldr	r2, [sp, #20]
 8006a1a:	6812      	ldr	r2, [r2, #0]
 8006a1c:	fb53 1302 	smmla	r3, r3, r2, r1
 8006a20:	9a06      	ldr	r2, [sp, #24]
 8006a22:	4123      	asrs	r3, r4
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	4413      	add	r3, r2
 8006a28:	f303 0307 	ssat	r3, #8, r3
 8006a2c:	b25b      	sxtb	r3, r3
 8006a2e:	9a07      	ldr	r2, [sp, #28]
 8006a30:	eb0e 0a09 	add.w	sl, lr, r9
 8006a34:	7003      	strb	r3, [r0, #0]
 8006a36:	3204      	adds	r2, #4
 8006a38:	9b08      	ldr	r3, [sp, #32]
 8006a3a:	9207      	str	r2, [sp, #28]
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	9a04      	ldr	r2, [sp, #16]
 8006a40:	9308      	str	r3, [sp, #32]
 8006a42:	3202      	adds	r2, #2
 8006a44:	9204      	str	r2, [sp, #16]
 8006a46:	9a05      	ldr	r2, [sp, #20]
 8006a48:	3208      	adds	r2, #8
 8006a4a:	9205      	str	r2, [sp, #20]
 8006a4c:	9a06      	ldr	r2, [sp, #24]
 8006a4e:	3208      	adds	r2, #8
 8006a50:	9206      	str	r2, [sp, #24]
 8006a52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a54:	429a      	cmp	r2, r3
 8006a56:	f47f aec3 	bne.w	80067e0 <st_sssa8_ch_fully_connected+0xdc>
 8006a5a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006a5c:	46cb      	mov	fp, r9
 8006a5e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006a60:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006a64:	9220      	str	r2, [sp, #128]	@ 0x80
 8006a66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006a68:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006a6c:	9213      	str	r2, [sp, #76]	@ 0x4c
 8006a6e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006a70:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006a74:	9224      	str	r2, [sp, #144]	@ 0x90
 8006a76:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8006a78:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8006a7c:	9225      	str	r2, [sp, #148]	@ 0x94
 8006a7e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006a80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a84:	9312      	str	r3, [sp, #72]	@ 0x48
 8006a86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a88:	07db      	lsls	r3, r3, #31
 8006a8a:	d54c      	bpl.n	8006b26 <st_sssa8_ch_fully_connected+0x422>
 8006a8c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006a8e:	ea5f 079b 	movs.w	r7, fp, lsr #2
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f000 80c7 	beq.w	8006c26 <st_sssa8_ch_fully_connected+0x522>
 8006a98:	eb0a 0687 	add.w	r6, sl, r7, lsl #2
 8006a9c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006a9e:	f85a 2b04 	ldr.w	r2, [sl], #4
 8006aa2:	3008      	adds	r0, #8
 8006aa4:	f850 5c08 	ldr.w	r5, [r0, #-8]
 8006aa8:	ea4f 2132 	mov.w	r1, r2, ror #8
 8006aac:	f850 4c04 	ldr.w	r4, [r0, #-4]
 8006ab0:	fa2f f282 	sxtb16	r2, r2
 8006ab4:	fa2f f181 	sxtb16	r1, r1
 8006ab8:	fb25 3302 	smlad	r3, r5, r2, r3
 8006abc:	fb24 3301 	smlad	r3, r4, r1, r3
 8006ac0:	45b2      	cmp	sl, r6
 8006ac2:	d1ec      	bne.n	8006a9e <st_sssa8_ch_fully_connected+0x39a>
 8006ac4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006ac6:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8006aca:	920d      	str	r2, [sp, #52]	@ 0x34
 8006acc:	f01b 0203 	ands.w	r2, fp, #3
 8006ad0:	d014      	beq.n	8006afc <st_sssa8_ch_fully_connected+0x3f8>
 8006ad2:	3a01      	subs	r2, #1
 8006ad4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8006ad6:	f996 1000 	ldrsb.w	r1, [r6]
 8006ada:	8820      	ldrh	r0, [r4, #0]
 8006adc:	b292      	uxth	r2, r2
 8006ade:	fb10 3301 	smlabb	r3, r0, r1, r3
 8006ae2:	b15a      	cbz	r2, 8006afc <st_sssa8_ch_fully_connected+0x3f8>
 8006ae4:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8006ae8:	2a01      	cmp	r2, #1
 8006aea:	8860      	ldrh	r0, [r4, #2]
 8006aec:	fb10 3301 	smlabb	r3, r0, r1, r3
 8006af0:	d004      	beq.n	8006afc <st_sssa8_ch_fully_connected+0x3f8>
 8006af2:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8006af6:	88a1      	ldrh	r1, [r4, #4]
 8006af8:	fb11 3302 	smlabb	r3, r1, r2, r3
 8006afc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006afe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006b02:	2a15      	cmp	r2, #21
 8006b04:	dd69      	ble.n	8006bda <st_sssa8_ch_fully_connected+0x4d6>
 8006b06:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006b08:	1e95      	subs	r5, r2, #2
 8006b0a:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006b0c:	3a01      	subs	r2, #1
 8006b0e:	6804      	ldr	r4, [r0, #0]
 8006b10:	2001      	movs	r0, #1
 8006b12:	6809      	ldr	r1, [r1, #0]
 8006b14:	40a8      	lsls	r0, r5
 8006b16:	fb53 0301 	smmla	r3, r3, r1, r0
 8006b1a:	4113      	asrs	r3, r2
 8006b1c:	4423      	add	r3, r4
 8006b1e:	f303 0307 	ssat	r3, #8, r3
 8006b22:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8006b24:	7013      	strb	r3, [r2, #0]
 8006b26:	2000      	movs	r0, #0
 8006b28:	b017      	add	sp, #92	@ 0x5c
 8006b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2e:	42bc      	cmp	r4, r7
 8006b30:	f845 3c04 	str.w	r3, [r5, #-4]
 8006b34:	f105 0504 	add.w	r5, r5, #4
 8006b38:	f47f ae04 	bne.w	8006744 <st_sssa8_ch_fully_connected+0x40>
 8006b3c:	e615      	b.n	800676a <st_sssa8_ch_fully_connected+0x66>
 8006b3e:	2c00      	cmp	r4, #0
 8006b40:	dd1f      	ble.n	8006b82 <st_sssa8_ch_fully_connected+0x47e>
 8006b42:	9a05      	ldr	r2, [sp, #20]
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	9906      	ldr	r1, [sp, #24]
 8006b48:	6812      	ldr	r2, [r2, #0]
 8006b4a:	6809      	ldr	r1, [r1, #0]
 8006b4c:	fb53 1302 	smmla	r3, r3, r2, r1
 8006b50:	4123      	asrs	r3, r4
 8006b52:	f303 0307 	ssat	r3, #8, r3
 8006b56:	b25b      	sxtb	r3, r3
 8006b58:	e769      	b.n	8006a2e <st_sssa8_ch_fully_connected+0x32a>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	dd21      	ble.n	8006ba2 <st_sssa8_ch_fully_connected+0x49e>
 8006b5e:	462c      	mov	r4, r5
 8006b60:	9a05      	ldr	r2, [sp, #20]
 8006b62:	004d      	lsls	r5, r1, #1
 8006b64:	9906      	ldr	r1, [sp, #24]
 8006b66:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8006b6a:	3c02      	subs	r4, #2
 8006b6c:	f851 1c04 	ldr.w	r1, [r1, #-4]
 8006b70:	fb55 1502 	smmla	r5, r5, r2, r1
 8006b74:	4105      	asrs	r5, r0
 8006b76:	f305 0207 	ssat	r2, #8, r5
 8006b7a:	9904      	ldr	r1, [sp, #16]
 8006b7c:	b252      	sxtb	r2, r2
 8006b7e:	1e48      	subs	r0, r1, #1
 8006b80:	e73e      	b.n	8006a00 <st_sssa8_ch_fully_connected+0x2fc>
 8006b82:	f1c4 0401 	rsb	r4, r4, #1
 8006b86:	40a3      	lsls	r3, r4
 8006b88:	f303 031f 	ssat	r3, #32, r3
 8006b8c:	9a05      	ldr	r2, [sp, #20]
 8006b8e:	6812      	ldr	r2, [r2, #0]
 8006b90:	fb53 f212 	smmulr	r2, r3, r2
 8006b94:	9b06      	ldr	r3, [sp, #24]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f303 0307 	ssat	r3, #8, r3
 8006b9e:	b25b      	sxtb	r3, r3
 8006ba0:	e745      	b.n	8006a2e <st_sssa8_ch_fully_connected+0x32a>
 8006ba2:	f1c0 0001 	rsb	r0, r0, #1
 8006ba6:	1eac      	subs	r4, r5, #2
 8006ba8:	4081      	lsls	r1, r0
 8006baa:	f301 011f 	ssat	r1, #32, r1
 8006bae:	9a05      	ldr	r2, [sp, #20]
 8006bb0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8006bb4:	fb51 f212 	smmulr	r2, r1, r2
 8006bb8:	9906      	ldr	r1, [sp, #24]
 8006bba:	f851 1c04 	ldr.w	r1, [r1, #-4]
 8006bbe:	440a      	add	r2, r1
 8006bc0:	f302 0207 	ssat	r2, #8, r2
 8006bc4:	9904      	ldr	r1, [sp, #16]
 8006bc6:	b252      	sxtb	r2, r2
 8006bc8:	1e48      	subs	r0, r1, #1
 8006bca:	e719      	b.n	8006a00 <st_sssa8_ch_fully_connected+0x2fc>
 8006bcc:	46d6      	mov	lr, sl
 8006bce:	e6c2      	b.n	8006956 <st_sssa8_ch_fully_connected+0x252>
 8006bd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006bd2:	f04f 0800 	mov.w	r8, #0
 8006bd6:	9203      	str	r2, [sp, #12]
 8006bd8:	e683      	b.n	80068e2 <st_sssa8_ch_fully_connected+0x1de>
 8006bda:	2a00      	cmp	r2, #0
 8006bdc:	dd0f      	ble.n	8006bfe <st_sssa8_ch_fully_connected+0x4fa>
 8006bde:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006be4:	6809      	ldr	r1, [r1, #0]
 8006be6:	6800      	ldr	r0, [r0, #0]
 8006be8:	fb53 0301 	smmla	r3, r3, r1, r0
 8006bec:	4113      	asrs	r3, r2
 8006bee:	f303 0307 	ssat	r3, #8, r3
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8006bf6:	7013      	strb	r3, [r2, #0]
 8006bf8:	b017      	add	sp, #92	@ 0x5c
 8006bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfe:	f1c2 0201 	rsb	r2, r2, #1
 8006c02:	4093      	lsls	r3, r2
 8006c04:	f303 031f 	ssat	r3, #32, r3
 8006c08:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c0a:	6812      	ldr	r2, [r2, #0]
 8006c0c:	fb53 f312 	smmulr	r3, r3, r2
 8006c10:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c12:	6812      	ldr	r2, [r2, #0]
 8006c14:	4413      	add	r3, r2
 8006c16:	f303 0307 	ssat	r3, #8, r3
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8006c1e:	7013      	strb	r3, [r2, #0]
 8006c20:	b017      	add	sp, #92	@ 0x5c
 8006c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c26:	4656      	mov	r6, sl
 8006c28:	e750      	b.n	8006acc <st_sssa8_ch_fully_connected+0x3c8>
 8006c2a:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 8006c2e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006c30:	e59b      	b.n	800676a <st_sssa8_ch_fully_connected+0x66>
 8006c32:	bf00      	nop

08006c34 <st_int8_copy>:
 8006c34:	4288      	cmp	r0, r1
 8006c36:	d010      	beq.n	8006c5a <st_int8_copy+0x26>
 8006c38:	b17a      	cbz	r2, 8006c5a <st_int8_copy+0x26>
 8006c3a:	4288      	cmp	r0, r1
 8006c3c:	eb00 0302 	add.w	r3, r0, r2
 8006c40:	d20c      	bcs.n	8006c5c <st_int8_copy+0x28>
 8006c42:	428b      	cmp	r3, r1
 8006c44:	d90a      	bls.n	8006c5c <st_int8_copy+0x28>
 8006c46:	4283      	cmp	r3, r0
 8006c48:	440a      	add	r2, r1
 8006c4a:	d906      	bls.n	8006c5a <st_int8_copy+0x26>
 8006c4c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8006c50:	4283      	cmp	r3, r0
 8006c52:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8006c56:	d1f9      	bne.n	8006c4c <st_int8_copy+0x18>
 8006c58:	4770      	bx	lr
 8006c5a:	4770      	bx	lr
 8006c5c:	078b      	lsls	r3, r1, #30
 8006c5e:	d102      	bne.n	8006c66 <st_int8_copy+0x32>
 8006c60:	e008      	b.n	8006c74 <st_int8_copy+0x40>
 8006c62:	2a00      	cmp	r2, #0
 8006c64:	d04c      	beq.n	8006d00 <st_int8_copy+0xcc>
 8006c66:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8006c6a:	3a01      	subs	r2, #1
 8006c6c:	f801 3b01 	strb.w	r3, [r1], #1
 8006c70:	078b      	lsls	r3, r1, #30
 8006c72:	d1f6      	bne.n	8006c62 <st_int8_copy+0x2e>
 8006c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c78:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8006c7c:	d05d      	beq.n	8006d3a <st_int8_copy+0x106>
 8006c7e:	ea41 0300 	orr.w	r3, r1, r0
 8006c82:	075b      	lsls	r3, r3, #29
 8006c84:	d13d      	bne.n	8006d02 <st_int8_copy+0xce>
 8006c86:	f1be 0f01 	cmp.w	lr, #1
 8006c8a:	d03a      	beq.n	8006d02 <st_int8_copy+0xce>
 8006c8c:	f100 0310 	add.w	r3, r0, #16
 8006c90:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8006c94:	f101 0c10 	add.w	ip, r1, #16
 8006c98:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8006c9c:	3310      	adds	r3, #16
 8006c9e:	f10c 0c10 	add.w	ip, ip, #16
 8006ca2:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 8006ca6:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 8006caa:	4573      	cmp	r3, lr
 8006cac:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 8006cb0:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 8006cb4:	d1f2      	bne.n	8006c9c <st_int8_copy+0x68>
 8006cb6:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8006cba:	4421      	add	r1, r4
 8006cbc:	4420      	add	r0, r4
 8006cbe:	f002 0203 	and.w	r2, r2, #3
 8006cc2:	b16b      	cbz	r3, 8006ce0 <st_int8_copy+0xac>
 8006cc4:	6804      	ldr	r4, [r0, #0]
 8006cc6:	600c      	str	r4, [r1, #0]
 8006cc8:	1e5c      	subs	r4, r3, #1
 8006cca:	d005      	beq.n	8006cd8 <st_int8_copy+0xa4>
 8006ccc:	6845      	ldr	r5, [r0, #4]
 8006cce:	2c01      	cmp	r4, #1
 8006cd0:	604d      	str	r5, [r1, #4]
 8006cd2:	d001      	beq.n	8006cd8 <st_int8_copy+0xa4>
 8006cd4:	6884      	ldr	r4, [r0, #8]
 8006cd6:	608c      	str	r4, [r1, #8]
 8006cd8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006cdc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006ce0:	b162      	cbz	r2, 8006cfc <st_int8_copy+0xc8>
 8006ce2:	f990 3000 	ldrsb.w	r3, [r0]
 8006ce6:	3a01      	subs	r2, #1
 8006ce8:	700b      	strb	r3, [r1, #0]
 8006cea:	d007      	beq.n	8006cfc <st_int8_copy+0xc8>
 8006cec:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8006cf0:	2a01      	cmp	r2, #1
 8006cf2:	704b      	strb	r3, [r1, #1]
 8006cf4:	d002      	beq.n	8006cfc <st_int8_copy+0xc8>
 8006cf6:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8006cfa:	708b      	strb	r3, [r1, #2]
 8006cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d00:	4770      	bx	lr
 8006d02:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8006d06:	460b      	mov	r3, r1
 8006d08:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8006d0c:	4684      	mov	ip, r0
 8006d0e:	f8dc 8000 	ldr.w	r8, [ip]
 8006d12:	3310      	adds	r3, #16
 8006d14:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8006d18:	f10c 0c10 	add.w	ip, ip, #16
 8006d1c:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8006d20:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8006d24:	f843 8c10 	str.w	r8, [r3, #-16]
 8006d28:	f843 7c0c 	str.w	r7, [r3, #-12]
 8006d2c:	f843 6c08 	str.w	r6, [r3, #-8]
 8006d30:	f843 5c04 	str.w	r5, [r3, #-4]
 8006d34:	459e      	cmp	lr, r3
 8006d36:	d1ea      	bne.n	8006d0e <st_int8_copy+0xda>
 8006d38:	e7bd      	b.n	8006cb6 <st_int8_copy+0x82>
 8006d3a:	0893      	lsrs	r3, r2, #2
 8006d3c:	f002 0203 	and.w	r2, r2, #3
 8006d40:	e7bf      	b.n	8006cc2 <st_int8_copy+0x8e>
 8006d42:	bf00      	nop

08006d44 <st_int8_reordered_no_shift_zero>:
 8006d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d46:	0897      	lsrs	r7, r2, #2
 8006d48:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8006d4c:	d02d      	beq.n	8006daa <st_int8_reordered_no_shift_zero+0x66>
 8006d4e:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 8006d52:	468e      	mov	lr, r1
 8006d54:	f850 cb04 	ldr.w	ip, [r0], #4
 8006d58:	fa2f f49c 	sxtb16	r4, ip, ror #8
 8006d5c:	fad4 f403 	ssub16	r4, r4, r3
 8006d60:	fa2f fc8c 	sxtb16	ip, ip
 8006d64:	fadc fc03 	ssub16	ip, ip, r3
 8006d68:	42a8      	cmp	r0, r5
 8006d6a:	f8ce c000 	str.w	ip, [lr]
 8006d6e:	f8ce 4004 	str.w	r4, [lr, #4]
 8006d72:	f10e 0e08 	add.w	lr, lr, #8
 8006d76:	d1ed      	bne.n	8006d54 <st_int8_reordered_no_shift_zero+0x10>
 8006d78:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8006d7c:	f012 0203 	ands.w	r2, r2, #3
 8006d80:	d012      	beq.n	8006da8 <st_int8_reordered_no_shift_zero+0x64>
 8006d82:	f995 0000 	ldrsb.w	r0, [r5]
 8006d86:	b273      	sxtb	r3, r6
 8006d88:	3a01      	subs	r2, #1
 8006d8a:	eba0 0003 	sub.w	r0, r0, r3
 8006d8e:	8008      	strh	r0, [r1, #0]
 8006d90:	d00a      	beq.n	8006da8 <st_int8_reordered_no_shift_zero+0x64>
 8006d92:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8006d96:	2a01      	cmp	r2, #1
 8006d98:	eba0 0003 	sub.w	r0, r0, r3
 8006d9c:	8048      	strh	r0, [r1, #2]
 8006d9e:	d003      	beq.n	8006da8 <st_int8_reordered_no_shift_zero+0x64>
 8006da0:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	808b      	strh	r3, [r1, #4]
 8006da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006daa:	4605      	mov	r5, r0
 8006dac:	e7e6      	b.n	8006d7c <st_int8_reordered_no_shift_zero+0x38>
 8006dae:	bf00      	nop

08006db0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 8006db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db4:	b093      	sub	sp, #76	@ 0x4c
 8006db6:	f8bd 4074 	ldrh.w	r4, [sp, #116]	@ 0x74
 8006dba:	920a      	str	r2, [sp, #40]	@ 0x28
 8006dbc:	f8bd 2078 	ldrh.w	r2, [sp, #120]	@ 0x78
 8006dc0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006dc2:	920d      	str	r2, [sp, #52]	@ 0x34
 8006dc4:	0862      	lsrs	r2, r4, #1
 8006dc6:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 8006dca:	940c      	str	r4, [sp, #48]	@ 0x30
 8006dcc:	9104      	str	r1, [sp, #16]
 8006dce:	930e      	str	r3, [sp, #56]	@ 0x38
 8006dd0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 8184 	beq.w	80070e0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x330>
 8006dd8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8006dda:	b299      	uxth	r1, r3
 8006ddc:	4613      	mov	r3, r2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 80d7 	beq.w	8006f92 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e2>
 8006de4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006de6:	3b01      	subs	r3, #1
 8006de8:	0897      	lsrs	r7, r2, #2
 8006dea:	f002 0203 	and.w	r2, r2, #3
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	9201      	str	r2, [sp, #4]
 8006df2:	1c4a      	adds	r2, r1, #1
 8006df4:	0049      	lsls	r1, r1, #1
 8006df6:	9703      	str	r7, [sp, #12]
 8006df8:	9105      	str	r1, [sp, #20]
 8006dfa:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8006dfc:	4411      	add	r1, r2
 8006dfe:	9102      	str	r1, [sp, #8]
 8006e00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e02:	f101 0210 	add.w	r2, r1, #16
 8006e06:	f101 0c08 	add.w	ip, r1, #8
 8006e0a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e0e:	9a01      	ldr	r2, [sp, #4]
 8006e10:	9306      	str	r3, [sp, #24]
 8006e12:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8006e14:	f103 0e04 	add.w	lr, r3, #4
 8006e18:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e1a:	f103 0508 	add.w	r5, r3, #8
 8006e1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e20:	f103 0408 	add.w	r4, r3, #8
 8006e24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e26:	1c5e      	adds	r6, r3, #1
 8006e28:	013b      	lsls	r3, r7, #4
 8006e2a:	9307      	str	r3, [sp, #28]
 8006e2c:	9b04      	ldr	r3, [sp, #16]
 8006e2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e32:	9308      	str	r3, [sp, #32]
 8006e34:	0093      	lsls	r3, r2, #2
 8006e36:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e38:	f85c 3c08 	ldr.w	r3, [ip, #-8]
 8006e3c:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 8006e40:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e42:	9903      	ldr	r1, [sp, #12]
 8006e44:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e46:	9211      	str	r2, [sp, #68]	@ 0x44
 8006e48:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006e4a:	2900      	cmp	r1, #0
 8006e4c:	f000 8146 	beq.w	80070dc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32c>
 8006e50:	4688      	mov	r8, r1
 8006e52:	9f04      	ldr	r7, [sp, #16]
 8006e54:	4601      	mov	r1, r0
 8006e56:	f8d7 9000 	ldr.w	r9, [r7]
 8006e5a:	f8d1 a000 	ldr.w	sl, [r1]
 8006e5e:	fb2a 3a09 	smlad	sl, sl, r9, r3
 8006e62:	684b      	ldr	r3, [r1, #4]
 8006e64:	fb23 2909 	smlad	r9, r3, r9, r2
 8006e68:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8006e6c:	3110      	adds	r1, #16
 8006e6e:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8006e72:	3708      	adds	r7, #8
 8006e74:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8006e78:	fb23 a30b 	smlad	r3, r3, fp, sl
 8006e7c:	fb22 920b 	smlad	r2, r2, fp, r9
 8006e80:	f1b8 0801 	subs.w	r8, r8, #1
 8006e84:	d1e7      	bne.n	8006e56 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 8006e86:	9907      	ldr	r1, [sp, #28]
 8006e88:	4408      	add	r0, r1
 8006e8a:	9908      	ldr	r1, [sp, #32]
 8006e8c:	9f01      	ldr	r7, [sp, #4]
 8006e8e:	b31f      	cbz	r7, 8006ed8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x128>
 8006e90:	f9b1 7000 	ldrsh.w	r7, [r1]
 8006e94:	f8b0 8000 	ldrh.w	r8, [r0]
 8006e98:	fb17 3308 	smlabb	r3, r7, r8, r3
 8006e9c:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 8006ea0:	fb18 2207 	smlabb	r2, r8, r7, r2
 8006ea4:	9f01      	ldr	r7, [sp, #4]
 8006ea6:	2f01      	cmp	r7, #1
 8006ea8:	d014      	beq.n	8006ed4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 8006eaa:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 8006eae:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8006eb2:	fb17 3308 	smlabb	r3, r7, r8, r3
 8006eb6:	f8b0 8006 	ldrh.w	r8, [r0, #6]
 8006eba:	fb18 2207 	smlabb	r2, r8, r7, r2
 8006ebe:	9f01      	ldr	r7, [sp, #4]
 8006ec0:	2f02      	cmp	r7, #2
 8006ec2:	d007      	beq.n	8006ed4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 8006ec4:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8006ec8:	8907      	ldrh	r7, [r0, #8]
 8006eca:	fb17 3301 	smlabb	r3, r7, r1, r3
 8006ece:	8947      	ldrh	r7, [r0, #10]
 8006ed0:	fb11 2207 	smlabb	r2, r1, r7, r2
 8006ed4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ed6:	4408      	add	r0, r1
 8006ed8:	f93e 9c04 	ldrsh.w	r9, [lr, #-4]
 8006edc:	f1b9 0f15 	cmp.w	r9, #21
 8006ee0:	f340 80af 	ble.w	8007042 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x292>
 8006ee4:	f109 38ff 	add.w	r8, r9, #4294967295
 8006ee8:	f1a9 0702 	sub.w	r7, r9, #2
 8006eec:	2101      	movs	r1, #1
 8006eee:	fa01 f707 	lsl.w	r7, r1, r7
 8006ef2:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8006ef6:	fb53 7101 	smmla	r1, r3, r1, r7
 8006efa:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8006efe:	fa41 f108 	asr.w	r1, r1, r8
 8006f02:	1f27      	subs	r7, r4, #4
 8006f04:	f1a5 0804 	sub.w	r8, r5, #4
 8006f08:	440b      	add	r3, r1
 8006f0a:	f1ae 0102 	sub.w	r1, lr, #2
 8006f0e:	f303 0307 	ssat	r3, #8, r3
 8006f12:	b25b      	sxtb	r3, r3
 8006f14:	f806 3c01 	strb.w	r3, [r6, #-1]
 8006f18:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006f1c:	2915      	cmp	r1, #21
 8006f1e:	f340 80ab 	ble.w	8007078 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c8>
 8006f22:	f8d8 3000 	ldr.w	r3, [r8]
 8006f26:	f04f 0901 	mov.w	r9, #1
 8006f2a:	f8d7 8000 	ldr.w	r8, [r7]
 8006f2e:	1e8f      	subs	r7, r1, #2
 8006f30:	3901      	subs	r1, #1
 8006f32:	fa09 f707 	lsl.w	r7, r9, r7
 8006f36:	fb52 7303 	smmla	r3, r2, r3, r7
 8006f3a:	410b      	asrs	r3, r1
 8006f3c:	4443      	add	r3, r8
 8006f3e:	f303 0307 	ssat	r3, #8, r3
 8006f42:	b25b      	sxtb	r3, r3
 8006f44:	9a02      	ldr	r2, [sp, #8]
 8006f46:	f10c 0c08 	add.w	ip, ip, #8
 8006f4a:	f10e 0e04 	add.w	lr, lr, #4
 8006f4e:	3508      	adds	r5, #8
 8006f50:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f54:	3408      	adds	r4, #8
 8006f56:	9b05      	ldr	r3, [sp, #20]
 8006f58:	441a      	add	r2, r3
 8006f5a:	441e      	add	r6, r3
 8006f5c:	9b06      	ldr	r3, [sp, #24]
 8006f5e:	9202      	str	r2, [sp, #8]
 8006f60:	459c      	cmp	ip, r3
 8006f62:	f47f af69 	bne.w	8006e38 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x88>
 8006f66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f6a:	9905      	ldr	r1, [sp, #20]
 8006f6c:	fb03 2201 	mla	r2, r3, r1, r2
 8006f70:	9223      	str	r2, [sp, #140]	@ 0x8c
 8006f72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f74:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006f78:	920a      	str	r2, [sp, #40]	@ 0x28
 8006f7a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8006f7c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006f80:	921f      	str	r2, [sp, #124]	@ 0x7c
 8006f82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006f84:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006f88:	9220      	str	r2, [sp, #128]	@ 0x80
 8006f8a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006f8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f90:	9321      	str	r3, [sp, #132]	@ 0x84
 8006f92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f94:	07db      	lsls	r3, r3, #31
 8006f96:	d546      	bpl.n	8007026 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 8006f98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f9c:	0896      	lsrs	r6, r2, #2
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f000 80cd 	beq.w	800713e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x38e>
 8006fa4:	00f7      	lsls	r7, r6, #3
 8006fa6:	9904      	ldr	r1, [sp, #16]
 8006fa8:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8006fac:	6804      	ldr	r4, [r0, #0]
 8006fae:	3008      	adds	r0, #8
 8006fb0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006fb4:	680d      	ldr	r5, [r1, #0]
 8006fb6:	fb24 3305 	smlad	r3, r4, r5, r3
 8006fba:	684c      	ldr	r4, [r1, #4]
 8006fbc:	3108      	adds	r1, #8
 8006fbe:	fb22 3304 	smlad	r3, r2, r4, r3
 8006fc2:	42b0      	cmp	r0, r6
 8006fc4:	d1f2      	bne.n	8006fac <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1fc>
 8006fc6:	9a04      	ldr	r2, [sp, #16]
 8006fc8:	443a      	add	r2, r7
 8006fca:	9204      	str	r2, [sp, #16]
 8006fcc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006fce:	f012 0203 	ands.w	r2, r2, #3
 8006fd2:	d011      	beq.n	8006ff8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 8006fd4:	3a01      	subs	r2, #1
 8006fd6:	9c04      	ldr	r4, [sp, #16]
 8006fd8:	8831      	ldrh	r1, [r6, #0]
 8006fda:	8820      	ldrh	r0, [r4, #0]
 8006fdc:	b292      	uxth	r2, r2
 8006fde:	fb10 3301 	smlabb	r3, r0, r1, r3
 8006fe2:	b14a      	cbz	r2, 8006ff8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 8006fe4:	8860      	ldrh	r0, [r4, #2]
 8006fe6:	2a01      	cmp	r2, #1
 8006fe8:	8871      	ldrh	r1, [r6, #2]
 8006fea:	fb10 3301 	smlabb	r3, r0, r1, r3
 8006fee:	d003      	beq.n	8006ff8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 8006ff0:	88b1      	ldrh	r1, [r6, #4]
 8006ff2:	88a2      	ldrh	r2, [r4, #4]
 8006ff4:	fb11 3302 	smlabb	r3, r1, r2, r3
 8006ff8:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8006ffa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006ffe:	2a15      	cmp	r2, #21
 8007000:	dd79      	ble.n	80070f6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x346>
 8007002:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8007004:	1e95      	subs	r5, r2, #2
 8007006:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007008:	3a01      	subs	r2, #1
 800700a:	6804      	ldr	r4, [r0, #0]
 800700c:	2001      	movs	r0, #1
 800700e:	6809      	ldr	r1, [r1, #0]
 8007010:	40a8      	lsls	r0, r5
 8007012:	fb53 0301 	smmla	r3, r3, r1, r0
 8007016:	4113      	asrs	r3, r2
 8007018:	4423      	add	r3, r4
 800701a:	f303 0307 	ssat	r3, #8, r3
 800701e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007020:	f802 3b01 	strb.w	r3, [r2], #1
 8007024:	9223      	str	r2, [sp, #140]	@ 0x8c
 8007026:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007028:	2b00      	cmp	r3, #0
 800702a:	d05c      	beq.n	80070e6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x336>
 800702c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800702e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007030:	fb02 f303 	mul.w	r3, r2, r3
 8007034:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007036:	f1c3 0301 	rsb	r3, r3, #1
 800703a:	18d0      	adds	r0, r2, r3
 800703c:	b013      	add	sp, #76	@ 0x4c
 800703e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007042:	f1b9 0f00 	cmp.w	r9, #0
 8007046:	dd24      	ble.n	8007092 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e2>
 8007048:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8007052:	f1a5 0804 	sub.w	r8, r5, #4
 8007056:	fb53 7301 	smmla	r3, r3, r1, r7
 800705a:	1f27      	subs	r7, r4, #4
 800705c:	fa43 f309 	asr.w	r3, r3, r9
 8007060:	f1ae 0102 	sub.w	r1, lr, #2
 8007064:	f303 0307 	ssat	r3, #8, r3
 8007068:	b25b      	sxtb	r3, r3
 800706a:	f806 3c01 	strb.w	r3, [r6, #-1]
 800706e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007072:	2915      	cmp	r1, #21
 8007074:	f73f af55 	bgt.w	8006f22 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x172>
 8007078:	2900      	cmp	r1, #0
 800707a:	dd20      	ble.n	80070be <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x30e>
 800707c:	0053      	lsls	r3, r2, #1
 800707e:	683f      	ldr	r7, [r7, #0]
 8007080:	f8d8 2000 	ldr.w	r2, [r8]
 8007084:	fb53 7302 	smmla	r3, r3, r2, r7
 8007088:	410b      	asrs	r3, r1
 800708a:	f303 0307 	ssat	r3, #8, r3
 800708e:	b25b      	sxtb	r3, r3
 8007090:	e758      	b.n	8006f44 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x194>
 8007092:	f1c9 0701 	rsb	r7, r9, #1
 8007096:	f1ae 0102 	sub.w	r1, lr, #2
 800709a:	fa03 f707 	lsl.w	r7, r3, r7
 800709e:	f307 071f 	ssat	r7, #32, r7
 80070a2:	f1a5 0804 	sub.w	r8, r5, #4
 80070a6:	f855 3c08 	ldr.w	r3, [r5, #-8]
 80070aa:	fb57 f713 	smmulr	r7, r7, r3
 80070ae:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80070b2:	443b      	add	r3, r7
 80070b4:	1f27      	subs	r7, r4, #4
 80070b6:	f303 0307 	ssat	r3, #8, r3
 80070ba:	b25b      	sxtb	r3, r3
 80070bc:	e72a      	b.n	8006f14 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x164>
 80070be:	f1c1 0101 	rsb	r1, r1, #1
 80070c2:	408a      	lsls	r2, r1
 80070c4:	f302 021f 	ssat	r2, #32, r2
 80070c8:	f8d8 3000 	ldr.w	r3, [r8]
 80070cc:	fb52 f313 	smmulr	r3, r2, r3
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	4413      	add	r3, r2
 80070d4:	f303 0307 	ssat	r3, #8, r3
 80070d8:	b25b      	sxtb	r3, r3
 80070da:	e733      	b.n	8006f44 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x194>
 80070dc:	9904      	ldr	r1, [sp, #16]
 80070de:	e6d5      	b.n	8006e8c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xdc>
 80070e0:	2101      	movs	r1, #1
 80070e2:	4613      	mov	r3, r2
 80070e4:	e67b      	b.n	8006dde <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e>
 80070e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80070e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070ea:	1a9b      	subs	r3, r3, r2
 80070ec:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80070ee:	18d0      	adds	r0, r2, r3
 80070f0:	b013      	add	sp, #76	@ 0x4c
 80070f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	dd0e      	ble.n	8007118 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x368>
 80070fa:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8007100:	6809      	ldr	r1, [r1, #0]
 8007102:	6800      	ldr	r0, [r0, #0]
 8007104:	fb53 0301 	smmla	r3, r3, r1, r0
 8007108:	4113      	asrs	r3, r2
 800710a:	f303 0307 	ssat	r3, #8, r3
 800710e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007110:	f802 3b01 	strb.w	r3, [r2], #1
 8007114:	9223      	str	r2, [sp, #140]	@ 0x8c
 8007116:	e786      	b.n	8007026 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 8007118:	f1c2 0201 	rsb	r2, r2, #1
 800711c:	4093      	lsls	r3, r2
 800711e:	f303 031f 	ssat	r3, #32, r3
 8007122:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	fb53 f312 	smmulr	r3, r3, r2
 800712a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800712c:	6812      	ldr	r2, [r2, #0]
 800712e:	4413      	add	r3, r2
 8007130:	f303 0307 	ssat	r3, #8, r3
 8007134:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007136:	f802 3b01 	strb.w	r3, [r2], #1
 800713a:	9223      	str	r2, [sp, #140]	@ 0x8c
 800713c:	e773      	b.n	8007026 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 800713e:	4606      	mov	r6, r0
 8007140:	e744      	b.n	8006fcc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x21c>
 8007142:	bf00      	nop

08007144 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8007144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
 800714e:	9100      	str	r1, [sp, #0]
 8007150:	9203      	str	r2, [sp, #12]
 8007152:	2f00      	cmp	r7, #0
 8007154:	9305      	str	r3, [sp, #20]
 8007156:	bf18      	it	ne
 8007158:	2301      	movne	r3, #1
 800715a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800715c:	fb04 3303 	mla	r3, r4, r3, r3
 8007160:	9304      	str	r3, [sp, #16]
 8007162:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007164:	bf14      	ite	ne
 8007166:	462f      	movne	r7, r5
 8007168:	2701      	moveq	r7, #1
 800716a:	9701      	str	r7, [sp, #4]
 800716c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8007170:	085b      	lsrs	r3, r3, #1
 8007172:	f000 809f 	beq.w	80072b4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x170>
 8007176:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 800717a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800717c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007180:	9302      	str	r3, [sp, #8]
 8007182:	f8dd e048 	ldr.w	lr, [sp, #72]	@ 0x48
 8007186:	9f03      	ldr	r7, [sp, #12]
 8007188:	ea5f 089e 	movs.w	r8, lr, lsr #2
 800718c:	f8dd c000 	ldr.w	ip, [sp]
 8007190:	f857 6b04 	ldr.w	r6, [r7], #4
 8007194:	f857 3b04 	ldr.w	r3, [r7], #4
 8007198:	9703      	str	r7, [sp, #12]
 800719a:	461a      	mov	r2, r3
 800719c:	4631      	mov	r1, r6
 800719e:	d022      	beq.n	80071e6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa2>
 80071a0:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 80071a4:	f85c 9b04 	ldr.w	r9, [ip], #4
 80071a8:	f850 ab04 	ldr.w	sl, [r0], #4
 80071ac:	fb2a 6609 	smlad	r6, sl, r9, r6
 80071b0:	f850 5b04 	ldr.w	r5, [r0], #4
 80071b4:	fb2a 1107 	smlad	r1, sl, r7, r1
 80071b8:	f850 ab04 	ldr.w	sl, [r0], #4
 80071bc:	fb25 2207 	smlad	r2, r5, r7, r2
 80071c0:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 80071c4:	fb25 3309 	smlad	r3, r5, r9, r3
 80071c8:	f85c 9b04 	ldr.w	r9, [ip], #4
 80071cc:	fb2a 6609 	smlad	r6, sl, r9, r6
 80071d0:	fb2a 1107 	smlad	r1, sl, r7, r1
 80071d4:	f850 5b04 	ldr.w	r5, [r0], #4
 80071d8:	fb25 3309 	smlad	r3, r5, r9, r3
 80071dc:	f1b8 0801 	subs.w	r8, r8, #1
 80071e0:	fb25 2207 	smlad	r2, r5, r7, r2
 80071e4:	d1dc      	bne.n	80071a0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c>
 80071e6:	f00e 0703 	and.w	r7, lr, #3
 80071ea:	b18f      	cbz	r7, 8007210 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xcc>
 80071ec:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
 80071f0:	f93c ab02 	ldrsh.w	sl, [ip], #2
 80071f4:	f930 5b02 	ldrsh.w	r5, [r0], #2
 80071f8:	fb0a 6605 	mla	r6, sl, r5, r6
 80071fc:	f930 9b02 	ldrsh.w	r9, [r0], #2
 8007200:	fb09 330a 	mla	r3, r9, sl, r3
 8007204:	fb08 1105 	mla	r1, r8, r5, r1
 8007208:	3f01      	subs	r7, #1
 800720a:	fb09 2208 	mla	r2, r9, r8, r2
 800720e:	dced      	bgt.n	80071ec <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa8>
 8007210:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007214:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8007216:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 800721a:	f857 cb04 	ldr.w	ip, [r7], #4
 800721e:	f85b 5b04 	ldr.w	r5, [fp], #4
 8007222:	f1c4 0915 	rsb	r9, r4, #21
 8007226:	ea99 0904 	eors.w	r9, r9, r4
 800722a:	f340 80c8 	ble.w	80073be <st_sssa8_ch_nn_mat_mult_kernel_opt+0x27a>
 800722e:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8007232:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007236:	fb56 c605 	smmla	r6, r6, r5, ip
 800723a:	fb51 c105 	smmla	r1, r1, r5, ip
 800723e:	fa46 f604 	asr.w	r6, r6, r4
 8007242:	fa41 f104 	asr.w	r1, r1, r4
 8007246:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 800724a:	f857 cb04 	ldr.w	ip, [r7], #4
 800724e:	f85b 5b04 	ldr.w	r5, [fp], #4
 8007252:	f1c4 0915 	rsb	r9, r4, #21
 8007256:	ea99 0904 	eors.w	r9, r9, r4
 800725a:	f340 8099 	ble.w	8007390 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24c>
 800725e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007262:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007266:	fb53 c305 	smmla	r3, r3, r5, ip
 800726a:	fb52 c205 	smmla	r2, r2, r5, ip
 800726e:	fa43 f304 	asr.w	r3, r3, r4
 8007272:	fa42 f204 	asr.w	r2, r2, r4
 8007276:	f306 0607 	ssat	r6, #8, r6
 800727a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800727e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8007280:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007284:	7026      	strb	r6, [r4, #0]
 8007286:	44a0      	add	r8, r4
 8007288:	f301 0107 	ssat	r1, #8, r1
 800728c:	f888 1000 	strb.w	r1, [r8]
 8007290:	f303 0307 	ssat	r3, #8, r3
 8007294:	f804 3009 	strb.w	r3, [r4, r9]
 8007298:	f302 0207 	ssat	r2, #8, r2
 800729c:	f808 2009 	strb.w	r2, [r8, r9]
 80072a0:	eb04 0249 	add.w	r2, r4, r9, lsl #1
 80072a4:	9217      	str	r2, [sp, #92]	@ 0x5c
 80072a6:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
 80072aa:	9c02      	ldr	r4, [sp, #8]
 80072ac:	9715      	str	r7, [sp, #84]	@ 0x54
 80072ae:	45a2      	cmp	sl, r4
 80072b0:	f47f af67 	bne.w	8007182 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e>
 80072b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80072b6:	f013 0301 	ands.w	r3, r3, #1
 80072ba:	d054      	beq.n	8007366 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x222>
 80072bc:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	f8dd c000 	ldr.w	ip, [sp]
 80072c6:	6819      	ldr	r1, [r3, #0]
 80072c8:	ea5f 079e 	movs.w	r7, lr, lsr #2
 80072cc:	eb0c 044e 	add.w	r4, ip, lr, lsl #1
 80072d0:	460e      	mov	r6, r1
 80072d2:	d015      	beq.n	8007300 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 80072d4:	f85c 501e 	ldr.w	r5, [ip, lr, lsl #1]
 80072d8:	f85c 8b04 	ldr.w	r8, [ip], #4
 80072dc:	f850 ab04 	ldr.w	sl, [r0], #4
 80072e0:	f850 3b04 	ldr.w	r3, [r0], #4
 80072e4:	fb2a 6608 	smlad	r6, sl, r8, r6
 80072e8:	fb2a 1105 	smlad	r1, sl, r5, r1
 80072ec:	f85c a01e 	ldr.w	sl, [ip, lr, lsl #1]
 80072f0:	f85c 8b04 	ldr.w	r8, [ip], #4
 80072f4:	fb23 6608 	smlad	r6, r3, r8, r6
 80072f8:	fb23 110a 	smlad	r1, r3, sl, r1
 80072fc:	3f01      	subs	r7, #1
 80072fe:	d1e9      	bne.n	80072d4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x190>
 8007300:	f01e 0703 	ands.w	r7, lr, #3
 8007304:	d00b      	beq.n	800731e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 8007306:	f83c 301e 	ldrh.w	r3, [ip, lr, lsl #1]
 800730a:	f83c 9b02 	ldrh.w	r9, [ip], #2
 800730e:	f930 ab02 	ldrsh.w	sl, [r0], #2
 8007312:	fb19 660a 	smlabb	r6, r9, sl, r6
 8007316:	3f01      	subs	r7, #1
 8007318:	fb13 110a 	smlabb	r1, r3, sl, r1
 800731c:	dcf3      	bgt.n	8007306 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c2>
 800731e:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007322:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8007324:	f9ba 4000 	ldrsh.w	r4, [sl]
 8007328:	f8d7 c000 	ldr.w	ip, [r7]
 800732c:	f8db 5000 	ldr.w	r5, [fp]
 8007330:	f1c4 0915 	rsb	r9, r4, #21
 8007334:	ea99 0904 	eors.w	r9, r9, r4
 8007338:	dd58      	ble.n	80073ec <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2a8>
 800733a:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800733e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007342:	fb56 c605 	smmla	r6, r6, r5, ip
 8007346:	fb51 c105 	smmla	r1, r1, r5, ip
 800734a:	fa46 f604 	asr.w	r6, r6, r4
 800734e:	fa41 f104 	asr.w	r1, r1, r4
 8007352:	f306 0607 	ssat	r6, #8, r6
 8007356:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007358:	9c04      	ldr	r4, [sp, #16]
 800735a:	7016      	strb	r6, [r2, #0]
 800735c:	f301 0107 	ssat	r1, #8, r1
 8007360:	5511      	strb	r1, [r2, r4]
 8007362:	9b01      	ldr	r3, [sp, #4]
 8007364:	441a      	add	r2, r3
 8007366:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007368:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800736a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800736c:	b133      	cbz	r3, 800737c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 800736e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007370:	f104 0002 	add.w	r0, r4, #2
 8007374:	fb03 0011 	mls	r0, r3, r1, r0
 8007378:	4410      	add	r0, r2
 800737a:	e006      	b.n	800738a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x246>
 800737c:	eba2 0001 	sub.w	r0, r2, r1
 8007380:	9a05      	ldr	r2, [sp, #20]
 8007382:	f104 0402 	add.w	r4, r4, #2
 8007386:	fb02 0004 	mla	r0, r2, r4, r0
 800738a:	b006      	add	sp, #24
 800738c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007390:	2c00      	cmp	r4, #0
 8007392:	dd42      	ble.n	800741a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 8007394:	f04f 0901 	mov.w	r9, #1
 8007398:	fa09 f904 	lsl.w	r9, r9, r4
 800739c:	ea4f 09a9 	mov.w	r9, r9, asr #2
 80073a0:	fb53 9305 	smmla	r3, r3, r5, r9
 80073a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80073a8:	fa43 f304 	asr.w	r3, r3, r4
 80073ac:	4463      	add	r3, ip
 80073ae:	fb52 9205 	smmla	r2, r2, r5, r9
 80073b2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80073b6:	fa42 f204 	asr.w	r2, r2, r4
 80073ba:	4462      	add	r2, ip
 80073bc:	e75b      	b.n	8007276 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 80073be:	2c00      	cmp	r4, #0
 80073c0:	dd3c      	ble.n	800743c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2f8>
 80073c2:	f04f 0901 	mov.w	r9, #1
 80073c6:	fa09 f904 	lsl.w	r9, r9, r4
 80073ca:	ea4f 09a9 	mov.w	r9, r9, asr #2
 80073ce:	fb56 9605 	smmla	r6, r6, r5, r9
 80073d2:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80073d6:	fa46 f604 	asr.w	r6, r6, r4
 80073da:	4466      	add	r6, ip
 80073dc:	fb51 9105 	smmla	r1, r1, r5, r9
 80073e0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80073e4:	fa41 f104 	asr.w	r1, r1, r4
 80073e8:	4461      	add	r1, ip
 80073ea:	e72c      	b.n	8007246 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 80073ec:	2c00      	cmp	r4, #0
 80073ee:	dd36      	ble.n	800745e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31a>
 80073f0:	f04f 0901 	mov.w	r9, #1
 80073f4:	fa09 f904 	lsl.w	r9, r9, r4
 80073f8:	ea4f 09a9 	mov.w	r9, r9, asr #2
 80073fc:	fb56 9605 	smmla	r6, r6, r5, r9
 8007400:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8007404:	fa46 f604 	asr.w	r6, r6, r4
 8007408:	4466      	add	r6, ip
 800740a:	fb51 9105 	smmla	r1, r1, r5, r9
 800740e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007412:	fa41 f104 	asr.w	r1, r1, r4
 8007416:	4461      	add	r1, ip
 8007418:	e79b      	b.n	8007352 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>
 800741a:	f1c4 0901 	rsb	r9, r4, #1
 800741e:	fa03 f309 	lsl.w	r3, r3, r9
 8007422:	f303 031f 	ssat	r3, #32, r3
 8007426:	fb53 f315 	smmulr	r3, r3, r5
 800742a:	fa02 f209 	lsl.w	r2, r2, r9
 800742e:	f302 021f 	ssat	r2, #32, r2
 8007432:	fb52 f215 	smmulr	r2, r2, r5
 8007436:	4463      	add	r3, ip
 8007438:	4462      	add	r2, ip
 800743a:	e71c      	b.n	8007276 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 800743c:	f1c4 0901 	rsb	r9, r4, #1
 8007440:	fa06 f609 	lsl.w	r6, r6, r9
 8007444:	f306 061f 	ssat	r6, #32, r6
 8007448:	fb56 f615 	smmulr	r6, r6, r5
 800744c:	fa01 f109 	lsl.w	r1, r1, r9
 8007450:	f301 011f 	ssat	r1, #32, r1
 8007454:	fb51 f115 	smmulr	r1, r1, r5
 8007458:	4466      	add	r6, ip
 800745a:	4461      	add	r1, ip
 800745c:	e6f3      	b.n	8007246 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 800745e:	f1c4 0901 	rsb	r9, r4, #1
 8007462:	fa06 f609 	lsl.w	r6, r6, r9
 8007466:	f306 061f 	ssat	r6, #32, r6
 800746a:	fb56 f615 	smmulr	r6, r6, r5
 800746e:	fa01 f109 	lsl.w	r1, r1, r9
 8007472:	f301 011f 	ssat	r1, #32, r1
 8007476:	fb51 f115 	smmulr	r1, r1, r5
 800747a:	4466      	add	r6, ip
 800747c:	4461      	add	r1, ip
 800747e:	e768      	b.n	8007352 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>

08007480 <ai_array_to_buffer_fmt>:
 8007480:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8007484:	2b02      	cmp	r3, #2
 8007486:	d053      	beq.n	8007530 <ai_array_to_buffer_fmt+0xb0>
 8007488:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800748c:	4a2b      	ldr	r2, [pc, #172]	@ (800753c <ai_array_to_buffer_fmt+0xbc>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d010      	beq.n	80074b4 <ai_array_to_buffer_fmt+0x34>
 8007492:	dc21      	bgt.n	80074d8 <ai_array_to_buffer_fmt+0x58>
 8007494:	4a2a      	ldr	r2, [pc, #168]	@ (8007540 <ai_array_to_buffer_fmt+0xc0>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d00c      	beq.n	80074b4 <ai_array_to_buffer_fmt+0x34>
 800749a:	dd0f      	ble.n	80074bc <ai_array_to_buffer_fmt+0x3c>
 800749c:	4a29      	ldr	r2, [pc, #164]	@ (8007544 <ai_array_to_buffer_fmt+0xc4>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d008      	beq.n	80074b4 <ai_array_to_buffer_fmt+0x34>
 80074a2:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d004      	beq.n	80074b4 <ai_array_to_buffer_fmt+0x34>
 80074aa:	4a27      	ldr	r2, [pc, #156]	@ (8007548 <ai_array_to_buffer_fmt+0xc8>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	bf0c      	ite	eq
 80074b0:	4613      	moveq	r3, r2
 80074b2:	2340      	movne	r3, #64	@ 0x40
 80074b4:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80074b8:	4318      	orrs	r0, r3
 80074ba:	4770      	bx	lr
 80074bc:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d0f7      	beq.n	80074b4 <ai_array_to_buffer_fmt+0x34>
 80074c4:	dd2a      	ble.n	800751c <ai_array_to_buffer_fmt+0x9c>
 80074c6:	4a21      	ldr	r2, [pc, #132]	@ (800754c <ai_array_to_buffer_fmt+0xcc>)
 80074c8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80074cc:	4293      	cmp	r3, r2
 80074ce:	bf0c      	ite	eq
 80074d0:	4613      	moveq	r3, r2
 80074d2:	2340      	movne	r3, #64	@ 0x40
 80074d4:	4318      	orrs	r0, r3
 80074d6:	4770      	bx	lr
 80074d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007550 <ai_array_to_buffer_fmt+0xd0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d0ea      	beq.n	80074b4 <ai_array_to_buffer_fmt+0x34>
 80074de:	dd0f      	ble.n	8007500 <ai_array_to_buffer_fmt+0x80>
 80074e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007554 <ai_array_to_buffer_fmt+0xd4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d0e6      	beq.n	80074b4 <ai_array_to_buffer_fmt+0x34>
 80074e6:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d0e2      	beq.n	80074b4 <ai_array_to_buffer_fmt+0x34>
 80074ee:	4a1a      	ldr	r2, [pc, #104]	@ (8007558 <ai_array_to_buffer_fmt+0xd8>)
 80074f0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80074f4:	4293      	cmp	r3, r2
 80074f6:	bf0c      	ite	eq
 80074f8:	4613      	moveq	r3, r2
 80074fa:	2340      	movne	r3, #64	@ 0x40
 80074fc:	4318      	orrs	r0, r3
 80074fe:	4770      	bx	lr
 8007500:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8007504:	4293      	cmp	r3, r2
 8007506:	d0d5      	beq.n	80074b4 <ai_array_to_buffer_fmt+0x34>
 8007508:	3207      	adds	r2, #7
 800750a:	4293      	cmp	r3, r2
 800750c:	d0d2      	beq.n	80074b4 <ai_array_to_buffer_fmt+0x34>
 800750e:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8007512:	4293      	cmp	r3, r2
 8007514:	bf0c      	ite	eq
 8007516:	4613      	moveq	r3, r2
 8007518:	2340      	movne	r3, #64	@ 0x40
 800751a:	e7cb      	b.n	80074b4 <ai_array_to_buffer_fmt+0x34>
 800751c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8007520:	4293      	cmp	r3, r2
 8007522:	d0c7      	beq.n	80074b4 <ai_array_to_buffer_fmt+0x34>
 8007524:	3280      	adds	r2, #128	@ 0x80
 8007526:	4293      	cmp	r3, r2
 8007528:	bf0c      	ite	eq
 800752a:	4613      	moveq	r3, r2
 800752c:	2340      	movne	r3, #64	@ 0x40
 800752e:	e7c1      	b.n	80074b4 <ai_array_to_buffer_fmt+0x34>
 8007530:	4b0a      	ldr	r3, [pc, #40]	@ (800755c <ai_array_to_buffer_fmt+0xdc>)
 8007532:	4003      	ands	r3, r0
 8007534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007538:	e7bc      	b.n	80074b4 <ai_array_to_buffer_fmt+0x34>
 800753a:	bf00      	nop
 800753c:	00840040 	.word	0x00840040
 8007540:	00040840 	.word	0x00040840
 8007544:	00041040 	.word	0x00041040
 8007548:	0004084f 	.word	0x0004084f
 800754c:	00040447 	.word	0x00040447
 8007550:	00840840 	.word	0x00840840
 8007554:	00841040 	.word	0x00841040
 8007558:	0084084f 	.word	0x0084084f
 800755c:	00803fff 	.word	0x00803fff

08007560 <ai_array_get_byte_size>:
 8007560:	b319      	cbz	r1, 80075aa <ai_array_get_byte_size+0x4a>
 8007562:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8007566:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800756a:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800756e:	11c0      	asrs	r0, r0, #7
 8007570:	fb01 f303 	mul.w	r3, r1, r3
 8007574:	2a04      	cmp	r2, #4
 8007576:	f103 0307 	add.w	r3, r3, #7
 800757a:	f023 0307 	bic.w	r3, r3, #7
 800757e:	fa23 f10c 	lsr.w	r1, r3, ip
 8007582:	d00b      	beq.n	800759c <ai_array_get_byte_size+0x3c>
 8007584:	2a08      	cmp	r2, #8
 8007586:	d002      	beq.n	800758e <ai_array_get_byte_size+0x2e>
 8007588:	3107      	adds	r1, #7
 800758a:	08c8      	lsrs	r0, r1, #3
 800758c:	4770      	bx	lr
 800758e:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8007592:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8007596:	3107      	adds	r1, #7
 8007598:	08c8      	lsrs	r0, r1, #3
 800759a:	4770      	bx	lr
 800759c:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80075a0:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80075a4:	3107      	adds	r1, #7
 80075a6:	08c8      	lsrs	r0, r1, #3
 80075a8:	4770      	bx	lr
 80075aa:	4608      	mov	r0, r1
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop

080075b0 <ai_array_get_data_byte_size>:
 80075b0:	b169      	cbz	r1, 80075ce <ai_array_get_data_byte_size+0x1e>
 80075b2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80075b6:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80075ba:	fb03 f101 	mul.w	r1, r3, r1
 80075be:	1dcb      	adds	r3, r1, #7
 80075c0:	f023 0307 	bic.w	r3, r3, #7
 80075c4:	fa23 f000 	lsr.w	r0, r3, r0
 80075c8:	3007      	adds	r0, #7
 80075ca:	08c0      	lsrs	r0, r0, #3
 80075cc:	4770      	bx	lr
 80075ce:	4608      	mov	r0, r1
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop

080075d4 <ai_version_get>:
 80075d4:	0212      	lsls	r2, r2, #8
 80075d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80075da:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80075de:	4770      	bx	lr

080075e0 <get_tensor_byte_size>:
 80075e0:	b430      	push	{r4, r5}
 80075e2:	6985      	ldr	r5, [r0, #24]
 80075e4:	68c4      	ldr	r4, [r0, #12]
 80075e6:	6941      	ldr	r1, [r0, #20]
 80075e8:	4b06      	ldr	r3, [pc, #24]	@ (8007604 <get_tensor_byte_size+0x24>)
 80075ea:	6828      	ldr	r0, [r5, #0]
 80075ec:	4a06      	ldr	r2, [pc, #24]	@ (8007608 <get_tensor_byte_size+0x28>)
 80075ee:	4003      	ands	r3, r0
 80075f0:	68c9      	ldr	r1, [r1, #12]
 80075f2:	68e0      	ldr	r0, [r4, #12]
 80075f4:	4293      	cmp	r3, r2
 80075f6:	fb01 f000 	mul.w	r0, r1, r0
 80075fa:	d101      	bne.n	8007600 <get_tensor_byte_size+0x20>
 80075fc:	3007      	adds	r0, #7
 80075fe:	08c0      	lsrs	r0, r0, #3
 8007600:	bc30      	pop	{r4, r5}
 8007602:	4770      	bx	lr
 8007604:	017fffff 	.word	0x017fffff
 8007608:	000400c0 	.word	0x000400c0

0800760c <core_tensor_clone>:
 800760c:	680b      	ldr	r3, [r1, #0]
 800760e:	6882      	ldr	r2, [r0, #8]
 8007610:	6003      	str	r3, [r0, #0]
 8007612:	684b      	ldr	r3, [r1, #4]
 8007614:	6043      	str	r3, [r0, #4]
 8007616:	698b      	ldr	r3, [r1, #24]
 8007618:	6183      	str	r3, [r0, #24]
 800761a:	688b      	ldr	r3, [r1, #8]
 800761c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8007620:	f363 221f 	bfi	r2, r3, #8, #24
 8007624:	b410      	push	{r4}
 8007626:	6082      	str	r2, [r0, #8]
 8007628:	b15b      	cbz	r3, 8007642 <core_tensor_clone+0x36>
 800762a:	2300      	movs	r3, #0
 800762c:	68cc      	ldr	r4, [r1, #12]
 800762e:	68c2      	ldr	r2, [r0, #12]
 8007630:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8007634:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8007638:	3301      	adds	r3, #1
 800763a:	6882      	ldr	r2, [r0, #8]
 800763c:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8007640:	d3f4      	bcc.n	800762c <core_tensor_clone+0x20>
 8007642:	690b      	ldr	r3, [r1, #16]
 8007644:	6902      	ldr	r2, [r0, #16]
 8007646:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800764a:	f363 221f 	bfi	r2, r3, #8, #24
 800764e:	6102      	str	r2, [r0, #16]
 8007650:	b15b      	cbz	r3, 800766a <core_tensor_clone+0x5e>
 8007652:	2300      	movs	r3, #0
 8007654:	694c      	ldr	r4, [r1, #20]
 8007656:	6942      	ldr	r2, [r0, #20]
 8007658:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800765c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8007660:	3301      	adds	r3, #1
 8007662:	6902      	ldr	r2, [r0, #16]
 8007664:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8007668:	d3f4      	bcc.n	8007654 <core_tensor_clone+0x48>
 800766a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800766e:	4770      	bx	lr

08007670 <core_array_clone>:
 8007670:	4684      	mov	ip, r0
 8007672:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8007674:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop

0800767c <_lite_kernel_nl_softmax_is8os8>:
 800767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007680:	b09b      	sub	sp, #108	@ 0x6c
 8007682:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8007686:	4411      	add	r1, r2
 8007688:	fb03 f202 	mul.w	r2, r3, r2
 800768c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800768e:	9118      	str	r1, [sp, #96]	@ 0x60
 8007690:	f513 7f80 	cmn.w	r3, #256	@ 0x100
 8007694:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8007696:	9015      	str	r0, [sp, #84]	@ 0x54
 8007698:	bfac      	ite	ge
 800769a:	425b      	negge	r3, r3
 800769c:	f44f 7380 	movlt.w	r3, #256	@ 0x100
 80076a0:	fb01 f303 	mul.w	r3, r1, r3
 80076a4:	429a      	cmp	r2, r3
 80076a6:	f200 83ed 	bhi.w	8007e84 <_lite_kernel_nl_softmax_is8os8+0x808>
 80076aa:	9b03      	ldr	r3, [sp, #12]
 80076ac:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80076ae:	4293      	cmp	r3, r2
 80076b0:	f080 8365 	bcs.w	8007d7e <_lite_kernel_nl_softmax_is8os8+0x702>
 80076b4:	4618      	mov	r0, r3
 80076b6:	9904      	ldr	r1, [sp, #16]
 80076b8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80076ba:	f8df a3b4 	ldr.w	sl, [pc, #948]	@ 8007a70 <_lite_kernel_nl_softmax_is8os8+0x3f4>
 80076be:	1f1a      	subs	r2, r3, #4
 80076c0:	1e4b      	subs	r3, r1, #1
 80076c2:	18c3      	adds	r3, r0, r3
 80076c4:	9217      	str	r2, [sp, #92]	@ 0x5c
 80076c6:	9316      	str	r3, [sp, #88]	@ 0x58
 80076c8:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 80076cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80076ce:	9b03      	ldr	r3, [sp, #12]
 80076d0:	9904      	ldr	r1, [sp, #16]
 80076d2:	f993 2000 	ldrsb.w	r2, [r3]
 80076d6:	2901      	cmp	r1, #1
 80076d8:	9214      	str	r2, [sp, #80]	@ 0x50
 80076da:	f240 839d 	bls.w	8007e18 <_lite_kernel_nl_softmax_is8os8+0x79c>
 80076de:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80076e0:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
 80076e4:	428a      	cmp	r2, r1
 80076e6:	bfb8      	it	lt
 80076e8:	460a      	movlt	r2, r1
 80076ea:	4298      	cmp	r0, r3
 80076ec:	d1f8      	bne.n	80076e0 <_lite_kernel_nl_softmax_is8os8+0x64>
 80076ee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80076f0:	9214      	str	r2, [sp, #80]	@ 0x50
 80076f2:	4413      	add	r3, r2
 80076f4:	9306      	str	r3, [sp, #24]
 80076f6:	9b03      	ldr	r3, [sp, #12]
 80076f8:	f103 3bff 	add.w	fp, r3, #4294967295
 80076fc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076fe:	9301      	str	r3, [sp, #4]
 8007700:	2300      	movs	r3, #0
 8007702:	46de      	mov	lr, fp
 8007704:	9305      	str	r3, [sp, #20]
 8007706:	e105      	b.n	8007914 <_lite_kernel_nl_softmax_is8os8+0x298>
 8007708:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800770a:	1a9b      	subs	r3, r3, r2
 800770c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800770e:	4093      	lsls	r3, r2
 8007710:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007712:	405a      	eors	r2, r3
 8007714:	0fd2      	lsrs	r2, r2, #31
 8007716:	2a00      	cmp	r2, #0
 8007718:	bf0b      	itete	eq
 800771a:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 800771e:	4651      	movne	r1, sl
 8007720:	2200      	moveq	r2, #0
 8007722:	f04f 32ff 	movne.w	r2, #4294967295
 8007726:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800772a:	f040 80fd 	bne.w	8007928 <_lite_kernel_nl_softmax_is8os8+0x2ac>
 800772e:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8007730:	4298      	cmp	r0, r3
 8007732:	f040 80f9 	bne.w	8007928 <_lite_kernel_nl_softmax_is8os8+0x2ac>
 8007736:	4bc2      	ldr	r3, [pc, #776]	@ (8007a40 <_lite_kernel_nl_softmax_is8os8+0x3c4>)
 8007738:	2200      	movs	r2, #0
 800773a:	f04f 35ff 	mov.w	r5, #4294967295
 800773e:	4fc1      	ldr	r7, [pc, #772]	@ (8007a44 <_lite_kernel_nl_softmax_is8os8+0x3c8>)
 8007740:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007742:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8007746:	4bc0      	ldr	r3, [pc, #768]	@ (8007a48 <_lite_kernel_nl_softmax_is8os8+0x3cc>)
 8007748:	4694      	mov	ip, r2
 800774a:	462e      	mov	r6, r5
 800774c:	46ab      	mov	fp, r5
 800774e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007750:	46a8      	mov	r8, r5
 8007752:	4bbe      	ldr	r3, [pc, #760]	@ (8007a4c <_lite_kernel_nl_softmax_is8os8+0x3d0>)
 8007754:	4691      	mov	r9, r2
 8007756:	2001      	movs	r0, #1
 8007758:	9210      	str	r2, [sp, #64]	@ 0x40
 800775a:	e9cd 520d 	strd	r5, r2, [sp, #52]	@ 0x34
 800775e:	e9cd 550b 	strd	r5, r5, [sp, #44]	@ 0x2c
 8007762:	e9cd 5209 	strd	r5, r2, [sp, #36]	@ 0x24
 8007766:	e9cd 2211 	strd	r2, r2, [sp, #68]	@ 0x44
 800776a:	e9cd 2207 	strd	r2, r2, [sp, #28]
 800776e:	4282      	cmp	r2, r0
 8007770:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8007772:	bfc8      	it	gt
 8007774:	3101      	addgt	r1, #1
 8007776:	f1bc 0f00 	cmp.w	ip, #0
 800777a:	bf0b      	itete	eq
 800777c:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 8007780:	4652      	movne	r2, sl
 8007782:	f04f 0c00 	moveq.w	ip, #0
 8007786:	f04f 3cff 	movne.w	ip, #4294967295
 800778a:	1882      	adds	r2, r0, r2
 800778c:	eb43 0c0c 	adc.w	ip, r3, ip
 8007790:	f1bc 0f00 	cmp.w	ip, #0
 8007794:	da05      	bge.n	80077a2 <_lite_kernel_nl_softmax_is8os8+0x126>
 8007796:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800779a:	18d3      	adds	r3, r2, r3
 800779c:	461a      	mov	r2, r3
 800779e:	f14c 0c00 	adc.w	ip, ip, #0
 80077a2:	0fd2      	lsrs	r2, r2, #31
 80077a4:	48aa      	ldr	r0, [pc, #680]	@ (8007a50 <_lite_kernel_nl_softmax_is8os8+0x3d4>)
 80077a6:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 80077aa:	440a      	add	r2, r1
 80077ac:	0fd3      	lsrs	r3, r2, #31
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bf0b      	itete	eq
 80077b2:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 80077b6:	4653      	movne	r3, sl
 80077b8:	2100      	moveq	r1, #0
 80077ba:	f04f 31ff 	movne.w	r1, #4294967295
 80077be:	fbc2 3100 	smlal	r3, r1, r2, r0
 80077c2:	2900      	cmp	r1, #0
 80077c4:	da05      	bge.n	80077d2 <_lite_kernel_nl_softmax_is8os8+0x156>
 80077c6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80077ca:	189a      	adds	r2, r3, r2
 80077cc:	4613      	mov	r3, r2
 80077ce:	f141 0100 	adc.w	r1, r1, #0
 80077d2:	0fdb      	lsrs	r3, r3, #31
 80077d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80077d6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80077da:	441a      	add	r2, r3
 80077dc:	07d4      	lsls	r4, r2, #31
 80077de:	ea4f 0362 	mov.w	r3, r2, asr #1
 80077e2:	d502      	bpl.n	80077ea <_lite_kernel_nl_softmax_is8os8+0x16e>
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	bfa8      	it	ge
 80077e8:	3301      	addge	r3, #1
 80077ea:	443b      	add	r3, r7
 80077ec:	4899      	ldr	r0, [pc, #612]	@ (8007a54 <_lite_kernel_nl_softmax_is8os8+0x3d8>)
 80077ee:	0fda      	lsrs	r2, r3, #31
 80077f0:	2a00      	cmp	r2, #0
 80077f2:	bf0b      	itete	eq
 80077f4:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 80077f8:	4652      	movne	r2, sl
 80077fa:	2100      	moveq	r1, #0
 80077fc:	f04f 31ff 	movne.w	r1, #4294967295
 8007800:	fbc3 2100 	smlal	r2, r1, r3, r0
 8007804:	2900      	cmp	r1, #0
 8007806:	da05      	bge.n	8007814 <_lite_kernel_nl_softmax_is8os8+0x198>
 8007808:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800780c:	18d3      	adds	r3, r2, r3
 800780e:	461a      	mov	r2, r3
 8007810:	f141 0100 	adc.w	r1, r1, #0
 8007814:	0fd2      	lsrs	r2, r2, #31
 8007816:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800781a:	488f      	ldr	r0, [pc, #572]	@ (8007a58 <_lite_kernel_nl_softmax_is8os8+0x3dc>)
 800781c:	f04f 0cf2 	mov.w	ip, #242	@ 0xf2
 8007820:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8007824:	2100      	movs	r1, #0
 8007826:	461f      	mov	r7, r3
 8007828:	f102 42e2 	add.w	r2, r2, #1895825408	@ 0x71000000
 800782c:	460c      	mov	r4, r1
 800782e:	f5a2 2225 	sub.w	r2, r2, #675840	@ 0xa5000
 8007832:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
 8007836:	fbc2 7400 	smlal	r7, r4, r2, r0
 800783a:	0fff      	lsrs	r7, r7, #31
 800783c:	ea08 0802 	and.w	r8, r8, r2
 8007840:	4886      	ldr	r0, [pc, #536]	@ (8007a5c <_lite_kernel_nl_softmax_is8os8+0x3e0>)
 8007842:	ea47 0744 	orr.w	r7, r7, r4, lsl #1
 8007846:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007848:	461a      	mov	r2, r3
 800784a:	403c      	ands	r4, r7
 800784c:	460f      	mov	r7, r1
 800784e:	ea88 0404 	eor.w	r4, r8, r4
 8007852:	fbc4 2700 	smlal	r2, r7, r4, r0
 8007856:	0fd2      	lsrs	r2, r2, #31
 8007858:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800785a:	4026      	ands	r6, r4
 800785c:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 8007860:	460c      	mov	r4, r1
 8007862:	4010      	ands	r0, r2
 8007864:	461a      	mov	r2, r3
 8007866:	4070      	eors	r0, r6
 8007868:	4e7d      	ldr	r6, [pc, #500]	@ (8007a60 <_lite_kernel_nl_softmax_is8os8+0x3e4>)
 800786a:	fbc0 2406 	smlal	r2, r4, r0, r6
 800786e:	0fd2      	lsrs	r2, r2, #31
 8007870:	ea0b 0b00 	and.w	fp, fp, r0
 8007874:	4e7b      	ldr	r6, [pc, #492]	@ (8007a64 <_lite_kernel_nl_softmax_is8os8+0x3e8>)
 8007876:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800787a:	460c      	mov	r4, r1
 800787c:	ea09 0902 	and.w	r9, r9, r2
 8007880:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007882:	ea8b 0909 	eor.w	r9, fp, r9
 8007886:	ea02 0009 	and.w	r0, r2, r9
 800788a:	461a      	mov	r2, r3
 800788c:	fbc9 2406 	smlal	r2, r4, r9, r6
 8007890:	0fd2      	lsrs	r2, r2, #31
 8007892:	4e75      	ldr	r6, [pc, #468]	@ (8007a68 <_lite_kernel_nl_softmax_is8os8+0x3ec>)
 8007894:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8007898:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800789a:	4014      	ands	r4, r2
 800789c:	4622      	mov	r2, r4
 800789e:	460c      	mov	r4, r1
 80078a0:	4042      	eors	r2, r0
 80078a2:	4618      	mov	r0, r3
 80078a4:	fbc2 0406 	smlal	r0, r4, r2, r6
 80078a8:	0fc0      	lsrs	r0, r0, #31
 80078aa:	4015      	ands	r5, r2
 80078ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80078ae:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
 80078b2:	4e6e      	ldr	r6, [pc, #440]	@ (8007a6c <_lite_kernel_nl_softmax_is8os8+0x3f0>)
 80078b4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80078b6:	4002      	ands	r2, r0
 80078b8:	4618      	mov	r0, r3
 80078ba:	406a      	eors	r2, r5
 80078bc:	460d      	mov	r5, r1
 80078be:	fbc2 0506 	smlal	r0, r5, r2, r6
 80078c2:	0fc0      	lsrs	r0, r0, #31
 80078c4:	4014      	ands	r4, r2
 80078c6:	9a08      	ldr	r2, [sp, #32]
 80078c8:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 80078cc:	4002      	ands	r2, r0
 80078ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078d0:	4062      	eors	r2, r4
 80078d2:	fbc2 310c 	smlal	r3, r1, r2, ip
 80078d6:	0fdb      	lsrs	r3, r3, #31
 80078d8:	4010      	ands	r0, r2
 80078da:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80078de:	9907      	ldr	r1, [sp, #28]
 80078e0:	4602      	mov	r2, r0
 80078e2:	4019      	ands	r1, r3
 80078e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078e6:	404a      	eors	r2, r1
 80078e8:	9905      	ldr	r1, [sp, #20]
 80078ea:	401a      	ands	r2, r3
 80078ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80078ee:	405a      	eors	r2, r3
 80078f0:	1313      	asrs	r3, r2, #12
 80078f2:	0510      	lsls	r0, r2, #20
 80078f4:	bf48      	it	mi
 80078f6:	3301      	addmi	r3, #1
 80078f8:	4419      	add	r1, r3
 80078fa:	9105      	str	r1, [sp, #20]
 80078fc:	9b01      	ldr	r3, [sp, #4]
 80078fe:	f843 2f04 	str.w	r2, [r3, #4]!
 8007902:	9301      	str	r3, [sp, #4]
 8007904:	9b02      	ldr	r3, [sp, #8]
 8007906:	9a03      	ldr	r2, [sp, #12]
 8007908:	3302      	adds	r3, #2
 800790a:	1a9b      	subs	r3, r3, r2
 800790c:	9a04      	ldr	r2, [sp, #16]
 800790e:	429a      	cmp	r2, r3
 8007910:	f240 80b0 	bls.w	8007a74 <_lite_kernel_nl_softmax_is8os8+0x3f8>
 8007914:	9a06      	ldr	r2, [sp, #24]
 8007916:	f8cd e008 	str.w	lr, [sp, #8]
 800791a:	f91e 3f01 	ldrsb.w	r3, [lr, #1]!
 800791e:	429a      	cmp	r2, r3
 8007920:	f77f aef2 	ble.w	8007708 <_lite_kernel_nl_softmax_is8os8+0x8c>
 8007924:	2200      	movs	r2, #0
 8007926:	e7e9      	b.n	80078fc <_lite_kernel_nl_softmax_is8os8+0x280>
 8007928:	9826      	ldr	r0, [sp, #152]	@ 0x98
 800792a:	fbc3 1200 	smlal	r1, r2, r3, r0
 800792e:	2a00      	cmp	r2, #0
 8007930:	da05      	bge.n	800793e <_lite_kernel_nl_softmax_is8os8+0x2c2>
 8007932:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8007936:	18cb      	adds	r3, r1, r3
 8007938:	4619      	mov	r1, r3
 800793a:	f142 0200 	adc.w	r2, r2, #0
 800793e:	0fc9      	lsrs	r1, r1, #31
 8007940:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007944:	2500      	movs	r5, #0
 8007946:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
 800794a:	f041 467f 	orr.w	r6, r1, #4278190080	@ 0xff000000
 800794e:	0172      	lsls	r2, r6, #5
 8007950:	1a76      	subs	r6, r6, r1
 8007952:	f102 5780 	add.w	r7, r2, #268435456	@ 0x10000000
 8007956:	fbc7 3507 	smlal	r3, r5, r7, r7
 800795a:	2d00      	cmp	r5, #0
 800795c:	da05      	bge.n	800796a <_lite_kernel_nl_softmax_is8os8+0x2ee>
 800795e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8007962:	189a      	adds	r2, r3, r2
 8007964:	4613      	mov	r3, r2
 8007966:	f145 0500 	adc.w	r5, r5, #0
 800796a:	0fdb      	lsrs	r3, r3, #31
 800796c:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8007970:	17ed      	asrs	r5, r5, #31
 8007972:	fba3 2003 	umull	r2, r0, r3, r3
 8007976:	fb03 f405 	mul.w	r4, r3, r5
 800797a:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 800797e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007980:	eb40 0044 	adc.w	r0, r0, r4, lsl #1
 8007984:	2800      	cmp	r0, #0
 8007986:	da05      	bge.n	8007994 <_lite_kernel_nl_softmax_is8os8+0x318>
 8007988:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800798c:	1914      	adds	r4, r2, r4
 800798e:	4622      	mov	r2, r4
 8007990:	f140 0000 	adc.w	r0, r0, #0
 8007994:	0fd2      	lsrs	r2, r2, #31
 8007996:	fb07 f505 	mul.w	r5, r7, r5
 800799a:	ea83 0c07 	eor.w	ip, r3, r7
 800799e:	fab1 f181 	clz	r1, r1
 80079a2:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80079a6:	f3c6 7b00 	ubfx	fp, r6, #28, #1
 80079aa:	17f8      	asrs	r0, r7, #31
 80079ac:	f3c6 7940 	ubfx	r9, r6, #29, #1
 80079b0:	0949      	lsrs	r1, r1, #5
 80079b2:	f3c6 6880 	ubfx	r8, r6, #26, #1
 80079b6:	fb03 5500 	mla	r5, r3, r0, r5
 80079ba:	f3c6 6400 	ubfx	r4, r6, #24, #1
 80079be:	f3c6 6040 	ubfx	r0, r6, #25, #1
 80079c2:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 80079c6:	9507      	str	r5, [sp, #28]
 80079c8:	f3c6 7580 	ubfx	r5, r6, #30, #1
 80079cc:	9509      	str	r5, [sp, #36]	@ 0x24
 80079ce:	fba7 5303 	umull	r5, r3, r7, r3
 80079d2:	9513      	str	r5, [sp, #76]	@ 0x4c
 80079d4:	9d07      	ldr	r5, [sp, #28]
 80079d6:	442b      	add	r3, r5
 80079d8:	424d      	negs	r5, r1
 80079da:	3901      	subs	r1, #1
 80079dc:	910d      	str	r1, [sp, #52]	@ 0x34
 80079de:	f025 4100 	bic.w	r1, r5, #2147483648	@ 0x80000000
 80079e2:	f10b 35ff 	add.w	r5, fp, #4294967295
 80079e6:	9110      	str	r1, [sp, #64]	@ 0x40
 80079e8:	f3c6 61c0 	ubfx	r1, r6, #27, #1
 80079ec:	f346 66c0 	sbfx	r6, r6, #27, #1
 80079f0:	3901      	subs	r1, #1
 80079f2:	960e      	str	r6, [sp, #56]	@ 0x38
 80079f4:	f1cb 0600 	rsb	r6, fp, #0
 80079f8:	f108 3bff 	add.w	fp, r8, #4294967295
 80079fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80079fe:	9611      	str	r6, [sp, #68]	@ 0x44
 8007a00:	f109 36ff 	add.w	r6, r9, #4294967295
 8007a04:	1091      	asrs	r1, r2, #2
 8007a06:	f002 0203 	and.w	r2, r2, #3
 8007a0a:	960c      	str	r6, [sp, #48]	@ 0x30
 8007a0c:	f1c9 0600 	rsb	r6, r9, #0
 8007a10:	f1c8 0900 	rsb	r9, r8, #0
 8007a14:	f104 38ff 	add.w	r8, r4, #4294967295
 8007a18:	9608      	str	r6, [sp, #32]
 8007a1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8007a1e:	f1c0 0000 	rsb	r0, r0, #0
 8007a22:	9012      	str	r0, [sp, #72]	@ 0x48
 8007a24:	f1c4 0000 	rsb	r0, r4, #0
 8007a28:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8007a2a:	900a      	str	r0, [sp, #40]	@ 0x28
 8007a2c:	f104 30ff 	add.w	r0, r4, #4294967295
 8007a30:	9009      	str	r0, [sp, #36]	@ 0x24
 8007a32:	f1c4 0000 	rsb	r0, r4, #0
 8007a36:	9007      	str	r0, [sp, #28]
 8007a38:	bf54      	ite	pl
 8007a3a:	2001      	movpl	r0, #1
 8007a3c:	2002      	movmi	r0, #2
 8007a3e:	e696      	b.n	800776e <_lite_kernel_nl_softmax_is8os8+0xf2>
 8007a40:	01fffff8 	.word	0x01fffff8
 8007a44:	0fffffe0 	.word	0x0fffffe0
 8007a48:	40000100 	.word	0x40000100
 8007a4c:	001fffff 	.word	0x001fffff
 8007a50:	2aaaaaab 	.word	0x2aaaaaab
 8007a54:	70f5a894 	.word	0x70f5a894
 8007a58:	63afbe7b 	.word	0x63afbe7b
 8007a5c:	4da2cbf2 	.word	0x4da2cbf2
 8007a60:	2f16ac6c 	.word	0x2f16ac6c
 8007a64:	1152aaa4 	.word	0x1152aaa4
 8007a68:	02582ab7 	.word	0x02582ab7
 8007a6c:	000afe11 	.word	0x000afe11
 8007a70:	c0000001 	.word	0xc0000001
 8007a74:	9b05      	ldr	r3, [sp, #20]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 81d1 	beq.w	8007e1e <_lite_kernel_nl_softmax_is8os8+0x7a2>
 8007a7c:	fab3 f983 	clz	r9, r3
 8007a80:	fa03 f309 	lsl.w	r3, r3, r9
 8007a84:	f1c9 0823 	rsb	r8, r9, #35	@ 0x23
 8007a88:	f103 4200 	add.w	r2, r3, #2147483648	@ 0x80000000
 8007a8c:	17d4      	asrs	r4, r2, #31
 8007a8e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007a92:	bf08      	it	eq
 8007a94:	2b00      	cmpeq	r3, #0
 8007a96:	f000 81c6 	beq.w	8007e26 <_lite_kernel_nl_softmax_is8os8+0x7aa>
 8007a9a:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8007a9e:	4bc2      	ldr	r3, [pc, #776]	@ (8007da8 <_lite_kernel_nl_softmax_is8os8+0x72c>)
 8007aa0:	f144 0400 	adc.w	r4, r4, #0
 8007aa4:	0852      	lsrs	r2, r2, #1
 8007aa6:	ea42 72c4 	orr.w	r2, r2, r4, lsl #31
 8007aaa:	1064      	asrs	r4, r4, #1
 8007aac:	4251      	negs	r1, r2
 8007aae:	4616      	mov	r6, r2
 8007ab0:	fb03 1104 	mla	r1, r3, r4, r1
 8007ab4:	fba2 5303 	umull	r5, r3, r2, r3
 8007ab8:	eb15 050a 	adds.w	r5, r5, sl
 8007abc:	440b      	add	r3, r1
 8007abe:	f163 0300 	sbc.w	r3, r3, #0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	da05      	bge.n	8007ad2 <_lite_kernel_nl_softmax_is8os8+0x456>
 8007ac6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007aca:	1869      	adds	r1, r5, r1
 8007acc:	460d      	mov	r5, r1
 8007ace:	f143 0300 	adc.w	r3, r3, #0
 8007ad2:	0fed      	lsrs	r5, r5, #31
 8007ad4:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
 8007ad8:	f105 375a 	add.w	r7, r5, #1515870810	@ 0x5a5a5a5a
 8007adc:	17f8      	asrs	r0, r7, #31
 8007ade:	fba2 1c07 	umull	r1, ip, r2, r7
 8007ae2:	463b      	mov	r3, r7
 8007ae4:	fb02 fe00 	mul.w	lr, r2, r0
 8007ae8:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
 8007aec:	fb07 ee04 	mla	lr, r7, r4, lr
 8007af0:	eb4e 0c0c 	adc.w	ip, lr, ip
 8007af4:	f1bc 0f00 	cmp.w	ip, #0
 8007af8:	da06      	bge.n	8007b08 <_lite_kernel_nl_softmax_is8os8+0x48c>
 8007afa:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8007afe:	eb11 0e0e 	adds.w	lr, r1, lr
 8007b02:	4671      	mov	r1, lr
 8007b04:	f14c 0c00 	adc.w	ip, ip, #0
 8007b08:	0fc9      	lsrs	r1, r1, #31
 8007b0a:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
 8007b0e:	f1c1 5100 	rsb	r1, r1, #536870912	@ 0x20000000
 8007b12:	ea81 0c07 	eor.w	ip, r1, r7
 8007b16:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8007b1a:	f1bc 0f00 	cmp.w	ip, #0
 8007b1e:	bf0b      	itete	eq
 8007b20:	f04f 4c80 	moveq.w	ip, #1073741824	@ 0x40000000
 8007b24:	46d4      	movne	ip, sl
 8007b26:	f04f 0b00 	moveq.w	fp, #0
 8007b2a:	f04f 3bff 	movne.w	fp, #4294967295
 8007b2e:	fb01 f000 	mul.w	r0, r1, r0
 8007b32:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 8007b36:	fb03 000e 	mla	r0, r3, lr, r0
 8007b3a:	fba1 3103 	umull	r3, r1, r1, r3
 8007b3e:	eb13 030c 	adds.w	r3, r3, ip
 8007b42:	4408      	add	r0, r1
 8007b44:	eb40 000b 	adc.w	r0, r0, fp
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	da05      	bge.n	8007b58 <_lite_kernel_nl_softmax_is8os8+0x4dc>
 8007b4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007b50:	1859      	adds	r1, r3, r1
 8007b52:	460b      	mov	r3, r1
 8007b54:	f140 0000 	adc.w	r0, r0, #0
 8007b58:	0fdb      	lsrs	r3, r3, #31
 8007b5a:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8007b5e:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8007b62:	f340 8123 	ble.w	8007dac <_lite_kernel_nl_softmax_is8os8+0x730>
 8007b66:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8007b6a:	ea86 0301 	eor.w	r3, r6, r1
 8007b6e:	17c8      	asrs	r0, r1, #31
 8007b70:	0fdb      	lsrs	r3, r3, #31
 8007b72:	fb02 f500 	mul.w	r5, r2, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	fb01 5504 	mla	r5, r1, r4, r5
 8007b7c:	fba2 3e01 	umull	r3, lr, r2, r1
 8007b80:	bf0b      	itete	eq
 8007b82:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 8007b86:	4657      	movne	r7, sl
 8007b88:	f04f 0c00 	moveq.w	ip, #0
 8007b8c:	f04f 3cff 	movne.w	ip, #4294967295
 8007b90:	4475      	add	r5, lr
 8007b92:	19db      	adds	r3, r3, r7
 8007b94:	eb45 050c 	adc.w	r5, r5, ip
 8007b98:	2d00      	cmp	r5, #0
 8007b9a:	da05      	bge.n	8007ba8 <_lite_kernel_nl_softmax_is8os8+0x52c>
 8007b9c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8007ba0:	19df      	adds	r7, r3, r7
 8007ba2:	463b      	mov	r3, r7
 8007ba4:	f145 0500 	adc.w	r5, r5, #0
 8007ba8:	0fdb      	lsrs	r3, r3, #31
 8007baa:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8007bae:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8007bb2:	ea81 0503 	eor.w	r5, r1, r3
 8007bb6:	0fed      	lsrs	r5, r5, #31
 8007bb8:	2d00      	cmp	r5, #0
 8007bba:	bf0b      	itete	eq
 8007bbc:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 8007bc0:	4655      	movne	r5, sl
 8007bc2:	2700      	moveq	r7, #0
 8007bc4:	f04f 37ff 	movne.w	r7, #4294967295
 8007bc8:	fb03 f000 	mul.w	r0, r3, r0
 8007bcc:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 8007bd0:	fb01 000c 	mla	r0, r1, ip, r0
 8007bd4:	fba3 3c01 	umull	r3, ip, r3, r1
 8007bd8:	195b      	adds	r3, r3, r5
 8007bda:	4460      	add	r0, ip
 8007bdc:	eb40 0007 	adc.w	r0, r0, r7
 8007be0:	2800      	cmp	r0, #0
 8007be2:	da05      	bge.n	8007bf0 <_lite_kernel_nl_softmax_is8os8+0x574>
 8007be4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8007be8:	195d      	adds	r5, r3, r5
 8007bea:	462b      	mov	r3, r5
 8007bec:	f140 0000 	adc.w	r0, r0, #0
 8007bf0:	0fdb      	lsrs	r3, r3, #31
 8007bf2:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8007bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bfa:	f2c0 8105 	blt.w	8007e08 <_lite_kernel_nl_softmax_is8os8+0x78c>
 8007bfe:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8007c02:	440b      	add	r3, r1
 8007c04:	405e      	eors	r6, r3
 8007c06:	fb03 f404 	mul.w	r4, r3, r4
 8007c0a:	17d8      	asrs	r0, r3, #31
 8007c0c:	0ff6      	lsrs	r6, r6, #31
 8007c0e:	fb02 4000 	mla	r0, r2, r0, r4
 8007c12:	2e00      	cmp	r6, #0
 8007c14:	fba3 2102 	umull	r2, r1, r3, r2
 8007c18:	4408      	add	r0, r1
 8007c1a:	bf0b      	itete	eq
 8007c1c:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 8007c20:	4651      	movne	r1, sl
 8007c22:	2400      	moveq	r4, #0
 8007c24:	f04f 34ff 	movne.w	r4, #4294967295
 8007c28:	1851      	adds	r1, r2, r1
 8007c2a:	eb40 0404 	adc.w	r4, r0, r4
 8007c2e:	2c00      	cmp	r4, #0
 8007c30:	da05      	bge.n	8007c3e <_lite_kernel_nl_softmax_is8os8+0x5c2>
 8007c32:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8007c36:	188a      	adds	r2, r1, r2
 8007c38:	4611      	mov	r1, r2
 8007c3a:	f144 0400 	adc.w	r4, r4, #0
 8007c3e:	0fc9      	lsrs	r1, r1, #31
 8007c40:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 8007c44:	f1c1 5200 	rsb	r2, r1, #536870912	@ 0x20000000
 8007c48:	ea83 0102 	eor.w	r1, r3, r2
 8007c4c:	0fc9      	lsrs	r1, r1, #31
 8007c4e:	2900      	cmp	r1, #0
 8007c50:	bf0b      	itete	eq
 8007c52:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 8007c56:	4651      	movne	r1, sl
 8007c58:	2000      	moveq	r0, #0
 8007c5a:	f04f 30ff 	movne.w	r0, #4294967295
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d107      	bne.n	8007c72 <_lite_kernel_nl_softmax_is8os8+0x5f6>
 8007c62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c66:	d104      	bne.n	8007c72 <_lite_kernel_nl_softmax_is8os8+0x5f6>
 8007c68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c6c:	4419      	add	r1, r3
 8007c6e:	0049      	lsls	r1, r1, #1
 8007c70:	e016      	b.n	8007ca0 <_lite_kernel_nl_softmax_is8os8+0x624>
 8007c72:	fbc3 1002 	smlal	r1, r0, r3, r2
 8007c76:	2800      	cmp	r0, #0
 8007c78:	da05      	bge.n	8007c86 <_lite_kernel_nl_softmax_is8os8+0x60a>
 8007c7a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8007c7e:	188a      	adds	r2, r1, r2
 8007c80:	4611      	mov	r1, r2
 8007c82:	f140 0000 	adc.w	r0, r0, #0
 8007c86:	0fc9      	lsrs	r1, r1, #31
 8007c88:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
 8007c8c:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8007c90:	db7d      	blt.n	8007d8e <_lite_kernel_nl_softmax_is8os8+0x712>
 8007c92:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8007c96:	1899      	adds	r1, r3, r2
 8007c98:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8007c9c:	dbe7      	blt.n	8007c6e <_lite_kernel_nl_softmax_is8os8+0x5f2>
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	f1b8 0f1f 	cmp.w	r8, #31
 8007ca4:	dd04      	ble.n	8007cb0 <_lite_kernel_nl_softmax_is8os8+0x634>
 8007ca6:	f1c9 0304 	rsb	r3, r9, #4
 8007caa:	f04f 081f 	mov.w	r8, #31
 8007cae:	4119      	asrs	r1, r3
 8007cb0:	9b04      	ldr	r3, [sp, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d053      	beq.n	8007d5e <_lite_kernel_nl_softmax_is8os8+0x6e2>
 8007cb6:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8007cba:	2501      	movs	r5, #1
 8007cbc:	f1a1 4c00 	sub.w	ip, r1, #2147483648	@ 0x80000000
 8007cc0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8007cc2:	fa46 f308 	asr.w	r3, r6, r8
 8007cc6:	fa05 f508 	lsl.w	r5, r5, r8
 8007cca:	fabc fc8c 	clz	ip, ip
 8007cce:	3d01      	subs	r5, #1
 8007cd0:	9301      	str	r3, [sp, #4]
 8007cd2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8007cd6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007cd8:	ea05 0906 	and.w	r9, r5, r6
 8007cdc:	106f      	asrs	r7, r5, #1
 8007cde:	1e5c      	subs	r4, r3, #1
 8007ce0:	4663      	mov	r3, ip
 8007ce2:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ce6:	46ac      	mov	ip, r5
 8007ce8:	f107 0e01 	add.w	lr, r7, #1
 8007cec:	f8dd 9064 	ldr.w	r9, [sp, #100]	@ 0x64
 8007cf0:	461d      	mov	r5, r3
 8007cf2:	e00c      	b.n	8007d0e <_lite_kernel_nl_softmax_is8os8+0x692>
 8007cf4:	b1dd      	cbz	r5, 8007d2e <_lite_kernel_nl_softmax_is8os8+0x6b2>
 8007cf6:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8007cfa:	4297      	cmp	r7, r2
 8007cfc:	da00      	bge.n	8007d00 <_lite_kernel_nl_softmax_is8os8+0x684>
 8007cfe:	3301      	adds	r3, #1
 8007d00:	2bfe      	cmp	r3, #254	@ 0xfe
 8007d02:	dd3f      	ble.n	8007d84 <_lite_kernel_nl_softmax_is8os8+0x708>
 8007d04:	237f      	movs	r3, #127	@ 0x7f
 8007d06:	4548      	cmp	r0, r9
 8007d08:	f804 3f01 	strb.w	r3, [r4, #1]!
 8007d0c:	d027      	beq.n	8007d5e <_lite_kernel_nl_softmax_is8os8+0x6e2>
 8007d0e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8007d12:	ea81 0302 	eor.w	r3, r1, r2
 8007d16:	0fdb      	lsrs	r3, r3, #31
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	bf0b      	itete	eq
 8007d1c:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8007d20:	4653      	movne	r3, sl
 8007d22:	f04f 0b00 	moveq.w	fp, #0
 8007d26:	f04f 3bff 	movne.w	fp, #4294967295
 8007d2a:	4291      	cmp	r1, r2
 8007d2c:	d0e2      	beq.n	8007cf4 <_lite_kernel_nl_softmax_is8os8+0x678>
 8007d2e:	fbc1 3b02 	smlal	r3, fp, r1, r2
 8007d32:	f1bb 0f00 	cmp.w	fp, #0
 8007d36:	da02      	bge.n	8007d3e <_lite_kernel_nl_softmax_is8os8+0x6c2>
 8007d38:	199b      	adds	r3, r3, r6
 8007d3a:	f14b 0b00 	adc.w	fp, fp, #0
 8007d3e:	0fdb      	lsrs	r3, r3, #31
 8007d40:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 8007d44:	ea0c 0203 	and.w	r2, ip, r3
 8007d48:	fa53 f308 	asrs.w	r3, r3, r8
 8007d4c:	d5d5      	bpl.n	8007cfa <_lite_kernel_nl_softmax_is8os8+0x67e>
 8007d4e:	4596      	cmp	lr, r2
 8007d50:	dbd5      	blt.n	8007cfe <_lite_kernel_nl_softmax_is8os8+0x682>
 8007d52:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8007d56:	4548      	cmp	r0, r9
 8007d58:	f804 3f01 	strb.w	r3, [r4, #1]!
 8007d5c:	d1d7      	bne.n	8007d0e <_lite_kernel_nl_softmax_is8os8+0x692>
 8007d5e:	9b03      	ldr	r3, [sp, #12]
 8007d60:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007d62:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8007d64:	4413      	add	r3, r2
 8007d66:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007d68:	440a      	add	r2, r1
 8007d6a:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8007d6c:	9303      	str	r3, [sp, #12]
 8007d6e:	9215      	str	r2, [sp, #84]	@ 0x54
 8007d70:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007d72:	440a      	add	r2, r1
 8007d74:	9216      	str	r2, [sp, #88]	@ 0x58
 8007d76:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	f63f aca8 	bhi.w	80076ce <_lite_kernel_nl_softmax_is8os8+0x52>
 8007d7e:	b01b      	add	sp, #108	@ 0x6c
 8007d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	dde4      	ble.n	8007d52 <_lite_kernel_nl_softmax_is8os8+0x6d6>
 8007d88:	3b80      	subs	r3, #128	@ 0x80
 8007d8a:	b25b      	sxtb	r3, r3
 8007d8c:	e7bb      	b.n	8007d06 <_lite_kernel_nl_softmax_is8os8+0x68a>
 8007d8e:	f1b1 4f60 	cmp.w	r1, #3758096384	@ 0xe0000000
 8007d92:	f300 8457 	bgt.w	8008644 <_lite_kernel_nl_softmax_is8os8+0xfc8>
 8007d96:	f103 4200 	add.w	r2, r3, #2147483648	@ 0x80000000
 8007d9a:	0059      	lsls	r1, r3, #1
 8007d9c:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 8007da0:	bfd8      	it	le
 8007da2:	f04f 4100 	movle.w	r1, #2147483648	@ 0x80000000
 8007da6:	e77b      	b.n	8007ca0 <_lite_kernel_nl_softmax_is8os8+0x624>
 8007da8:	c3c3c3c4 	.word	0xc3c3c3c4
 8007dac:	4933      	ldr	r1, [pc, #204]	@ (8007e7c <_lite_kernel_nl_softmax_is8os8+0x800>)
 8007dae:	4429      	add	r1, r5
 8007db0:	ea96 0f01 	teq	r6, r1
 8007db4:	d545      	bpl.n	8007e42 <_lite_kernel_nl_softmax_is8os8+0x7c6>
 8007db6:	17cb      	asrs	r3, r1, #31
 8007db8:	fb01 f004 	mul.w	r0, r1, r4
 8007dbc:	fb02 0003 	mla	r0, r2, r3, r0
 8007dc0:	fba1 3502 	umull	r3, r5, r1, r2
 8007dc4:	eb13 030a 	adds.w	r3, r3, sl
 8007dc8:	4405      	add	r5, r0
 8007dca:	f165 0500 	sbc.w	r5, r5, #0
 8007dce:	2d00      	cmp	r5, #0
 8007dd0:	da05      	bge.n	8007dde <_lite_kernel_nl_softmax_is8os8+0x762>
 8007dd2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8007dd6:	1818      	adds	r0, r3, r0
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f145 0500 	adc.w	r5, r5, #0
 8007dde:	0fdb      	lsrs	r3, r3, #31
 8007de0:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8007de4:	f04f 35ff 	mov.w	r5, #4294967295
 8007de8:	f1c3 5000 	rsb	r0, r3, #536870912	@ 0x20000000
 8007dec:	4653      	mov	r3, sl
 8007dee:	fbc1 3500 	smlal	r3, r5, r1, r0
 8007df2:	2d00      	cmp	r5, #0
 8007df4:	da05      	bge.n	8007e02 <_lite_kernel_nl_softmax_is8os8+0x786>
 8007df6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8007dfa:	1818      	adds	r0, r3, r0
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	f145 0500 	adc.w	r5, r5, #0
 8007e02:	0fdb      	lsrs	r3, r3, #31
 8007e04:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8007e08:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8007e0c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007e10:	bfd8      	it	le
 8007e12:	f04f 4300 	movle.w	r3, #2147483648	@ 0x80000000
 8007e16:	e6f4      	b.n	8007c02 <_lite_kernel_nl_softmax_is8os8+0x586>
 8007e18:	2900      	cmp	r1, #0
 8007e1a:	f040 8427 	bne.w	800866c <_lite_kernel_nl_softmax_is8os8+0xff0>
 8007e1e:	f04f 0803 	mov.w	r8, #3
 8007e22:	f04f 0920 	mov.w	r9, #32
 8007e26:	f04f 36ff 	mov.w	r6, #4294967295
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	f04f 335a 	mov.w	r3, #1515870810	@ 0x5a5a5a5a
 8007e30:	4913      	ldr	r1, [pc, #76]	@ (8007e80 <_lite_kernel_nl_softmax_is8os8+0x804>)
 8007e32:	4605      	mov	r5, r0
 8007e34:	4632      	mov	r2, r6
 8007e36:	461f      	mov	r7, r3
 8007e38:	4634      	mov	r4, r6
 8007e3a:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
 8007e3e:	4683      	mov	fp, r0
 8007e40:	e675      	b.n	8007b2e <_lite_kernel_nl_softmax_is8os8+0x4b2>
 8007e42:	17c8      	asrs	r0, r1, #31
 8007e44:	fba2 3501 	umull	r3, r5, r2, r1
 8007e48:	fb02 f700 	mul.w	r7, r2, r0
 8007e4c:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
 8007e50:	fb01 7704 	mla	r7, r1, r4, r7
 8007e54:	eb47 0505 	adc.w	r5, r7, r5
 8007e58:	2d00      	cmp	r5, #0
 8007e5a:	da05      	bge.n	8007e68 <_lite_kernel_nl_softmax_is8os8+0x7ec>
 8007e5c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8007e60:	19df      	adds	r7, r3, r7
 8007e62:	463b      	mov	r3, r7
 8007e64:	f145 0500 	adc.w	r5, r5, #0
 8007e68:	0fdb      	lsrs	r3, r3, #31
 8007e6a:	f04f 37ff 	mov.w	r7, #4294967295
 8007e6e:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8007e72:	4655      	mov	r5, sl
 8007e74:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8007e78:	e6a6      	b.n	8007bc8 <_lite_kernel_nl_softmax_is8os8+0x54c>
 8007e7a:	bf00      	nop
 8007e7c:	da5a5a5a 	.word	0xda5a5a5a
 8007e80:	20000001 	.word	0x20000001
 8007e84:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8007e86:	f513 7f80 	cmn.w	r3, #256	@ 0x100
 8007e8a:	f1c3 0300 	rsb	r3, r3, #0
 8007e8e:	bfb4      	ite	lt
 8007e90:	f44f 7880 	movlt.w	r8, #256	@ 0x100
 8007e94:	4698      	movge	r8, r3
 8007e96:	f1b8 0f00 	cmp.w	r8, #0
 8007e9a:	f340 8148 	ble.w	800812e <_lite_kernel_nl_softmax_is8os8+0xab2>
 8007e9e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8007ea0:	f04f 0a00 	mov.w	sl, #0
 8007ea4:	f8df 9478 	ldr.w	r9, [pc, #1144]	@ 8008320 <_lite_kernel_nl_softmax_is8os8+0xca4>
 8007ea8:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8007eac:	f1a3 0b04 	sub.w	fp, r3, #4
 8007eb0:	f8cd 8008 	str.w	r8, [sp, #8]
 8007eb4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8007eb6:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8007eb8:	fa0a f203 	lsl.w	r2, sl, r3
 8007ebc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007ebe:	4252      	negs	r2, r2
 8007ec0:	4053      	eors	r3, r2
 8007ec2:	0fdb      	lsrs	r3, r3, #31
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	bf0b      	itete	eq
 8007ec8:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8007ecc:	464b      	movne	r3, r9
 8007ece:	2100      	moveq	r1, #0
 8007ed0:	f04f 31ff 	movne.w	r1, #4294967295
 8007ed4:	fbc0 3102 	smlal	r3, r1, r0, r2
 8007ed8:	2900      	cmp	r1, #0
 8007eda:	da04      	bge.n	8007ee6 <_lite_kernel_nl_softmax_is8os8+0x86a>
 8007edc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8007ee0:	189b      	adds	r3, r3, r2
 8007ee2:	f141 0100 	adc.w	r1, r1, #0
 8007ee6:	0fdb      	lsrs	r3, r3, #31
 8007ee8:	f04f 0c00 	mov.w	ip, #0
 8007eec:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007ef6:	9301      	str	r3, [sp, #4]
 8007ef8:	0155      	lsls	r5, r2, #5
 8007efa:	1ad2      	subs	r2, r2, r3
 8007efc:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8007f00:	fbc5 1c05 	smlal	r1, ip, r5, r5
 8007f04:	f1bc 0f00 	cmp.w	ip, #0
 8007f08:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8007f0c:	da04      	bge.n	8007f18 <_lite_kernel_nl_softmax_is8os8+0x89c>
 8007f0e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8007f12:	1809      	adds	r1, r1, r0
 8007f14:	f14c 0c00 	adc.w	ip, ip, #0
 8007f18:	0fc9      	lsrs	r1, r1, #31
 8007f1a:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
 8007f1e:	ea4f 7cec 	mov.w	ip, ip, asr #31
 8007f22:	fba1 0701 	umull	r0, r7, r1, r1
 8007f26:	fb01 fe0c 	mul.w	lr, r1, ip
 8007f2a:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 8007f2e:	eb47 074e 	adc.w	r7, r7, lr, lsl #1
 8007f32:	2f00      	cmp	r7, #0
 8007f34:	da06      	bge.n	8007f44 <_lite_kernel_nl_softmax_is8os8+0x8c8>
 8007f36:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8007f3a:	eb10 0e0e 	adds.w	lr, r0, lr
 8007f3e:	4670      	mov	r0, lr
 8007f40:	f147 0700 	adc.w	r7, r7, #0
 8007f44:	0fc0      	lsrs	r0, r0, #31
 8007f46:	fb01 f606 	mul.w	r6, r1, r6
 8007f4a:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 8007f4e:	fb05 660c 	mla	r6, r5, ip, r6
 8007f52:	1087      	asrs	r7, r0, #2
 8007f54:	f000 0003 	and.w	r0, r0, #3
 8007f58:	bf54      	ite	pl
 8007f5a:	f04f 0e01 	movpl.w	lr, #1
 8007f5e:	f04f 0e02 	movmi.w	lr, #2
 8007f62:	4586      	cmp	lr, r0
 8007f64:	ea81 0005 	eor.w	r0, r1, r5
 8007f68:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8007f6c:	bfb8      	it	lt
 8007f6e:	3701      	addlt	r7, #1
 8007f70:	2800      	cmp	r0, #0
 8007f72:	fba1 0805 	umull	r0, r8, r1, r5
 8007f76:	bf0b      	itete	eq
 8007f78:	f04f 4c80 	moveq.w	ip, #1073741824	@ 0x40000000
 8007f7c:	46cc      	movne	ip, r9
 8007f7e:	f04f 0e00 	moveq.w	lr, #0
 8007f82:	f04f 3eff 	movne.w	lr, #4294967295
 8007f86:	4446      	add	r6, r8
 8007f88:	eb10 000c 	adds.w	r0, r0, ip
 8007f8c:	eb46 060e 	adc.w	r6, r6, lr
 8007f90:	2e00      	cmp	r6, #0
 8007f92:	da06      	bge.n	8007fa2 <_lite_kernel_nl_softmax_is8os8+0x926>
 8007f94:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8007f98:	eb10 0c0c 	adds.w	ip, r0, ip
 8007f9c:	4660      	mov	r0, ip
 8007f9e:	f146 0600 	adc.w	r6, r6, #0
 8007fa2:	0fc0      	lsrs	r0, r0, #31
 8007fa4:	4bd5      	ldr	r3, [pc, #852]	@ (80082fc <_lite_kernel_nl_softmax_is8os8+0xc80>)
 8007fa6:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
 8007faa:	4438      	add	r0, r7
 8007fac:	0fc6      	lsrs	r6, r0, #31
 8007fae:	2e00      	cmp	r6, #0
 8007fb0:	bf0b      	itete	eq
 8007fb2:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 8007fb6:	464f      	movne	r7, r9
 8007fb8:	2600      	moveq	r6, #0
 8007fba:	f04f 36ff 	movne.w	r6, #4294967295
 8007fbe:	fbc0 7603 	smlal	r7, r6, r0, r3
 8007fc2:	2e00      	cmp	r6, #0
 8007fc4:	da05      	bge.n	8007fd2 <_lite_kernel_nl_softmax_is8os8+0x956>
 8007fc6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8007fca:	1838      	adds	r0, r7, r0
 8007fcc:	4607      	mov	r7, r0
 8007fce:	f146 0600 	adc.w	r6, r6, #0
 8007fd2:	0ff8      	lsrs	r0, r7, #31
 8007fd4:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
 8007fd8:	4401      	add	r1, r0
 8007fda:	07ce      	lsls	r6, r1, #31
 8007fdc:	ea4f 0061 	mov.w	r0, r1, asr #1
 8007fe0:	d502      	bpl.n	8007fe8 <_lite_kernel_nl_softmax_is8os8+0x96c>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	bfa8      	it	ge
 8007fe6:	3001      	addge	r0, #1
 8007fe8:	1941      	adds	r1, r0, r5
 8007fea:	4bc5      	ldr	r3, [pc, #788]	@ (8008300 <_lite_kernel_nl_softmax_is8os8+0xc84>)
 8007fec:	0fc8      	lsrs	r0, r1, #31
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	bf0b      	itete	eq
 8007ff2:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
 8007ff6:	4648      	movne	r0, r9
 8007ff8:	2500      	moveq	r5, #0
 8007ffa:	f04f 35ff 	movne.w	r5, #4294967295
 8007ffe:	fbc1 0503 	smlal	r0, r5, r1, r3
 8008002:	2d00      	cmp	r5, #0
 8008004:	da04      	bge.n	8008010 <_lite_kernel_nl_softmax_is8os8+0x994>
 8008006:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800800a:	1840      	adds	r0, r0, r1
 800800c:	f145 0500 	adc.w	r5, r5, #0
 8008010:	0fc0      	lsrs	r0, r0, #31
 8008012:	2100      	movs	r1, #0
 8008014:	4ebb      	ldr	r6, [pc, #748]	@ (8008304 <_lite_kernel_nl_softmax_is8os8+0xc88>)
 8008016:	46a4      	mov	ip, r4
 8008018:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 800801c:	460f      	mov	r7, r1
 800801e:	f3c2 6500 	ubfx	r5, r2, #24, #1
 8008022:	9b01      	ldr	r3, [sp, #4]
 8008024:	f100 40e2 	add.w	r0, r0, #1895825408	@ 0x71000000
 8008028:	f10a 0a01 	add.w	sl, sl, #1
 800802c:	3d01      	subs	r5, #1
 800802e:	fab3 f383 	clz	r3, r3
 8008032:	f5a0 2025 	sub.w	r0, r0, #675840	@ 0xa5000
 8008036:	095b      	lsrs	r3, r3, #5
 8008038:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
 800803c:	fbc0 c706 	smlal	ip, r7, r0, r6
 8008040:	4666      	mov	r6, ip
 8008042:	4005      	ands	r5, r0
 8008044:	f342 6000 	sbfx	r0, r2, #24, #1
 8008048:	0ff6      	lsrs	r6, r6, #31
 800804a:	46a4      	mov	ip, r4
 800804c:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 8008050:	460f      	mov	r7, r1
 8008052:	4030      	ands	r0, r6
 8008054:	4eac      	ldr	r6, [pc, #688]	@ (8008308 <_lite_kernel_nl_softmax_is8os8+0xc8c>)
 8008056:	4068      	eors	r0, r5
 8008058:	f3c2 6540 	ubfx	r5, r2, #25, #1
 800805c:	fbc0 c706 	smlal	ip, r7, r0, r6
 8008060:	4666      	mov	r6, ip
 8008062:	3d01      	subs	r5, #1
 8008064:	46a4      	mov	ip, r4
 8008066:	0ff6      	lsrs	r6, r6, #31
 8008068:	4005      	ands	r5, r0
 800806a:	f342 6040 	sbfx	r0, r2, #25, #1
 800806e:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 8008072:	460f      	mov	r7, r1
 8008074:	4030      	ands	r0, r6
 8008076:	4ea5      	ldr	r6, [pc, #660]	@ (800830c <_lite_kernel_nl_softmax_is8os8+0xc90>)
 8008078:	4068      	eors	r0, r5
 800807a:	f3c2 6580 	ubfx	r5, r2, #26, #1
 800807e:	fbc0 c706 	smlal	ip, r7, r0, r6
 8008082:	4666      	mov	r6, ip
 8008084:	3d01      	subs	r5, #1
 8008086:	468c      	mov	ip, r1
 8008088:	0ff6      	lsrs	r6, r6, #31
 800808a:	4005      	ands	r5, r0
 800808c:	f342 6080 	sbfx	r0, r2, #26, #1
 8008090:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 8008094:	4627      	mov	r7, r4
 8008096:	4030      	ands	r0, r6
 8008098:	f3c2 66c0 	ubfx	r6, r2, #27, #1
 800809c:	4068      	eors	r0, r5
 800809e:	3e01      	subs	r6, #1
 80080a0:	4d9b      	ldr	r5, [pc, #620]	@ (8008310 <_lite_kernel_nl_softmax_is8os8+0xc94>)
 80080a2:	4006      	ands	r6, r0
 80080a4:	fbc0 7c05 	smlal	r7, ip, r0, r5
 80080a8:	0ff8      	lsrs	r0, r7, #31
 80080aa:	f342 65c0 	sbfx	r5, r2, #27, #1
 80080ae:	4627      	mov	r7, r4
 80080b0:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
 80080b4:	468c      	mov	ip, r1
 80080b6:	4005      	ands	r5, r0
 80080b8:	f3c2 7000 	ubfx	r0, r2, #28, #1
 80080bc:	4075      	eors	r5, r6
 80080be:	3801      	subs	r0, #1
 80080c0:	4e94      	ldr	r6, [pc, #592]	@ (8008314 <_lite_kernel_nl_softmax_is8os8+0xc98>)
 80080c2:	4028      	ands	r0, r5
 80080c4:	fbc5 7c06 	smlal	r7, ip, r5, r6
 80080c8:	0ffd      	lsrs	r5, r7, #31
 80080ca:	f342 7600 	sbfx	r6, r2, #28, #1
 80080ce:	4f92      	ldr	r7, [pc, #584]	@ (8008318 <_lite_kernel_nl_softmax_is8os8+0xc9c>)
 80080d0:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
 80080d4:	468c      	mov	ip, r1
 80080d6:	4035      	ands	r5, r6
 80080d8:	4626      	mov	r6, r4
 80080da:	4068      	eors	r0, r5
 80080dc:	f3c2 7540 	ubfx	r5, r2, #29, #1
 80080e0:	fbc0 6c07 	smlal	r6, ip, r0, r7
 80080e4:	3d01      	subs	r5, #1
 80080e6:	0ff6      	lsrs	r6, r6, #31
 80080e8:	4005      	ands	r5, r0
 80080ea:	f342 7040 	sbfx	r0, r2, #29, #1
 80080ee:	ea46 064c 	orr.w	r6, r6, ip, lsl #1
 80080f2:	4030      	ands	r0, r6
 80080f4:	26f2      	movs	r6, #242	@ 0xf2
 80080f6:	4068      	eors	r0, r5
 80080f8:	4625      	mov	r5, r4
 80080fa:	fbc0 5106 	smlal	r5, r1, r0, r6
 80080fe:	0fed      	lsrs	r5, r5, #31
 8008100:	ea45 0541 	orr.w	r5, r5, r1, lsl #1
 8008104:	f3c2 7180 	ubfx	r1, r2, #30, #1
 8008108:	f342 7280 	sbfx	r2, r2, #30, #1
 800810c:	3901      	subs	r1, #1
 800810e:	402a      	ands	r2, r5
 8008110:	4001      	ands	r1, r0
 8008112:	404a      	eors	r2, r1
 8008114:	1e59      	subs	r1, r3, #1
 8008116:	425b      	negs	r3, r3
 8008118:	400a      	ands	r2, r1
 800811a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800811e:	4053      	eors	r3, r2
 8008120:	f84b 3f04 	str.w	r3, [fp, #4]!
 8008124:	9b02      	ldr	r3, [sp, #8]
 8008126:	4553      	cmp	r3, sl
 8008128:	f47f aec4 	bne.w	8007eb4 <_lite_kernel_nl_softmax_is8os8+0x838>
 800812c:	4698      	mov	r8, r3
 800812e:	9a03      	ldr	r2, [sp, #12]
 8008130:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008132:	429a      	cmp	r2, r3
 8008134:	f4bf ae23 	bcs.w	8007d7e <_lite_kernel_nl_softmax_is8os8+0x702>
 8008138:	9904      	ldr	r1, [sp, #16]
 800813a:	1e4b      	subs	r3, r1, #1
 800813c:	468a      	mov	sl, r1
 800813e:	eb02 0e03 	add.w	lr, r2, r3
 8008142:	4613      	mov	r3, r2
 8008144:	3a01      	subs	r2, #1
 8008146:	f1ba 0f01 	cmp.w	sl, #1
 800814a:	4699      	mov	r9, r3
 800814c:	9202      	str	r2, [sp, #8]
 800814e:	9b02      	ldr	r3, [sp, #8]
 8008150:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8008154:	f240 819c 	bls.w	8008490 <_lite_kernel_nl_softmax_is8os8+0xe14>
 8008158:	464b      	mov	r3, r9
 800815a:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
 800815e:	428a      	cmp	r2, r1
 8008160:	bfb8      	it	lt
 8008162:	460a      	movlt	r2, r1
 8008164:	4573      	cmp	r3, lr
 8008166:	d1f8      	bne.n	800815a <_lite_kernel_nl_softmax_is8os8+0xade>
 8008168:	9902      	ldr	r1, [sp, #8]
 800816a:	2400      	movs	r4, #0
 800816c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8008170:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 8008172:	460b      	mov	r3, r1
 8008174:	f911 0f01 	ldrsb.w	r0, [r1, #1]!
 8008178:	1a10      	subs	r0, r2, r0
 800817a:	3302      	adds	r3, #2
 800817c:	4580      	cmp	r8, r0
 800817e:	eba3 0309 	sub.w	r3, r3, r9
 8008182:	dd0c      	ble.n	800819e <_lite_kernel_nl_softmax_is8os8+0xb22>
 8008184:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8008188:	1306      	asrs	r6, r0, #12
 800818a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800818e:	bf54      	ite	pl
 8008190:	46bc      	movpl	ip, r7
 8008192:	f44f 6c00 	movmi.w	ip, #2048	@ 0x800
 8008196:	4560      	cmp	r0, ip
 8008198:	bfc8      	it	gt
 800819a:	3601      	addgt	r6, #1
 800819c:	4434      	add	r4, r6
 800819e:	459a      	cmp	sl, r3
 80081a0:	d8e7      	bhi.n	8008172 <_lite_kernel_nl_softmax_is8os8+0xaf6>
 80081a2:	2c00      	cmp	r4, #0
 80081a4:	f000 8178 	beq.w	8008498 <_lite_kernel_nl_softmax_is8os8+0xe1c>
 80081a8:	fab4 f384 	clz	r3, r4
 80081ac:	409c      	lsls	r4, r3
 80081ae:	9306      	str	r3, [sp, #24]
 80081b0:	f1c3 0323 	rsb	r3, r3, #35	@ 0x23
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	f104 4300 	add.w	r3, r4, #2147483648	@ 0x80000000
 80081ba:	17d9      	asrs	r1, r3, #31
 80081bc:	f1b1 3fff 	cmp.w	r1, #4294967295
 80081c0:	bf08      	it	eq
 80081c2:	2c00      	cmpeq	r4, #0
 80081c4:	f000 816c 	beq.w	80084a0 <_lite_kernel_nl_softmax_is8os8+0xe24>
 80081c8:	f113 4300 	adds.w	r3, r3, #2147483648	@ 0x80000000
 80081cc:	f141 0100 	adc.w	r1, r1, #0
 80081d0:	085b      	lsrs	r3, r3, #1
 80081d2:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 80081d6:	ea4f 0b61 	mov.w	fp, r1, asr #1
 80081da:	4950      	ldr	r1, [pc, #320]	@ (800831c <_lite_kernel_nl_softmax_is8os8+0xca0>)
 80081dc:	425c      	negs	r4, r3
 80081de:	9303      	str	r3, [sp, #12]
 80081e0:	fb01 440b 	mla	r4, r1, fp, r4
 80081e4:	fba3 1001 	umull	r1, r0, r3, r1
 80081e8:	4420      	add	r0, r4
 80081ea:	4c4d      	ldr	r4, [pc, #308]	@ (8008320 <_lite_kernel_nl_softmax_is8os8+0xca4>)
 80081ec:	1909      	adds	r1, r1, r4
 80081ee:	f160 0000 	sbc.w	r0, r0, #0
 80081f2:	2800      	cmp	r0, #0
 80081f4:	da05      	bge.n	8008202 <_lite_kernel_nl_softmax_is8os8+0xb86>
 80081f6:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80081fa:	190c      	adds	r4, r1, r4
 80081fc:	4621      	mov	r1, r4
 80081fe:	f140 0000 	adc.w	r0, r0, #0
 8008202:	0fc9      	lsrs	r1, r1, #31
 8008204:	ea41 0440 	orr.w	r4, r1, r0, lsl #1
 8008208:	f104 365a 	add.w	r6, r4, #1515870810	@ 0x5a5a5a5a
 800820c:	17f0      	asrs	r0, r6, #31
 800820e:	fba3 1706 	umull	r1, r7, r3, r6
 8008212:	4635      	mov	r5, r6
 8008214:	fb03 fc00 	mul.w	ip, r3, r0
 8008218:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
 800821c:	fb06 cc0b 	mla	ip, r6, fp, ip
 8008220:	eb4c 0707 	adc.w	r7, ip, r7
 8008224:	2f00      	cmp	r7, #0
 8008226:	da06      	bge.n	8008236 <_lite_kernel_nl_softmax_is8os8+0xbba>
 8008228:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800822c:	eb11 0c0c 	adds.w	ip, r1, ip
 8008230:	4661      	mov	r1, ip
 8008232:	f147 0700 	adc.w	r7, r7, #0
 8008236:	0fc9      	lsrs	r1, r1, #31
 8008238:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
 800823c:	f1c1 5100 	rsb	r1, r1, #536870912	@ 0x20000000
 8008240:	ea81 0706 	eor.w	r7, r1, r6
 8008244:	0fff      	lsrs	r7, r7, #31
 8008246:	2f00      	cmp	r7, #0
 8008248:	4f35      	ldr	r7, [pc, #212]	@ (8008320 <_lite_kernel_nl_softmax_is8os8+0xca4>)
 800824a:	bf08      	it	eq
 800824c:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 8008250:	9704      	str	r7, [sp, #16]
 8008252:	bf0c      	ite	eq
 8008254:	2700      	moveq	r7, #0
 8008256:	f04f 37ff 	movne.w	r7, #4294967295
 800825a:	9705      	str	r7, [sp, #20]
 800825c:	fb01 f000 	mul.w	r0, r1, r0
 8008260:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8008264:	9f04      	ldr	r7, [sp, #16]
 8008266:	fb05 000c 	mla	r0, r5, ip, r0
 800826a:	fba1 1505 	umull	r1, r5, r1, r5
 800826e:	19c9      	adds	r1, r1, r7
 8008270:	4428      	add	r0, r5
 8008272:	9d05      	ldr	r5, [sp, #20]
 8008274:	eb40 0505 	adc.w	r5, r0, r5
 8008278:	2d00      	cmp	r5, #0
 800827a:	da05      	bge.n	8008288 <_lite_kernel_nl_softmax_is8os8+0xc0c>
 800827c:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8008280:	1808      	adds	r0, r1, r0
 8008282:	4601      	mov	r1, r0
 8008284:	f145 0500 	adc.w	r5, r5, #0
 8008288:	0fc9      	lsrs	r1, r1, #31
 800828a:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 800828e:	f1b1 4f60 	cmp.w	r1, #3758096384	@ 0xe0000000
 8008292:	f340 8132 	ble.w	80084fa <_lite_kernel_nl_softmax_is8os8+0xe7e>
 8008296:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800829a:	9903      	ldr	r1, [sp, #12]
 800829c:	4041      	eors	r1, r0
 800829e:	17c4      	asrs	r4, r0, #31
 80082a0:	fb00 f50b 	mul.w	r5, r0, fp
 80082a4:	0fc9      	lsrs	r1, r1, #31
 80082a6:	fb03 5504 	mla	r5, r3, r4, r5
 80082aa:	2900      	cmp	r1, #0
 80082ac:	491c      	ldr	r1, [pc, #112]	@ (8008320 <_lite_kernel_nl_softmax_is8os8+0xca4>)
 80082ae:	bf0c      	ite	eq
 80082b0:	f04f 4680 	moveq.w	r6, #1073741824	@ 0x40000000
 80082b4:	460e      	movne	r6, r1
 80082b6:	fba0 1c03 	umull	r1, ip, r0, r3
 80082ba:	bf0c      	ite	eq
 80082bc:	2700      	moveq	r7, #0
 80082be:	f04f 37ff 	movne.w	r7, #4294967295
 80082c2:	4465      	add	r5, ip
 80082c4:	1989      	adds	r1, r1, r6
 80082c6:	eb45 0507 	adc.w	r5, r5, r7
 80082ca:	2d00      	cmp	r5, #0
 80082cc:	da05      	bge.n	80082da <_lite_kernel_nl_softmax_is8os8+0xc5e>
 80082ce:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 80082d2:	198e      	adds	r6, r1, r6
 80082d4:	4631      	mov	r1, r6
 80082d6:	f145 0500 	adc.w	r5, r5, #0
 80082da:	0fc9      	lsrs	r1, r1, #31
 80082dc:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 80082e0:	f1c1 5100 	rsb	r1, r1, #536870912	@ 0x20000000
 80082e4:	ea80 0501 	eor.w	r5, r0, r1
 80082e8:	0fed      	lsrs	r5, r5, #31
 80082ea:	2d00      	cmp	r5, #0
 80082ec:	4d0c      	ldr	r5, [pc, #48]	@ (8008320 <_lite_kernel_nl_softmax_is8os8+0xca4>)
 80082ee:	bf06      	itte	eq
 80082f0:	2600      	moveq	r6, #0
 80082f2:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 80082f6:	f04f 36ff 	movne.w	r6, #4294967295
 80082fa:	e013      	b.n	8008324 <_lite_kernel_nl_softmax_is8os8+0xca8>
 80082fc:	2aaaaaab 	.word	0x2aaaaaab
 8008300:	70f5a894 	.word	0x70f5a894
 8008304:	63afbe7b 	.word	0x63afbe7b
 8008308:	4da2cbf2 	.word	0x4da2cbf2
 800830c:	2f16ac6c 	.word	0x2f16ac6c
 8008310:	1152aaa4 	.word	0x1152aaa4
 8008314:	02582ab7 	.word	0x02582ab7
 8008318:	000afe11 	.word	0x000afe11
 800831c:	c3c3c3c4 	.word	0xc3c3c3c4
 8008320:	c0000001 	.word	0xc0000001
 8008324:	fb01 f404 	mul.w	r4, r1, r4
 8008328:	17cf      	asrs	r7, r1, #31
 800832a:	fb00 4407 	mla	r4, r0, r7, r4
 800832e:	fba1 1700 	umull	r1, r7, r1, r0
 8008332:	1949      	adds	r1, r1, r5
 8008334:	443c      	add	r4, r7
 8008336:	eb44 0406 	adc.w	r4, r4, r6
 800833a:	2c00      	cmp	r4, #0
 800833c:	da05      	bge.n	800834a <_lite_kernel_nl_softmax_is8os8+0xcce>
 800833e:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8008342:	194d      	adds	r5, r1, r5
 8008344:	4629      	mov	r1, r5
 8008346:	f144 0400 	adc.w	r4, r4, #0
 800834a:	0fc9      	lsrs	r1, r1, #31
 800834c:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
 8008350:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
 8008354:	f2c0 8101 	blt.w	800855a <_lite_kernel_nl_softmax_is8os8+0xede>
 8008358:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800835c:	4401      	add	r1, r0
 800835e:	9803      	ldr	r0, [sp, #12]
 8008360:	ea91 0f00 	teq	r1, r0
 8008364:	f140 814e 	bpl.w	8008604 <_lite_kernel_nl_softmax_is8os8+0xf88>
 8008368:	4cc4      	ldr	r4, [pc, #784]	@ (800867c <_lite_kernel_nl_softmax_is8os8+0x1000>)
 800836a:	f04f 35ff 	mov.w	r5, #4294967295
 800836e:	fb01 f60b 	mul.w	r6, r1, fp
 8008372:	17c8      	asrs	r0, r1, #31
 8008374:	fb03 6600 	mla	r6, r3, r0, r6
 8008378:	fba1 3703 	umull	r3, r7, r1, r3
 800837c:	191b      	adds	r3, r3, r4
 800837e:	443e      	add	r6, r7
 8008380:	eb46 0605 	adc.w	r6, r6, r5
 8008384:	2e00      	cmp	r6, #0
 8008386:	da05      	bge.n	8008394 <_lite_kernel_nl_softmax_is8os8+0xd18>
 8008388:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800838c:	191c      	adds	r4, r3, r4
 800838e:	4623      	mov	r3, r4
 8008390:	f146 0600 	adc.w	r6, r6, #0
 8008394:	0fdb      	lsrs	r3, r3, #31
 8008396:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 800839a:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 800839e:	ea83 0401 	eor.w	r4, r3, r1
 80083a2:	0fe4      	lsrs	r4, r4, #31
 80083a4:	2c00      	cmp	r4, #0
 80083a6:	4cb5      	ldr	r4, [pc, #724]	@ (800867c <_lite_kernel_nl_softmax_is8os8+0x1000>)
 80083a8:	bf06      	itte	eq
 80083aa:	2500      	moveq	r5, #0
 80083ac:	f04f 4480 	moveq.w	r4, #1073741824	@ 0x40000000
 80083b0:	f04f 35ff 	movne.w	r5, #4294967295
 80083b4:	428b      	cmp	r3, r1
 80083b6:	f040 80f8 	bne.w	80085aa <_lite_kernel_nl_softmax_is8os8+0xf2e>
 80083ba:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80083be:	f040 80f4 	bne.w	80085aa <_lite_kernel_nl_softmax_is8os8+0xf2e>
 80083c2:	f04f 31ff 	mov.w	r1, #4294967295
 80083c6:	004c      	lsls	r4, r1, #1
 80083c8:	9b01      	ldr	r3, [sp, #4]
 80083ca:	2b1f      	cmp	r3, #31
 80083cc:	dd05      	ble.n	80083da <_lite_kernel_nl_softmax_is8os8+0xd5e>
 80083ce:	9b06      	ldr	r3, [sp, #24]
 80083d0:	f1c3 0304 	rsb	r3, r3, #4
 80083d4:	411c      	asrs	r4, r3
 80083d6:	231f      	movs	r3, #31
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	f1ba 0f00 	cmp.w	sl, #0
 80083de:	d040      	beq.n	8008462 <_lite_kernel_nl_softmax_is8os8+0xde6>
 80083e0:	9d01      	ldr	r5, [sp, #4]
 80083e2:	2601      	movs	r6, #1
 80083e4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80083e8:	f8cd 9020 	str.w	r9, [sp, #32]
 80083ec:	40ae      	lsls	r6, r5
 80083ee:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80083f0:	fa43 f505 	asr.w	r5, r3, r5
 80083f4:	9902      	ldr	r1, [sp, #8]
 80083f6:	3e01      	subs	r6, #1
 80083f8:	f8dd 90a4 	ldr.w	r9, [sp, #164]	@ 0xa4
 80083fc:	ea06 0703 	and.w	r7, r6, r3
 8008400:	ea4f 0c66 	mov.w	ip, r6, asr #1
 8008404:	9603      	str	r6, [sp, #12]
 8008406:	9705      	str	r7, [sp, #20]
 8008408:	2780      	movs	r7, #128	@ 0x80
 800840a:	e9cd 5306 	strd	r5, r3, [sp, #24]
 800840e:	f10c 0301 	add.w	r3, ip, #1
 8008412:	9304      	str	r3, [sp, #16]
 8008414:	f911 3f01 	ldrsb.w	r3, [r1, #1]!
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	4598      	cmp	r8, r3
 800841c:	dd4f      	ble.n	80084be <_lite_kernel_nl_softmax_is8os8+0xe42>
 800841e:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8008422:	ea85 0304 	eor.w	r3, r5, r4
 8008426:	0fdb      	lsrs	r3, r3, #31
 8008428:	2b00      	cmp	r3, #0
 800842a:	4b94      	ldr	r3, [pc, #592]	@ (800867c <_lite_kernel_nl_softmax_is8os8+0x1000>)
 800842c:	bf06      	itte	eq
 800842e:	f04f 0b00 	moveq.w	fp, #0
 8008432:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8008436:	f04f 3bff 	movne.w	fp, #4294967295
 800843a:	42a5      	cmp	r5, r4
 800843c:	d141      	bne.n	80084c2 <_lite_kernel_nl_softmax_is8os8+0xe46>
 800843e:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8008442:	d13e      	bne.n	80084c2 <_lite_kernel_nl_softmax_is8os8+0xe46>
 8008444:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
 8008448:	45ac      	cmp	ip, r5
 800844a:	da00      	bge.n	800844e <_lite_kernel_nl_softmax_is8os8+0xdd2>
 800844c:	3301      	adds	r3, #1
 800844e:	2bfe      	cmp	r3, #254	@ 0xfe
 8008450:	dd4e      	ble.n	80084f0 <_lite_kernel_nl_softmax_is8os8+0xe74>
 8008452:	237f      	movs	r3, #127	@ 0x7f
 8008454:	7003      	strb	r3, [r0, #0]
 8008456:	4571      	cmp	r1, lr
 8008458:	f100 0001 	add.w	r0, r0, #1
 800845c:	d1da      	bne.n	8008414 <_lite_kernel_nl_softmax_is8os8+0xd98>
 800845e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008462:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008464:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8008466:	4499      	add	r9, r3
 8008468:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800846a:	4413      	add	r3, r2
 800846c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800846e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008470:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008472:	449e      	add	lr, r3
 8008474:	9b02      	ldr	r3, [sp, #8]
 8008476:	4413      	add	r3, r2
 8008478:	9302      	str	r3, [sp, #8]
 800847a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800847c:	454b      	cmp	r3, r9
 800847e:	f67f ac7e 	bls.w	8007d7e <_lite_kernel_nl_softmax_is8os8+0x702>
 8008482:	9b02      	ldr	r3, [sp, #8]
 8008484:	f1ba 0f01 	cmp.w	sl, #1
 8008488:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800848c:	f63f ae64 	bhi.w	8008158 <_lite_kernel_nl_softmax_is8os8+0xadc>
 8008490:	f1ba 0f00 	cmp.w	sl, #0
 8008494:	f47f ae68 	bne.w	8008168 <_lite_kernel_nl_softmax_is8os8+0xaec>
 8008498:	2303      	movs	r3, #3
 800849a:	9301      	str	r3, [sp, #4]
 800849c:	2320      	movs	r3, #32
 800849e:	9306      	str	r3, [sp, #24]
 80084a0:	f04f 33ff 	mov.w	r3, #4294967295
 80084a4:	2000      	movs	r0, #0
 80084a6:	f04f 365a 	mov.w	r6, #1515870810	@ 0x5a5a5a5a
 80084aa:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 80084ae:	4974      	ldr	r1, [pc, #464]	@ (8008680 <_lite_kernel_nl_softmax_is8os8+0x1004>)
 80084b0:	469b      	mov	fp, r3
 80084b2:	4635      	mov	r5, r6
 80084b4:	4604      	mov	r4, r0
 80084b6:	9303      	str	r3, [sp, #12]
 80084b8:	e9cd 7004 	strd	r7, r0, [sp, #16]
 80084bc:	e6ce      	b.n	800825c <_lite_kernel_nl_softmax_is8os8+0xbe0>
 80084be:	7007      	strb	r7, [r0, #0]
 80084c0:	e7c9      	b.n	8008456 <_lite_kernel_nl_softmax_is8os8+0xdda>
 80084c2:	fbc4 3b05 	smlal	r3, fp, r4, r5
 80084c6:	f1bb 0f00 	cmp.w	fp, #0
 80084ca:	da03      	bge.n	80084d4 <_lite_kernel_nl_softmax_is8os8+0xe58>
 80084cc:	9d07      	ldr	r5, [sp, #28]
 80084ce:	195b      	adds	r3, r3, r5
 80084d0:	f14b 0b00 	adc.w	fp, fp, #0
 80084d4:	0fdb      	lsrs	r3, r3, #31
 80084d6:	9d03      	ldr	r5, [sp, #12]
 80084d8:	9e01      	ldr	r6, [sp, #4]
 80084da:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 80084de:	401d      	ands	r5, r3
 80084e0:	4133      	asrs	r3, r6
 80084e2:	d5b1      	bpl.n	8008448 <_lite_kernel_nl_softmax_is8os8+0xdcc>
 80084e4:	9e04      	ldr	r6, [sp, #16]
 80084e6:	42b5      	cmp	r5, r6
 80084e8:	dcb0      	bgt.n	800844c <_lite_kernel_nl_softmax_is8os8+0xdd0>
 80084ea:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80084ee:	e7b1      	b.n	8008454 <_lite_kernel_nl_softmax_is8os8+0xdd8>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	ddfa      	ble.n	80084ea <_lite_kernel_nl_softmax_is8os8+0xe6e>
 80084f4:	3b80      	subs	r3, #128	@ 0x80
 80084f6:	b25b      	sxtb	r3, r3
 80084f8:	e7ac      	b.n	8008454 <_lite_kernel_nl_softmax_is8os8+0xdd8>
 80084fa:	4862      	ldr	r0, [pc, #392]	@ (8008684 <_lite_kernel_nl_softmax_is8os8+0x1008>)
 80084fc:	9903      	ldr	r1, [sp, #12]
 80084fe:	4420      	add	r0, r4
 8008500:	ea91 0f00 	teq	r1, r0
 8008504:	f140 8082 	bpl.w	800860c <_lite_kernel_nl_softmax_is8os8+0xf90>
 8008508:	17c1      	asrs	r1, r0, #31
 800850a:	fb00 f40b 	mul.w	r4, r0, fp
 800850e:	fb03 4401 	mla	r4, r3, r1, r4
 8008512:	fba0 1503 	umull	r1, r5, r0, r3
 8008516:	4425      	add	r5, r4
 8008518:	4c58      	ldr	r4, [pc, #352]	@ (800867c <_lite_kernel_nl_softmax_is8os8+0x1000>)
 800851a:	1909      	adds	r1, r1, r4
 800851c:	f165 0500 	sbc.w	r5, r5, #0
 8008520:	2d00      	cmp	r5, #0
 8008522:	da05      	bge.n	8008530 <_lite_kernel_nl_softmax_is8os8+0xeb4>
 8008524:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8008528:	190c      	adds	r4, r1, r4
 800852a:	4621      	mov	r1, r4
 800852c:	f145 0500 	adc.w	r5, r5, #0
 8008530:	0fc9      	lsrs	r1, r1, #31
 8008532:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 8008536:	f04f 35ff 	mov.w	r5, #4294967295
 800853a:	f1c1 5400 	rsb	r4, r1, #536870912	@ 0x20000000
 800853e:	494f      	ldr	r1, [pc, #316]	@ (800867c <_lite_kernel_nl_softmax_is8os8+0x1000>)
 8008540:	fbc0 1504 	smlal	r1, r5, r0, r4
 8008544:	2d00      	cmp	r5, #0
 8008546:	da05      	bge.n	8008554 <_lite_kernel_nl_softmax_is8os8+0xed8>
 8008548:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800854c:	190c      	adds	r4, r1, r4
 800854e:	4621      	mov	r1, r4
 8008550:	f145 0500 	adc.w	r5, r5, #0
 8008554:	0fc9      	lsrs	r1, r1, #31
 8008556:	ea41 0445 	orr.w	r4, r1, r5, lsl #1
 800855a:	f1b4 4f60 	cmp.w	r4, #3758096384	@ 0xe0000000
 800855e:	ea4f 0184 	mov.w	r1, r4, lsl #2
 8008562:	f73f aefb 	bgt.w	800835c <_lite_kernel_nl_softmax_is8os8+0xce0>
 8008566:	f100 4100 	add.w	r1, r0, #2147483648	@ 0x80000000
 800856a:	9803      	ldr	r0, [sp, #12]
 800856c:	ea91 0f00 	teq	r1, r0
 8008570:	d548      	bpl.n	8008604 <_lite_kernel_nl_softmax_is8os8+0xf88>
 8008572:	17c8      	asrs	r0, r1, #31
 8008574:	fb03 f500 	mul.w	r5, r3, r0
 8008578:	fba3 3401 	umull	r3, r4, r3, r1
 800857c:	fb01 550b 	mla	r5, r1, fp, r5
 8008580:	442c      	add	r4, r5
 8008582:	4d3e      	ldr	r5, [pc, #248]	@ (800867c <_lite_kernel_nl_softmax_is8os8+0x1000>)
 8008584:	195b      	adds	r3, r3, r5
 8008586:	f164 0400 	sbc.w	r4, r4, #0
 800858a:	2c00      	cmp	r4, #0
 800858c:	da05      	bge.n	800859a <_lite_kernel_nl_softmax_is8os8+0xf1e>
 800858e:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8008592:	195d      	adds	r5, r3, r5
 8008594:	462b      	mov	r3, r5
 8008596:	f144 0400 	adc.w	r4, r4, #0
 800859a:	0fdb      	lsrs	r3, r3, #31
 800859c:	f04f 35ff 	mov.w	r5, #4294967295
 80085a0:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 80085a4:	4c35      	ldr	r4, [pc, #212]	@ (800867c <_lite_kernel_nl_softmax_is8os8+0x1000>)
 80085a6:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 80085aa:	fb03 f000 	mul.w	r0, r3, r0
 80085ae:	17de      	asrs	r6, r3, #31
 80085b0:	fb01 0006 	mla	r0, r1, r6, r0
 80085b4:	fba3 3601 	umull	r3, r6, r3, r1
 80085b8:	191b      	adds	r3, r3, r4
 80085ba:	4430      	add	r0, r6
 80085bc:	eb40 0005 	adc.w	r0, r0, r5
 80085c0:	2800      	cmp	r0, #0
 80085c2:	da05      	bge.n	80085d0 <_lite_kernel_nl_softmax_is8os8+0xf54>
 80085c4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80085c8:	191c      	adds	r4, r3, r4
 80085ca:	4623      	mov	r3, r4
 80085cc:	f140 0000 	adc.w	r0, r0, #0
 80085d0:	0fdb      	lsrs	r3, r3, #31
 80085d2:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80085d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085da:	db07      	blt.n	80085ec <_lite_kernel_nl_softmax_is8os8+0xf70>
 80085dc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80085e0:	4421      	add	r1, r4
 80085e2:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 80085e6:	f6bf aeef 	bge.w	80083c8 <_lite_kernel_nl_softmax_is8os8+0xd4c>
 80085ea:	e6ec      	b.n	80083c6 <_lite_kernel_nl_softmax_is8os8+0xd4a>
 80085ec:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80085f0:	dc31      	bgt.n	8008656 <_lite_kernel_nl_softmax_is8os8+0xfda>
 80085f2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80085f6:	004c      	lsls	r4, r1, #1
 80085f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80085fc:	bfd8      	it	le
 80085fe:	f04f 4400 	movle.w	r4, #2147483648	@ 0x80000000
 8008602:	e6e1      	b.n	80083c8 <_lite_kernel_nl_softmax_is8os8+0xd4c>
 8008604:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8008608:	2500      	movs	r5, #0
 800860a:	e6b0      	b.n	800836e <_lite_kernel_nl_softmax_is8os8+0xcf2>
 800860c:	fba0 1503 	umull	r1, r5, r0, r3
 8008610:	17c4      	asrs	r4, r0, #31
 8008612:	fb00 f60b 	mul.w	r6, r0, fp
 8008616:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
 800861a:	fb03 6604 	mla	r6, r3, r4, r6
 800861e:	eb46 0505 	adc.w	r5, r6, r5
 8008622:	2d00      	cmp	r5, #0
 8008624:	da05      	bge.n	8008632 <_lite_kernel_nl_softmax_is8os8+0xfb6>
 8008626:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 800862a:	198e      	adds	r6, r1, r6
 800862c:	4631      	mov	r1, r6
 800862e:	f145 0500 	adc.w	r5, r5, #0
 8008632:	0fc9      	lsrs	r1, r1, #31
 8008634:	f04f 36ff 	mov.w	r6, #4294967295
 8008638:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 800863c:	4d0f      	ldr	r5, [pc, #60]	@ (800867c <_lite_kernel_nl_softmax_is8os8+0x1000>)
 800863e:	f1c1 5100 	rsb	r1, r1, #536870912	@ 0x20000000
 8008642:	e66f      	b.n	8008324 <_lite_kernel_nl_softmax_is8os8+0xca8>
 8008644:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 8008648:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800864c:	db0b      	blt.n	8008666 <_lite_kernel_nl_softmax_is8os8+0xfea>
 800864e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008652:	f7ff bb25 	b.w	8007ca0 <_lite_kernel_nl_softmax_is8os8+0x624>
 8008656:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800865a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800865e:	db0b      	blt.n	8008678 <_lite_kernel_nl_softmax_is8os8+0xffc>
 8008660:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8008664:	e6b0      	b.n	80083c8 <_lite_kernel_nl_softmax_is8os8+0xd4c>
 8008666:	0051      	lsls	r1, r2, #1
 8008668:	f7ff bb98 	b.w	8007d9c <_lite_kernel_nl_softmax_is8os8+0x720>
 800866c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800866e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008670:	4413      	add	r3, r2
 8008672:	9306      	str	r3, [sp, #24]
 8008674:	f7ff b83f 	b.w	80076f6 <_lite_kernel_nl_softmax_is8os8+0x7a>
 8008678:	005c      	lsls	r4, r3, #1
 800867a:	e7bd      	b.n	80085f8 <_lite_kernel_nl_softmax_is8os8+0xf7c>
 800867c:	c0000001 	.word	0xc0000001
 8008680:	20000001 	.word	0x20000001
 8008684:	da5a5a5a 	.word	0xda5a5a5a

08008688 <_lite_kernel_nl_softmax_iu8ou8>:
 8008688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800868c:	b099      	sub	sp, #100	@ 0x64
 800868e:	9013      	str	r0, [sp, #76]	@ 0x4c
 8008690:	1888      	adds	r0, r1, r2
 8008692:	9102      	str	r1, [sp, #8]
 8008694:	4281      	cmp	r1, r0
 8008696:	9303      	str	r3, [sp, #12]
 8008698:	9016      	str	r0, [sp, #88]	@ 0x58
 800869a:	f080 83bd 	bcs.w	8008e18 <_lite_kernel_nl_softmax_iu8ou8+0x790>
 800869e:	460a      	mov	r2, r1
 80086a0:	4619      	mov	r1, r3
 80086a2:	3b01      	subs	r3, #1
 80086a4:	18d3      	adds	r3, r2, r3
 80086a6:	9314      	str	r3, [sp, #80]	@ 0x50
 80086a8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80086aa:	3b04      	subs	r3, #4
 80086ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80086ae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80086b2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80086b4:	9b02      	ldr	r3, [sp, #8]
 80086b6:	9903      	ldr	r1, [sp, #12]
 80086b8:	781a      	ldrb	r2, [r3, #0]
 80086ba:	2901      	cmp	r1, #1
 80086bc:	9212      	str	r2, [sp, #72]	@ 0x48
 80086be:	f240 83c2 	bls.w	8008e46 <_lite_kernel_nl_softmax_iu8ou8+0x7be>
 80086c2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80086c4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80086c8:	428a      	cmp	r2, r1
 80086ca:	bfb8      	it	lt
 80086cc:	460a      	movlt	r2, r1
 80086ce:	4283      	cmp	r3, r0
 80086d0:	d1f8      	bne.n	80086c4 <_lite_kernel_nl_softmax_iu8ou8+0x3c>
 80086d2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80086d4:	9212      	str	r2, [sp, #72]	@ 0x48
 80086d6:	4413      	add	r3, r2
 80086d8:	9305      	str	r3, [sp, #20]
 80086da:	9b02      	ldr	r3, [sp, #8]
 80086dc:	f103 3bff 	add.w	fp, r3, #4294967295
 80086e0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	2300      	movs	r3, #0
 80086e6:	46dc      	mov	ip, fp
 80086e8:	9304      	str	r3, [sp, #16]
 80086ea:	e104      	b.n	80088f6 <_lite_kernel_nl_softmax_iu8ou8+0x26e>
 80086ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80086ee:	1a9b      	subs	r3, r3, r2
 80086f0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80086f2:	4093      	lsls	r3, r2
 80086f4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80086f6:	405a      	eors	r2, r3
 80086f8:	0fd2      	lsrs	r2, r2, #31
 80086fa:	2a00      	cmp	r2, #0
 80086fc:	4ac7      	ldr	r2, [pc, #796]	@ (8008a1c <_lite_kernel_nl_softmax_iu8ou8+0x394>)
 80086fe:	bf0b      	itete	eq
 8008700:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 8008704:	4611      	movne	r1, r2
 8008706:	2200      	moveq	r2, #0
 8008708:	f04f 32ff 	movne.w	r2, #4294967295
 800870c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008710:	f040 80fa 	bne.w	8008908 <_lite_kernel_nl_softmax_iu8ou8+0x280>
 8008714:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8008716:	4298      	cmp	r0, r3
 8008718:	f040 80f6 	bne.w	8008908 <_lite_kernel_nl_softmax_iu8ou8+0x280>
 800871c:	4bc0      	ldr	r3, [pc, #768]	@ (8008a20 <_lite_kernel_nl_softmax_iu8ou8+0x398>)
 800871e:	2200      	movs	r2, #0
 8008720:	f04f 31ff 	mov.w	r1, #4294967295
 8008724:	4dbf      	ldr	r5, [pc, #764]	@ (8008a24 <_lite_kernel_nl_softmax_iu8ou8+0x39c>)
 8008726:	9310      	str	r3, [sp, #64]	@ 0x40
 8008728:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
 800872c:	4bbe      	ldr	r3, [pc, #760]	@ (8008a28 <_lite_kernel_nl_softmax_iu8ou8+0x3a0>)
 800872e:	4696      	mov	lr, r2
 8008730:	460f      	mov	r7, r1
 8008732:	4689      	mov	r9, r1
 8008734:	9311      	str	r3, [sp, #68]	@ 0x44
 8008736:	468a      	mov	sl, r1
 8008738:	4bbc      	ldr	r3, [pc, #752]	@ (8008a2c <_lite_kernel_nl_softmax_iu8ou8+0x3a4>)
 800873a:	4614      	mov	r4, r2
 800873c:	4693      	mov	fp, r2
 800873e:	2001      	movs	r0, #1
 8008740:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 8008744:	e9cd 110c 	strd	r1, r1, [sp, #48]	@ 0x30
 8008748:	e9cd 110a 	strd	r1, r1, [sp, #40]	@ 0x28
 800874c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8008750:	e9cd 2206 	strd	r2, r2, [sp, #24]
 8008754:	4282      	cmp	r2, r0
 8008756:	4ab1      	ldr	r2, [pc, #708]	@ (8008a1c <_lite_kernel_nl_softmax_iu8ou8+0x394>)
 8008758:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800875a:	bfc8      	it	gt
 800875c:	3601      	addgt	r6, #1
 800875e:	f1be 0f00 	cmp.w	lr, #0
 8008762:	bf06      	itte	eq
 8008764:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 8008768:	f04f 0e00 	moveq.w	lr, #0
 800876c:	f04f 3eff 	movne.w	lr, #4294967295
 8008770:	1882      	adds	r2, r0, r2
 8008772:	eb43 0e0e 	adc.w	lr, r3, lr
 8008776:	f1be 0f00 	cmp.w	lr, #0
 800877a:	da05      	bge.n	8008788 <_lite_kernel_nl_softmax_iu8ou8+0x100>
 800877c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008780:	18d3      	adds	r3, r2, r3
 8008782:	461a      	mov	r2, r3
 8008784:	f14e 0e00 	adc.w	lr, lr, #0
 8008788:	0fd2      	lsrs	r2, r2, #31
 800878a:	48a9      	ldr	r0, [pc, #676]	@ (8008a30 <_lite_kernel_nl_softmax_iu8ou8+0x3a8>)
 800878c:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
 8008790:	4432      	add	r2, r6
 8008792:	0fd3      	lsrs	r3, r2, #31
 8008794:	2b00      	cmp	r3, #0
 8008796:	4ba1      	ldr	r3, [pc, #644]	@ (8008a1c <_lite_kernel_nl_softmax_iu8ou8+0x394>)
 8008798:	bf06      	itte	eq
 800879a:	2600      	moveq	r6, #0
 800879c:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 80087a0:	f04f 36ff 	movne.w	r6, #4294967295
 80087a4:	fbc2 3600 	smlal	r3, r6, r2, r0
 80087a8:	2e00      	cmp	r6, #0
 80087aa:	da05      	bge.n	80087b8 <_lite_kernel_nl_softmax_iu8ou8+0x130>
 80087ac:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80087b0:	189a      	adds	r2, r3, r2
 80087b2:	4613      	mov	r3, r2
 80087b4:	f146 0600 	adc.w	r6, r6, #0
 80087b8:	0fdb      	lsrs	r3, r3, #31
 80087ba:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80087bc:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 80087c0:	441a      	add	r2, r3
 80087c2:	07d0      	lsls	r0, r2, #31
 80087c4:	ea4f 0362 	mov.w	r3, r2, asr #1
 80087c8:	d502      	bpl.n	80087d0 <_lite_kernel_nl_softmax_iu8ou8+0x148>
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	bfa8      	it	ge
 80087ce:	3301      	addge	r3, #1
 80087d0:	442b      	add	r3, r5
 80087d2:	4898      	ldr	r0, [pc, #608]	@ (8008a34 <_lite_kernel_nl_softmax_iu8ou8+0x3ac>)
 80087d4:	0fda      	lsrs	r2, r3, #31
 80087d6:	2a00      	cmp	r2, #0
 80087d8:	4a90      	ldr	r2, [pc, #576]	@ (8008a1c <_lite_kernel_nl_softmax_iu8ou8+0x394>)
 80087da:	bf06      	itte	eq
 80087dc:	2500      	moveq	r5, #0
 80087de:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 80087e2:	f04f 35ff 	movne.w	r5, #4294967295
 80087e6:	fbc3 2500 	smlal	r2, r5, r3, r0
 80087ea:	2d00      	cmp	r5, #0
 80087ec:	da05      	bge.n	80087fa <_lite_kernel_nl_softmax_iu8ou8+0x172>
 80087ee:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80087f2:	18d3      	adds	r3, r2, r3
 80087f4:	461a      	mov	r2, r3
 80087f6:	f145 0500 	adc.w	r5, r5, #0
 80087fa:	0fd2      	lsrs	r2, r2, #31
 80087fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008800:	488d      	ldr	r0, [pc, #564]	@ (8008a38 <_lite_kernel_nl_softmax_iu8ou8+0x3b0>)
 8008802:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8008806:	2500      	movs	r5, #0
 8008808:	461e      	mov	r6, r3
 800880a:	f102 42e2 	add.w	r2, r2, #1895825408	@ 0x71000000
 800880e:	46ae      	mov	lr, r5
 8008810:	f5a2 2225 	sub.w	r2, r2, #675840	@ 0xa5000
 8008814:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
 8008818:	fbc2 6e00 	smlal	r6, lr, r2, r0
 800881c:	0ff6      	lsrs	r6, r6, #31
 800881e:	4017      	ands	r7, r2
 8008820:	4886      	ldr	r0, [pc, #536]	@ (8008a3c <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 8008822:	ea46 064e 	orr.w	r6, r6, lr, lsl #1
 8008826:	461a      	mov	r2, r3
 8008828:	4034      	ands	r4, r6
 800882a:	462e      	mov	r6, r5
 800882c:	407c      	eors	r4, r7
 800882e:	fbc4 2600 	smlal	r2, r6, r4, r0
 8008832:	0fd2      	lsrs	r2, r2, #31
 8008834:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008836:	ea09 0904 	and.w	r9, r9, r4
 800883a:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 800883e:	462c      	mov	r4, r5
 8008840:	4e7f      	ldr	r6, [pc, #508]	@ (8008a40 <_lite_kernel_nl_softmax_iu8ou8+0x3b8>)
 8008842:	4010      	ands	r0, r2
 8008844:	461a      	mov	r2, r3
 8008846:	ea89 0000 	eor.w	r0, r9, r0
 800884a:	fbc0 2406 	smlal	r2, r4, r0, r6
 800884e:	0fd2      	lsrs	r2, r2, #31
 8008850:	ea0a 0a00 	and.w	sl, sl, r0
 8008854:	4e7b      	ldr	r6, [pc, #492]	@ (8008a44 <_lite_kernel_nl_softmax_iu8ou8+0x3bc>)
 8008856:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800885a:	462c      	mov	r4, r5
 800885c:	ea0b 0b02 	and.w	fp, fp, r2
 8008860:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008862:	ea8a 0b0b 	eor.w	fp, sl, fp
 8008866:	ea02 000b 	and.w	r0, r2, fp
 800886a:	461a      	mov	r2, r3
 800886c:	fbcb 2406 	smlal	r2, r4, fp, r6
 8008870:	0fd2      	lsrs	r2, r2, #31
 8008872:	4e75      	ldr	r6, [pc, #468]	@ (8008a48 <_lite_kernel_nl_softmax_iu8ou8+0x3c0>)
 8008874:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8008878:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800887a:	4014      	ands	r4, r2
 800887c:	4622      	mov	r2, r4
 800887e:	462c      	mov	r4, r5
 8008880:	4042      	eors	r2, r0
 8008882:	4618      	mov	r0, r3
 8008884:	fbc2 0406 	smlal	r0, r4, r2, r6
 8008888:	0fc0      	lsrs	r0, r0, #31
 800888a:	4011      	ands	r1, r2
 800888c:	9a08      	ldr	r2, [sp, #32]
 800888e:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
 8008892:	4e6e      	ldr	r6, [pc, #440]	@ (8008a4c <_lite_kernel_nl_softmax_iu8ou8+0x3c4>)
 8008894:	462c      	mov	r4, r5
 8008896:	4002      	ands	r2, r0
 8008898:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800889a:	404a      	eors	r2, r1
 800889c:	4619      	mov	r1, r3
 800889e:	fbc2 1406 	smlal	r1, r4, r2, r6
 80088a2:	0fc9      	lsrs	r1, r1, #31
 80088a4:	4010      	ands	r0, r2
 80088a6:	9a07      	ldr	r2, [sp, #28]
 80088a8:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 80088ac:	400a      	ands	r2, r1
 80088ae:	21f2      	movs	r1, #242	@ 0xf2
 80088b0:	4042      	eors	r2, r0
 80088b2:	fbc2 3501 	smlal	r3, r5, r2, r1
 80088b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80088b8:	0fdb      	lsrs	r3, r3, #31
 80088ba:	4011      	ands	r1, r2
 80088bc:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 80088c0:	460a      	mov	r2, r1
 80088c2:	9906      	ldr	r1, [sp, #24]
 80088c4:	4019      	ands	r1, r3
 80088c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088c8:	404a      	eors	r2, r1
 80088ca:	401a      	ands	r2, r3
 80088cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088ce:	405a      	eors	r2, r3
 80088d0:	1313      	asrs	r3, r2, #12
 80088d2:	0511      	lsls	r1, r2, #20
 80088d4:	9904      	ldr	r1, [sp, #16]
 80088d6:	bf48      	it	mi
 80088d8:	3301      	addmi	r3, #1
 80088da:	4419      	add	r1, r3
 80088dc:	9104      	str	r1, [sp, #16]
 80088de:	9b01      	ldr	r3, [sp, #4]
 80088e0:	f843 2f04 	str.w	r2, [r3, #4]!
 80088e4:	9a02      	ldr	r2, [sp, #8]
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	f108 0302 	add.w	r3, r8, #2
 80088ec:	1a9b      	subs	r3, r3, r2
 80088ee:	9a03      	ldr	r2, [sp, #12]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	f240 80ad 	bls.w	8008a50 <_lite_kernel_nl_softmax_iu8ou8+0x3c8>
 80088f6:	46e0      	mov	r8, ip
 80088f8:	9a05      	ldr	r2, [sp, #20]
 80088fa:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80088fe:	429a      	cmp	r2, r3
 8008900:	f77f aef4 	ble.w	80086ec <_lite_kernel_nl_softmax_iu8ou8+0x64>
 8008904:	2200      	movs	r2, #0
 8008906:	e7ea      	b.n	80088de <_lite_kernel_nl_softmax_iu8ou8+0x256>
 8008908:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800890a:	fbc3 1200 	smlal	r1, r2, r3, r0
 800890e:	2a00      	cmp	r2, #0
 8008910:	da04      	bge.n	800891c <_lite_kernel_nl_softmax_iu8ou8+0x294>
 8008912:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008916:	18c9      	adds	r1, r1, r3
 8008918:	f142 0200 	adc.w	r2, r2, #0
 800891c:	0fc9      	lsrs	r1, r1, #31
 800891e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008922:	2600      	movs	r6, #0
 8008924:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
 8008928:	f041 477f 	orr.w	r7, r1, #4278190080	@ 0xff000000
 800892c:	017d      	lsls	r5, r7, #5
 800892e:	1a7f      	subs	r7, r7, r1
 8008930:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8008934:	fbc5 3605 	smlal	r3, r6, r5, r5
 8008938:	2e00      	cmp	r6, #0
 800893a:	da05      	bge.n	8008948 <_lite_kernel_nl_softmax_iu8ou8+0x2c0>
 800893c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8008940:	189a      	adds	r2, r3, r2
 8008942:	4613      	mov	r3, r2
 8008944:	f146 0600 	adc.w	r6, r6, #0
 8008948:	0fdb      	lsrs	r3, r3, #31
 800894a:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 800894e:	17f6      	asrs	r6, r6, #31
 8008950:	fba3 2003 	umull	r2, r0, r3, r3
 8008954:	fb03 f406 	mul.w	r4, r3, r6
 8008958:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 800895c:	9310      	str	r3, [sp, #64]	@ 0x40
 800895e:	eb40 0044 	adc.w	r0, r0, r4, lsl #1
 8008962:	2800      	cmp	r0, #0
 8008964:	da05      	bge.n	8008972 <_lite_kernel_nl_softmax_iu8ou8+0x2ea>
 8008966:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800896a:	1914      	adds	r4, r2, r4
 800896c:	4622      	mov	r2, r4
 800896e:	f140 0000 	adc.w	r0, r0, #0
 8008972:	0fd2      	lsrs	r2, r2, #31
 8008974:	fb05 f606 	mul.w	r6, r5, r6
 8008978:	ea83 0e05 	eor.w	lr, r3, r5
 800897c:	fab1 f181 	clz	r1, r1
 8008980:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8008984:	f3c7 7940 	ubfx	r9, r7, #29, #1
 8008988:	17e8      	asrs	r0, r5, #31
 800898a:	f3c7 7a80 	ubfx	sl, r7, #30, #1
 800898e:	0949      	lsrs	r1, r1, #5
 8008990:	f3c7 6400 	ubfx	r4, r7, #24, #1
 8008994:	fb03 6600 	mla	r6, r3, r0, r6
 8008998:	f3c7 7000 	ubfx	r0, r7, #28, #1
 800899c:	f3c7 6b80 	ubfx	fp, r7, #26, #1
 80089a0:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 80089a4:	9606      	str	r6, [sp, #24]
 80089a6:	fba5 6303 	umull	r6, r3, r5, r3
 80089aa:	9007      	str	r0, [sp, #28]
 80089ac:	f3c7 6040 	ubfx	r0, r7, #25, #1
 80089b0:	9611      	str	r6, [sp, #68]	@ 0x44
 80089b2:	9e06      	ldr	r6, [sp, #24]
 80089b4:	4433      	add	r3, r6
 80089b6:	424e      	negs	r6, r1
 80089b8:	3901      	subs	r1, #1
 80089ba:	910a      	str	r1, [sp, #40]	@ 0x28
 80089bc:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 80089c0:	f347 66c0 	sbfx	r6, r7, #27, #1
 80089c4:	910f      	str	r1, [sp, #60]	@ 0x3c
 80089c6:	f3c7 61c0 	ubfx	r1, r7, #27, #1
 80089ca:	9f07      	ldr	r7, [sp, #28]
 80089cc:	3901      	subs	r1, #1
 80089ce:	960e      	str	r6, [sp, #56]	@ 0x38
 80089d0:	1096      	asrs	r6, r2, #2
 80089d2:	f002 0203 	and.w	r2, r2, #3
 80089d6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80089d8:	f107 31ff 	add.w	r1, r7, #4294967295
 80089dc:	f1c7 0700 	rsb	r7, r7, #0
 80089e0:	9708      	str	r7, [sp, #32]
 80089e2:	f10a 37ff 	add.w	r7, sl, #4294967295
 80089e6:	970d      	str	r7, [sp, #52]	@ 0x34
 80089e8:	f1ca 0700 	rsb	r7, sl, #0
 80089ec:	f10b 3aff 	add.w	sl, fp, #4294967295
 80089f0:	f1cb 0b00 	rsb	fp, fp, #0
 80089f4:	9706      	str	r7, [sp, #24]
 80089f6:	f109 37ff 	add.w	r7, r9, #4294967295
 80089fa:	970c      	str	r7, [sp, #48]	@ 0x30
 80089fc:	f1c9 0700 	rsb	r7, r9, #0
 8008a00:	f100 39ff 	add.w	r9, r0, #4294967295
 8008a04:	f1c0 0000 	rsb	r0, r0, #0
 8008a08:	9707      	str	r7, [sp, #28]
 8008a0a:	f104 37ff 	add.w	r7, r4, #4294967295
 8008a0e:	9009      	str	r0, [sp, #36]	@ 0x24
 8008a10:	f1c4 0400 	rsb	r4, r4, #0
 8008a14:	bf54      	ite	pl
 8008a16:	2001      	movpl	r0, #1
 8008a18:	2002      	movmi	r0, #2
 8008a1a:	e69b      	b.n	8008754 <_lite_kernel_nl_softmax_iu8ou8+0xcc>
 8008a1c:	c0000001 	.word	0xc0000001
 8008a20:	01fffff8 	.word	0x01fffff8
 8008a24:	0fffffe0 	.word	0x0fffffe0
 8008a28:	40000100 	.word	0x40000100
 8008a2c:	001fffff 	.word	0x001fffff
 8008a30:	2aaaaaab 	.word	0x2aaaaaab
 8008a34:	70f5a894 	.word	0x70f5a894
 8008a38:	63afbe7b 	.word	0x63afbe7b
 8008a3c:	4da2cbf2 	.word	0x4da2cbf2
 8008a40:	2f16ac6c 	.word	0x2f16ac6c
 8008a44:	1152aaa4 	.word	0x1152aaa4
 8008a48:	02582ab7 	.word	0x02582ab7
 8008a4c:	000afe11 	.word	0x000afe11
 8008a50:	9b04      	ldr	r3, [sp, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f000 81f8 	beq.w	8008e48 <_lite_kernel_nl_softmax_iu8ou8+0x7c0>
 8008a58:	fab3 f983 	clz	r9, r3
 8008a5c:	fa03 f209 	lsl.w	r2, r3, r9
 8008a60:	f1c9 0a23 	rsb	sl, r9, #35	@ 0x23
 8008a64:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 8008a68:	17d9      	asrs	r1, r3, #31
 8008a6a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008a6e:	bf08      	it	eq
 8008a70:	2a00      	cmpeq	r2, #0
 8008a72:	f000 81ed 	beq.w	8008e50 <_lite_kernel_nl_softmax_iu8ou8+0x7c8>
 8008a76:	f113 4300 	adds.w	r3, r3, #2147483648	@ 0x80000000
 8008a7a:	4ac2      	ldr	r2, [pc, #776]	@ (8008d84 <_lite_kernel_nl_softmax_iu8ou8+0x6fc>)
 8008a7c:	4dc2      	ldr	r5, [pc, #776]	@ (8008d88 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8008a7e:	f141 0100 	adc.w	r1, r1, #0
 8008a82:	085b      	lsrs	r3, r3, #1
 8008a84:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 8008a88:	1049      	asrs	r1, r1, #1
 8008a8a:	4258      	negs	r0, r3
 8008a8c:	469c      	mov	ip, r3
 8008a8e:	fb02 0001 	mla	r0, r2, r1, r0
 8008a92:	fba3 2402 	umull	r2, r4, r3, r2
 8008a96:	1952      	adds	r2, r2, r5
 8008a98:	4420      	add	r0, r4
 8008a9a:	f160 0000 	sbc.w	r0, r0, #0
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	da05      	bge.n	8008aae <_lite_kernel_nl_softmax_iu8ou8+0x426>
 8008aa2:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8008aa6:	1914      	adds	r4, r2, r4
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	f140 0000 	adc.w	r0, r0, #0
 8008aae:	0fd2      	lsrs	r2, r2, #31
 8008ab0:	ea42 0440 	orr.w	r4, r2, r0, lsl #1
 8008ab4:	f104 365a 	add.w	r6, r4, #1515870810	@ 0x5a5a5a5a
 8008ab8:	17f0      	asrs	r0, r6, #31
 8008aba:	fba3 2706 	umull	r2, r7, r3, r6
 8008abe:	4635      	mov	r5, r6
 8008ac0:	fb03 fe00 	mul.w	lr, r3, r0
 8008ac4:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8008ac8:	fb06 ee01 	mla	lr, r6, r1, lr
 8008acc:	eb4e 0707 	adc.w	r7, lr, r7
 8008ad0:	2f00      	cmp	r7, #0
 8008ad2:	da06      	bge.n	8008ae2 <_lite_kernel_nl_softmax_iu8ou8+0x45a>
 8008ad4:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8008ad8:	eb12 0e0e 	adds.w	lr, r2, lr
 8008adc:	4672      	mov	r2, lr
 8008ade:	f147 0700 	adc.w	r7, r7, #0
 8008ae2:	0fd2      	lsrs	r2, r2, #31
 8008ae4:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 8008ae8:	4fa7      	ldr	r7, [pc, #668]	@ (8008d88 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8008aea:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 8008aee:	ea82 0e06 	eor.w	lr, r2, r6
 8008af2:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8008af6:	f1be 0f00 	cmp.w	lr, #0
 8008afa:	bf06      	itte	eq
 8008afc:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 8008b00:	f04f 0800 	moveq.w	r8, #0
 8008b04:	f04f 38ff 	movne.w	r8, #4294967295
 8008b08:	fb02 f000 	mul.w	r0, r2, r0
 8008b0c:	ea4f 7ee2 	mov.w	lr, r2, asr #31
 8008b10:	fb05 000e 	mla	r0, r5, lr, r0
 8008b14:	fba2 2505 	umull	r2, r5, r2, r5
 8008b18:	19d2      	adds	r2, r2, r7
 8008b1a:	4428      	add	r0, r5
 8008b1c:	eb40 0508 	adc.w	r5, r0, r8
 8008b20:	2d00      	cmp	r5, #0
 8008b22:	da05      	bge.n	8008b30 <_lite_kernel_nl_softmax_iu8ou8+0x4a8>
 8008b24:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8008b28:	1810      	adds	r0, r2, r0
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	f145 0500 	adc.w	r5, r5, #0
 8008b30:	0fd2      	lsrs	r2, r2, #31
 8008b32:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8008b36:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 8008b3a:	dd7f      	ble.n	8008c3c <_lite_kernel_nl_softmax_iu8ou8+0x5b4>
 8008b3c:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 8008b40:	4e91      	ldr	r6, [pc, #580]	@ (8008d88 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8008b42:	ea80 020c 	eor.w	r2, r0, ip
 8008b46:	17c4      	asrs	r4, r0, #31
 8008b48:	fb00 f501 	mul.w	r5, r0, r1
 8008b4c:	0fd2      	lsrs	r2, r2, #31
 8008b4e:	fb03 5504 	mla	r5, r3, r4, r5
 8008b52:	2a00      	cmp	r2, #0
 8008b54:	fba0 2e03 	umull	r2, lr, r0, r3
 8008b58:	bf06      	itte	eq
 8008b5a:	f04f 4680 	moveq.w	r6, #1073741824	@ 0x40000000
 8008b5e:	2700      	moveq	r7, #0
 8008b60:	f04f 37ff 	movne.w	r7, #4294967295
 8008b64:	4475      	add	r5, lr
 8008b66:	1992      	adds	r2, r2, r6
 8008b68:	eb45 0507 	adc.w	r5, r5, r7
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	da05      	bge.n	8008b7c <_lite_kernel_nl_softmax_iu8ou8+0x4f4>
 8008b70:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8008b74:	1996      	adds	r6, r2, r6
 8008b76:	4632      	mov	r2, r6
 8008b78:	f145 0500 	adc.w	r5, r5, #0
 8008b7c:	0fd2      	lsrs	r2, r2, #31
 8008b7e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8008b82:	4d81      	ldr	r5, [pc, #516]	@ (8008d88 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8008b84:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 8008b88:	ea80 0602 	eor.w	r6, r0, r2
 8008b8c:	0ff6      	lsrs	r6, r6, #31
 8008b8e:	2e00      	cmp	r6, #0
 8008b90:	bf06      	itte	eq
 8008b92:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 8008b96:	2600      	moveq	r6, #0
 8008b98:	f04f 36ff 	movne.w	r6, #4294967295
 8008b9c:	fb02 f404 	mul.w	r4, r2, r4
 8008ba0:	17d7      	asrs	r7, r2, #31
 8008ba2:	fb00 4407 	mla	r4, r0, r7, r4
 8008ba6:	fba2 2700 	umull	r2, r7, r2, r0
 8008baa:	1952      	adds	r2, r2, r5
 8008bac:	443c      	add	r4, r7
 8008bae:	eb44 0406 	adc.w	r4, r4, r6
 8008bb2:	2c00      	cmp	r4, #0
 8008bb4:	da05      	bge.n	8008bc2 <_lite_kernel_nl_softmax_iu8ou8+0x53a>
 8008bb6:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8008bba:	1955      	adds	r5, r2, r5
 8008bbc:	462a      	mov	r2, r5
 8008bbe:	f144 0400 	adc.w	r4, r4, #0
 8008bc2:	0fd2      	lsrs	r2, r2, #31
 8008bc4:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8008bc8:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8008bcc:	db65      	blt.n	8008c9a <_lite_kernel_nl_softmax_iu8ou8+0x612>
 8008bce:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8008bd2:	1902      	adds	r2, r0, r4
 8008bd4:	ea92 0f0c 	teq	r2, ip
 8008bd8:	f140 8131 	bpl.w	8008e3e <_lite_kernel_nl_softmax_iu8ou8+0x7b6>
 8008bdc:	4c6a      	ldr	r4, [pc, #424]	@ (8008d88 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8008bde:	f04f 35ff 	mov.w	r5, #4294967295
 8008be2:	fb02 f101 	mul.w	r1, r2, r1
 8008be6:	17d0      	asrs	r0, r2, #31
 8008be8:	fb03 1100 	mla	r1, r3, r0, r1
 8008bec:	fba2 3603 	umull	r3, r6, r2, r3
 8008bf0:	191b      	adds	r3, r3, r4
 8008bf2:	4431      	add	r1, r6
 8008bf4:	eb41 0105 	adc.w	r1, r1, r5
 8008bf8:	2900      	cmp	r1, #0
 8008bfa:	da05      	bge.n	8008c08 <_lite_kernel_nl_softmax_iu8ou8+0x580>
 8008bfc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8008c00:	191c      	adds	r4, r3, r4
 8008c02:	4623      	mov	r3, r4
 8008c04:	f141 0100 	adc.w	r1, r1, #0
 8008c08:	0fdb      	lsrs	r3, r3, #31
 8008c0a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8008c0e:	495e      	ldr	r1, [pc, #376]	@ (8008d88 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8008c10:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8008c14:	ea83 0402 	eor.w	r4, r3, r2
 8008c18:	0fe4      	lsrs	r4, r4, #31
 8008c1a:	2c00      	cmp	r4, #0
 8008c1c:	bf06      	itte	eq
 8008c1e:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 8008c22:	2400      	moveq	r4, #0
 8008c24:	f04f 34ff 	movne.w	r4, #4294967295
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d15d      	bne.n	8008ce8 <_lite_kernel_nl_softmax_iu8ou8+0x660>
 8008c2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8008c30:	d15a      	bne.n	8008ce8 <_lite_kernel_nl_softmax_iu8ou8+0x660>
 8008c32:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c36:	4411      	add	r1, r2
 8008c38:	0049      	lsls	r1, r1, #1
 8008c3a:	e076      	b.n	8008d2a <_lite_kernel_nl_softmax_iu8ou8+0x6a2>
 8008c3c:	4853      	ldr	r0, [pc, #332]	@ (8008d8c <_lite_kernel_nl_softmax_iu8ou8+0x704>)
 8008c3e:	4420      	add	r0, r4
 8008c40:	ea90 0f0c 	teq	r0, ip
 8008c44:	f140 8112 	bpl.w	8008e6c <_lite_kernel_nl_softmax_iu8ou8+0x7e4>
 8008c48:	17c2      	asrs	r2, r0, #31
 8008c4a:	fb00 f401 	mul.w	r4, r0, r1
 8008c4e:	4d4e      	ldr	r5, [pc, #312]	@ (8008d88 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8008c50:	fb03 4402 	mla	r4, r3, r2, r4
 8008c54:	fba0 2603 	umull	r2, r6, r0, r3
 8008c58:	1952      	adds	r2, r2, r5
 8008c5a:	4434      	add	r4, r6
 8008c5c:	f164 0500 	sbc.w	r5, r4, #0
 8008c60:	2d00      	cmp	r5, #0
 8008c62:	da05      	bge.n	8008c70 <_lite_kernel_nl_softmax_iu8ou8+0x5e8>
 8008c64:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8008c68:	1914      	adds	r4, r2, r4
 8008c6a:	4622      	mov	r2, r4
 8008c6c:	f145 0500 	adc.w	r5, r5, #0
 8008c70:	0fd2      	lsrs	r2, r2, #31
 8008c72:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8008c76:	f04f 35ff 	mov.w	r5, #4294967295
 8008c7a:	f1c2 5400 	rsb	r4, r2, #536870912	@ 0x20000000
 8008c7e:	4a42      	ldr	r2, [pc, #264]	@ (8008d88 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8008c80:	fbc0 2504 	smlal	r2, r5, r0, r4
 8008c84:	2d00      	cmp	r5, #0
 8008c86:	da05      	bge.n	8008c94 <_lite_kernel_nl_softmax_iu8ou8+0x60c>
 8008c88:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8008c8c:	1914      	adds	r4, r2, r4
 8008c8e:	4622      	mov	r2, r4
 8008c90:	f145 0500 	adc.w	r5, r5, #0
 8008c94:	0fd2      	lsrs	r2, r2, #31
 8008c96:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8008c9a:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 8008c9e:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8008ca2:	dc96      	bgt.n	8008bd2 <_lite_kernel_nl_softmax_iu8ou8+0x54a>
 8008ca4:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8008ca8:	ea92 0f0c 	teq	r2, ip
 8008cac:	f140 80c7 	bpl.w	8008e3e <_lite_kernel_nl_softmax_iu8ou8+0x7b6>
 8008cb0:	17d0      	asrs	r0, r2, #31
 8008cb2:	4c35      	ldr	r4, [pc, #212]	@ (8008d88 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8008cb4:	fb03 f500 	mul.w	r5, r3, r0
 8008cb8:	fb02 5101 	mla	r1, r2, r1, r5
 8008cbc:	fba3 3502 	umull	r3, r5, r3, r2
 8008cc0:	191b      	adds	r3, r3, r4
 8008cc2:	4429      	add	r1, r5
 8008cc4:	f161 0100 	sbc.w	r1, r1, #0
 8008cc8:	2900      	cmp	r1, #0
 8008cca:	da05      	bge.n	8008cd8 <_lite_kernel_nl_softmax_iu8ou8+0x650>
 8008ccc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8008cd0:	191c      	adds	r4, r3, r4
 8008cd2:	4623      	mov	r3, r4
 8008cd4:	f141 0100 	adc.w	r1, r1, #0
 8008cd8:	0fdb      	lsrs	r3, r3, #31
 8008cda:	f04f 34ff 	mov.w	r4, #4294967295
 8008cde:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8008ce2:	4929      	ldr	r1, [pc, #164]	@ (8008d88 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8008ce4:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8008ce8:	fb03 f000 	mul.w	r0, r3, r0
 8008cec:	17dd      	asrs	r5, r3, #31
 8008cee:	fb02 0005 	mla	r0, r2, r5, r0
 8008cf2:	fba3 3502 	umull	r3, r5, r3, r2
 8008cf6:	185b      	adds	r3, r3, r1
 8008cf8:	4428      	add	r0, r5
 8008cfa:	eb40 0004 	adc.w	r0, r0, r4
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	da05      	bge.n	8008d0e <_lite_kernel_nl_softmax_iu8ou8+0x686>
 8008d02:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008d06:	1859      	adds	r1, r3, r1
 8008d08:	460b      	mov	r3, r1
 8008d0a:	f140 0000 	adc.w	r0, r0, #0
 8008d0e:	0fdb      	lsrs	r3, r3, #31
 8008d10:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8008d14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d18:	f2c0 8085 	blt.w	8008e26 <_lite_kernel_nl_softmax_iu8ou8+0x79e>
 8008d1c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008d20:	18d1      	adds	r1, r2, r3
 8008d22:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8008d26:	db87      	blt.n	8008c38 <_lite_kernel_nl_softmax_iu8ou8+0x5b0>
 8008d28:	4619      	mov	r1, r3
 8008d2a:	f1ba 0f1f 	cmp.w	sl, #31
 8008d2e:	dd04      	ble.n	8008d3a <_lite_kernel_nl_softmax_iu8ou8+0x6b2>
 8008d30:	f1c9 0304 	rsb	r3, r9, #4
 8008d34:	f04f 0a1f 	mov.w	sl, #31
 8008d38:	4119      	asrs	r1, r3
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d05b      	beq.n	8008df8 <_lite_kernel_nl_softmax_iu8ou8+0x770>
 8008d40:	2501      	movs	r5, #1
 8008d42:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8008d46:	f1a1 4e00 	sub.w	lr, r1, #2147483648	@ 0x80000000
 8008d4a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8008d4c:	fa05 f50a 	lsl.w	r5, r5, sl
 8008d50:	fa47 f90a 	asr.w	r9, r7, sl
 8008d54:	fabe fe8e 	clz	lr, lr
 8008d58:	4e0b      	ldr	r6, [pc, #44]	@ (8008d88 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8008d5a:	3d01      	subs	r5, #1
 8008d5c:	f8cd 9010 	str.w	r9, [sp, #16]
 8008d60:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8008d64:	f8dd 905c 	ldr.w	r9, [sp, #92]	@ 0x5c
 8008d68:	ea05 0307 	and.w	r3, r5, r7
 8008d6c:	ea4f 0c65 	mov.w	ip, r5, asr #1
 8008d70:	9301      	str	r3, [sp, #4]
 8008d72:	f10c 0801 	add.w	r8, ip, #1
 8008d76:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d78:	1e5c      	subs	r4, r3, #1
 8008d7a:	4673      	mov	r3, lr
 8008d7c:	46ae      	mov	lr, r5
 8008d7e:	461d      	mov	r5, r3
 8008d80:	e013      	b.n	8008daa <_lite_kernel_nl_softmax_iu8ou8+0x722>
 8008d82:	bf00      	nop
 8008d84:	c3c3c3c4 	.word	0xc3c3c3c4
 8008d88:	c0000001 	.word	0xc0000001
 8008d8c:	da5a5a5a 	.word	0xda5a5a5a
 8008d90:	b1dd      	cbz	r5, 8008dca <_lite_kernel_nl_softmax_iu8ou8+0x742>
 8008d92:	9b04      	ldr	r3, [sp, #16]
 8008d94:	9a01      	ldr	r2, [sp, #4]
 8008d96:	4594      	cmp	ip, r2
 8008d98:	da00      	bge.n	8008d9c <_lite_kernel_nl_softmax_iu8ou8+0x714>
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	2bfe      	cmp	r3, #254	@ 0xfe
 8008d9e:	dd3e      	ble.n	8008e1e <_lite_kernel_nl_softmax_iu8ou8+0x796>
 8008da0:	23ff      	movs	r3, #255	@ 0xff
 8008da2:	4581      	cmp	r9, r0
 8008da4:	f804 3f01 	strb.w	r3, [r4, #1]!
 8008da8:	d026      	beq.n	8008df8 <_lite_kernel_nl_softmax_iu8ou8+0x770>
 8008daa:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8008dae:	ea81 0302 	eor.w	r3, r1, r2
 8008db2:	0fdb      	lsrs	r3, r3, #31
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	bf0b      	itete	eq
 8008db8:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8008dbc:	4633      	movne	r3, r6
 8008dbe:	f04f 0b00 	moveq.w	fp, #0
 8008dc2:	f04f 3bff 	movne.w	fp, #4294967295
 8008dc6:	4291      	cmp	r1, r2
 8008dc8:	d0e2      	beq.n	8008d90 <_lite_kernel_nl_softmax_iu8ou8+0x708>
 8008dca:	fbc2 3b01 	smlal	r3, fp, r2, r1
 8008dce:	f1bb 0f00 	cmp.w	fp, #0
 8008dd2:	da02      	bge.n	8008dda <_lite_kernel_nl_softmax_iu8ou8+0x752>
 8008dd4:	19db      	adds	r3, r3, r7
 8008dd6:	f14b 0b00 	adc.w	fp, fp, #0
 8008dda:	0fdb      	lsrs	r3, r3, #31
 8008ddc:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 8008de0:	ea0e 0203 	and.w	r2, lr, r3
 8008de4:	fa53 f30a 	asrs.w	r3, r3, sl
 8008de8:	d5d5      	bpl.n	8008d96 <_lite_kernel_nl_softmax_iu8ou8+0x70e>
 8008dea:	4590      	cmp	r8, r2
 8008dec:	dbd5      	blt.n	8008d9a <_lite_kernel_nl_softmax_iu8ou8+0x712>
 8008dee:	2300      	movs	r3, #0
 8008df0:	4581      	cmp	r9, r0
 8008df2:	f804 3f01 	strb.w	r3, [r4, #1]!
 8008df6:	d1d8      	bne.n	8008daa <_lite_kernel_nl_softmax_iu8ou8+0x722>
 8008df8:	9b02      	ldr	r3, [sp, #8]
 8008dfa:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008dfc:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8008dfe:	4413      	add	r3, r2
 8008e00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e02:	440a      	add	r2, r1
 8008e04:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8008e06:	9302      	str	r3, [sp, #8]
 8008e08:	9213      	str	r2, [sp, #76]	@ 0x4c
 8008e0a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008e0c:	440a      	add	r2, r1
 8008e0e:	9214      	str	r2, [sp, #80]	@ 0x50
 8008e10:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008e12:	429a      	cmp	r2, r3
 8008e14:	f63f ac4e 	bhi.w	80086b4 <_lite_kernel_nl_softmax_iu8ou8+0x2c>
 8008e18:	b019      	add	sp, #100	@ 0x64
 8008e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	dde5      	ble.n	8008dee <_lite_kernel_nl_softmax_iu8ou8+0x766>
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	e7bd      	b.n	8008da2 <_lite_kernel_nl_softmax_iu8ou8+0x71a>
 8008e26:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8008e2a:	dc3b      	bgt.n	8008ea4 <_lite_kernel_nl_softmax_iu8ou8+0x81c>
 8008e2c:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 8008e30:	0051      	lsls	r1, r2, #1
 8008e32:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008e36:	bfd8      	it	le
 8008e38:	f04f 4100 	movle.w	r1, #2147483648	@ 0x80000000
 8008e3c:	e775      	b.n	8008d2a <_lite_kernel_nl_softmax_iu8ou8+0x6a2>
 8008e3e:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8008e42:	2500      	movs	r5, #0
 8008e44:	e6cd      	b.n	8008be2 <_lite_kernel_nl_softmax_iu8ou8+0x55a>
 8008e46:	bbb9      	cbnz	r1, 8008eb8 <_lite_kernel_nl_softmax_iu8ou8+0x830>
 8008e48:	f04f 0a03 	mov.w	sl, #3
 8008e4c:	f04f 0920 	mov.w	r9, #32
 8008e50:	2000      	movs	r0, #0
 8008e52:	f04f 33ff 	mov.w	r3, #4294967295
 8008e56:	f04f 355a 	mov.w	r5, #1515870810	@ 0x5a5a5a5a
 8008e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8008ec4 <_lite_kernel_nl_softmax_iu8ou8+0x83c>)
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	4619      	mov	r1, r3
 8008e60:	462e      	mov	r6, r5
 8008e62:	469c      	mov	ip, r3
 8008e64:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 8008e68:	4680      	mov	r8, r0
 8008e6a:	e64d      	b.n	8008b08 <_lite_kernel_nl_softmax_iu8ou8+0x480>
 8008e6c:	17c4      	asrs	r4, r0, #31
 8008e6e:	fba3 2500 	umull	r2, r5, r3, r0
 8008e72:	fb03 f604 	mul.w	r6, r3, r4
 8008e76:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8008e7a:	fb00 6601 	mla	r6, r0, r1, r6
 8008e7e:	eb46 0505 	adc.w	r5, r6, r5
 8008e82:	2d00      	cmp	r5, #0
 8008e84:	da05      	bge.n	8008e92 <_lite_kernel_nl_softmax_iu8ou8+0x80a>
 8008e86:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8008e8a:	1996      	adds	r6, r2, r6
 8008e8c:	4632      	mov	r2, r6
 8008e8e:	f145 0500 	adc.w	r5, r5, #0
 8008e92:	0fd2      	lsrs	r2, r2, #31
 8008e94:	f04f 36ff 	mov.w	r6, #4294967295
 8008e98:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8008e9c:	4d0a      	ldr	r5, [pc, #40]	@ (8008ec8 <_lite_kernel_nl_softmax_iu8ou8+0x840>)
 8008e9e:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 8008ea2:	e67b      	b.n	8008b9c <_lite_kernel_nl_softmax_iu8ou8+0x514>
 8008ea4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eac:	db02      	blt.n	8008eb4 <_lite_kernel_nl_softmax_iu8ou8+0x82c>
 8008eae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008eb2:	e73a      	b.n	8008d2a <_lite_kernel_nl_softmax_iu8ou8+0x6a2>
 8008eb4:	0059      	lsls	r1, r3, #1
 8008eb6:	e7bc      	b.n	8008e32 <_lite_kernel_nl_softmax_iu8ou8+0x7aa>
 8008eb8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008eba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008ebc:	4413      	add	r3, r2
 8008ebe:	9305      	str	r3, [sp, #20]
 8008ec0:	e40b      	b.n	80086da <_lite_kernel_nl_softmax_iu8ou8+0x52>
 8008ec2:	bf00      	nop
 8008ec4:	20000001 	.word	0x20000001
 8008ec8:	c0000001 	.word	0xc0000001

08008ecc <sbrk_aligned>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	4e0f      	ldr	r6, [pc, #60]	@ (8008f0c <sbrk_aligned+0x40>)
 8008ed0:	460c      	mov	r4, r1
 8008ed2:	6831      	ldr	r1, [r6, #0]
 8008ed4:	4605      	mov	r5, r0
 8008ed6:	b911      	cbnz	r1, 8008ede <sbrk_aligned+0x12>
 8008ed8:	f000 faec 	bl	80094b4 <_sbrk_r>
 8008edc:	6030      	str	r0, [r6, #0]
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f000 fae7 	bl	80094b4 <_sbrk_r>
 8008ee6:	1c43      	adds	r3, r0, #1
 8008ee8:	d103      	bne.n	8008ef2 <sbrk_aligned+0x26>
 8008eea:	f04f 34ff 	mov.w	r4, #4294967295
 8008eee:	4620      	mov	r0, r4
 8008ef0:	bd70      	pop	{r4, r5, r6, pc}
 8008ef2:	1cc4      	adds	r4, r0, #3
 8008ef4:	f024 0403 	bic.w	r4, r4, #3
 8008ef8:	42a0      	cmp	r0, r4
 8008efa:	d0f8      	beq.n	8008eee <sbrk_aligned+0x22>
 8008efc:	1a21      	subs	r1, r4, r0
 8008efe:	4628      	mov	r0, r5
 8008f00:	f000 fad8 	bl	80094b4 <_sbrk_r>
 8008f04:	3001      	adds	r0, #1
 8008f06:	d1f2      	bne.n	8008eee <sbrk_aligned+0x22>
 8008f08:	e7ef      	b.n	8008eea <sbrk_aligned+0x1e>
 8008f0a:	bf00      	nop
 8008f0c:	20002d00 	.word	0x20002d00

08008f10 <_malloc_r>:
 8008f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f14:	1ccd      	adds	r5, r1, #3
 8008f16:	f025 0503 	bic.w	r5, r5, #3
 8008f1a:	3508      	adds	r5, #8
 8008f1c:	2d0c      	cmp	r5, #12
 8008f1e:	bf38      	it	cc
 8008f20:	250c      	movcc	r5, #12
 8008f22:	2d00      	cmp	r5, #0
 8008f24:	4606      	mov	r6, r0
 8008f26:	db01      	blt.n	8008f2c <_malloc_r+0x1c>
 8008f28:	42a9      	cmp	r1, r5
 8008f2a:	d904      	bls.n	8008f36 <_malloc_r+0x26>
 8008f2c:	230c      	movs	r3, #12
 8008f2e:	6033      	str	r3, [r6, #0]
 8008f30:	2000      	movs	r0, #0
 8008f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800900c <_malloc_r+0xfc>
 8008f3a:	f000 f869 	bl	8009010 <__malloc_lock>
 8008f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f42:	461c      	mov	r4, r3
 8008f44:	bb44      	cbnz	r4, 8008f98 <_malloc_r+0x88>
 8008f46:	4629      	mov	r1, r5
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f7ff ffbf 	bl	8008ecc <sbrk_aligned>
 8008f4e:	1c43      	adds	r3, r0, #1
 8008f50:	4604      	mov	r4, r0
 8008f52:	d158      	bne.n	8009006 <_malloc_r+0xf6>
 8008f54:	f8d8 4000 	ldr.w	r4, [r8]
 8008f58:	4627      	mov	r7, r4
 8008f5a:	2f00      	cmp	r7, #0
 8008f5c:	d143      	bne.n	8008fe6 <_malloc_r+0xd6>
 8008f5e:	2c00      	cmp	r4, #0
 8008f60:	d04b      	beq.n	8008ffa <_malloc_r+0xea>
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	4639      	mov	r1, r7
 8008f66:	4630      	mov	r0, r6
 8008f68:	eb04 0903 	add.w	r9, r4, r3
 8008f6c:	f000 faa2 	bl	80094b4 <_sbrk_r>
 8008f70:	4581      	cmp	r9, r0
 8008f72:	d142      	bne.n	8008ffa <_malloc_r+0xea>
 8008f74:	6821      	ldr	r1, [r4, #0]
 8008f76:	1a6d      	subs	r5, r5, r1
 8008f78:	4629      	mov	r1, r5
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f7ff ffa6 	bl	8008ecc <sbrk_aligned>
 8008f80:	3001      	adds	r0, #1
 8008f82:	d03a      	beq.n	8008ffa <_malloc_r+0xea>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	442b      	add	r3, r5
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	bb62      	cbnz	r2, 8008fec <_malloc_r+0xdc>
 8008f92:	f8c8 7000 	str.w	r7, [r8]
 8008f96:	e00f      	b.n	8008fb8 <_malloc_r+0xa8>
 8008f98:	6822      	ldr	r2, [r4, #0]
 8008f9a:	1b52      	subs	r2, r2, r5
 8008f9c:	d420      	bmi.n	8008fe0 <_malloc_r+0xd0>
 8008f9e:	2a0b      	cmp	r2, #11
 8008fa0:	d917      	bls.n	8008fd2 <_malloc_r+0xc2>
 8008fa2:	1961      	adds	r1, r4, r5
 8008fa4:	42a3      	cmp	r3, r4
 8008fa6:	6025      	str	r5, [r4, #0]
 8008fa8:	bf18      	it	ne
 8008faa:	6059      	strne	r1, [r3, #4]
 8008fac:	6863      	ldr	r3, [r4, #4]
 8008fae:	bf08      	it	eq
 8008fb0:	f8c8 1000 	streq.w	r1, [r8]
 8008fb4:	5162      	str	r2, [r4, r5]
 8008fb6:	604b      	str	r3, [r1, #4]
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f000 f82f 	bl	800901c <__malloc_unlock>
 8008fbe:	f104 000b 	add.w	r0, r4, #11
 8008fc2:	1d23      	adds	r3, r4, #4
 8008fc4:	f020 0007 	bic.w	r0, r0, #7
 8008fc8:	1ac2      	subs	r2, r0, r3
 8008fca:	bf1c      	itt	ne
 8008fcc:	1a1b      	subne	r3, r3, r0
 8008fce:	50a3      	strne	r3, [r4, r2]
 8008fd0:	e7af      	b.n	8008f32 <_malloc_r+0x22>
 8008fd2:	6862      	ldr	r2, [r4, #4]
 8008fd4:	42a3      	cmp	r3, r4
 8008fd6:	bf0c      	ite	eq
 8008fd8:	f8c8 2000 	streq.w	r2, [r8]
 8008fdc:	605a      	strne	r2, [r3, #4]
 8008fde:	e7eb      	b.n	8008fb8 <_malloc_r+0xa8>
 8008fe0:	4623      	mov	r3, r4
 8008fe2:	6864      	ldr	r4, [r4, #4]
 8008fe4:	e7ae      	b.n	8008f44 <_malloc_r+0x34>
 8008fe6:	463c      	mov	r4, r7
 8008fe8:	687f      	ldr	r7, [r7, #4]
 8008fea:	e7b6      	b.n	8008f5a <_malloc_r+0x4a>
 8008fec:	461a      	mov	r2, r3
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	42a3      	cmp	r3, r4
 8008ff2:	d1fb      	bne.n	8008fec <_malloc_r+0xdc>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	6053      	str	r3, [r2, #4]
 8008ff8:	e7de      	b.n	8008fb8 <_malloc_r+0xa8>
 8008ffa:	230c      	movs	r3, #12
 8008ffc:	6033      	str	r3, [r6, #0]
 8008ffe:	4630      	mov	r0, r6
 8009000:	f000 f80c 	bl	800901c <__malloc_unlock>
 8009004:	e794      	b.n	8008f30 <_malloc_r+0x20>
 8009006:	6005      	str	r5, [r0, #0]
 8009008:	e7d6      	b.n	8008fb8 <_malloc_r+0xa8>
 800900a:	bf00      	nop
 800900c:	20002d04 	.word	0x20002d04

08009010 <__malloc_lock>:
 8009010:	4801      	ldr	r0, [pc, #4]	@ (8009018 <__malloc_lock+0x8>)
 8009012:	f000 ba9c 	b.w	800954e <__retarget_lock_acquire_recursive>
 8009016:	bf00      	nop
 8009018:	20002e48 	.word	0x20002e48

0800901c <__malloc_unlock>:
 800901c:	4801      	ldr	r0, [pc, #4]	@ (8009024 <__malloc_unlock+0x8>)
 800901e:	f000 ba97 	b.w	8009550 <__retarget_lock_release_recursive>
 8009022:	bf00      	nop
 8009024:	20002e48 	.word	0x20002e48

08009028 <std>:
 8009028:	2300      	movs	r3, #0
 800902a:	b510      	push	{r4, lr}
 800902c:	4604      	mov	r4, r0
 800902e:	e9c0 3300 	strd	r3, r3, [r0]
 8009032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009036:	6083      	str	r3, [r0, #8]
 8009038:	8181      	strh	r1, [r0, #12]
 800903a:	6643      	str	r3, [r0, #100]	@ 0x64
 800903c:	81c2      	strh	r2, [r0, #14]
 800903e:	6183      	str	r3, [r0, #24]
 8009040:	4619      	mov	r1, r3
 8009042:	2208      	movs	r2, #8
 8009044:	305c      	adds	r0, #92	@ 0x5c
 8009046:	f000 f9f9 	bl	800943c <memset>
 800904a:	4b0d      	ldr	r3, [pc, #52]	@ (8009080 <std+0x58>)
 800904c:	6263      	str	r3, [r4, #36]	@ 0x24
 800904e:	4b0d      	ldr	r3, [pc, #52]	@ (8009084 <std+0x5c>)
 8009050:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009052:	4b0d      	ldr	r3, [pc, #52]	@ (8009088 <std+0x60>)
 8009054:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009056:	4b0d      	ldr	r3, [pc, #52]	@ (800908c <std+0x64>)
 8009058:	6323      	str	r3, [r4, #48]	@ 0x30
 800905a:	4b0d      	ldr	r3, [pc, #52]	@ (8009090 <std+0x68>)
 800905c:	6224      	str	r4, [r4, #32]
 800905e:	429c      	cmp	r4, r3
 8009060:	d006      	beq.n	8009070 <std+0x48>
 8009062:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009066:	4294      	cmp	r4, r2
 8009068:	d002      	beq.n	8009070 <std+0x48>
 800906a:	33d0      	adds	r3, #208	@ 0xd0
 800906c:	429c      	cmp	r4, r3
 800906e:	d105      	bne.n	800907c <std+0x54>
 8009070:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009078:	f000 ba68 	b.w	800954c <__retarget_lock_init_recursive>
 800907c:	bd10      	pop	{r4, pc}
 800907e:	bf00      	nop
 8009080:	0800928d 	.word	0x0800928d
 8009084:	080092af 	.word	0x080092af
 8009088:	080092e7 	.word	0x080092e7
 800908c:	0800930b 	.word	0x0800930b
 8009090:	20002d08 	.word	0x20002d08

08009094 <stdio_exit_handler>:
 8009094:	4a02      	ldr	r2, [pc, #8]	@ (80090a0 <stdio_exit_handler+0xc>)
 8009096:	4903      	ldr	r1, [pc, #12]	@ (80090a4 <stdio_exit_handler+0x10>)
 8009098:	4803      	ldr	r0, [pc, #12]	@ (80090a8 <stdio_exit_handler+0x14>)
 800909a:	f000 b869 	b.w	8009170 <_fwalk_sglue>
 800909e:	bf00      	nop
 80090a0:	20000a30 	.word	0x20000a30
 80090a4:	08009c91 	.word	0x08009c91
 80090a8:	20000a40 	.word	0x20000a40

080090ac <cleanup_stdio>:
 80090ac:	6841      	ldr	r1, [r0, #4]
 80090ae:	4b0c      	ldr	r3, [pc, #48]	@ (80090e0 <cleanup_stdio+0x34>)
 80090b0:	4299      	cmp	r1, r3
 80090b2:	b510      	push	{r4, lr}
 80090b4:	4604      	mov	r4, r0
 80090b6:	d001      	beq.n	80090bc <cleanup_stdio+0x10>
 80090b8:	f000 fdea 	bl	8009c90 <_fflush_r>
 80090bc:	68a1      	ldr	r1, [r4, #8]
 80090be:	4b09      	ldr	r3, [pc, #36]	@ (80090e4 <cleanup_stdio+0x38>)
 80090c0:	4299      	cmp	r1, r3
 80090c2:	d002      	beq.n	80090ca <cleanup_stdio+0x1e>
 80090c4:	4620      	mov	r0, r4
 80090c6:	f000 fde3 	bl	8009c90 <_fflush_r>
 80090ca:	68e1      	ldr	r1, [r4, #12]
 80090cc:	4b06      	ldr	r3, [pc, #24]	@ (80090e8 <cleanup_stdio+0x3c>)
 80090ce:	4299      	cmp	r1, r3
 80090d0:	d004      	beq.n	80090dc <cleanup_stdio+0x30>
 80090d2:	4620      	mov	r0, r4
 80090d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d8:	f000 bdda 	b.w	8009c90 <_fflush_r>
 80090dc:	bd10      	pop	{r4, pc}
 80090de:	bf00      	nop
 80090e0:	20002d08 	.word	0x20002d08
 80090e4:	20002d70 	.word	0x20002d70
 80090e8:	20002dd8 	.word	0x20002dd8

080090ec <global_stdio_init.part.0>:
 80090ec:	b510      	push	{r4, lr}
 80090ee:	4b0b      	ldr	r3, [pc, #44]	@ (800911c <global_stdio_init.part.0+0x30>)
 80090f0:	4c0b      	ldr	r4, [pc, #44]	@ (8009120 <global_stdio_init.part.0+0x34>)
 80090f2:	4a0c      	ldr	r2, [pc, #48]	@ (8009124 <global_stdio_init.part.0+0x38>)
 80090f4:	601a      	str	r2, [r3, #0]
 80090f6:	4620      	mov	r0, r4
 80090f8:	2200      	movs	r2, #0
 80090fa:	2104      	movs	r1, #4
 80090fc:	f7ff ff94 	bl	8009028 <std>
 8009100:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009104:	2201      	movs	r2, #1
 8009106:	2109      	movs	r1, #9
 8009108:	f7ff ff8e 	bl	8009028 <std>
 800910c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009110:	2202      	movs	r2, #2
 8009112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009116:	2112      	movs	r1, #18
 8009118:	f7ff bf86 	b.w	8009028 <std>
 800911c:	20002e40 	.word	0x20002e40
 8009120:	20002d08 	.word	0x20002d08
 8009124:	08009095 	.word	0x08009095

08009128 <__sfp_lock_acquire>:
 8009128:	4801      	ldr	r0, [pc, #4]	@ (8009130 <__sfp_lock_acquire+0x8>)
 800912a:	f000 ba10 	b.w	800954e <__retarget_lock_acquire_recursive>
 800912e:	bf00      	nop
 8009130:	20002e49 	.word	0x20002e49

08009134 <__sfp_lock_release>:
 8009134:	4801      	ldr	r0, [pc, #4]	@ (800913c <__sfp_lock_release+0x8>)
 8009136:	f000 ba0b 	b.w	8009550 <__retarget_lock_release_recursive>
 800913a:	bf00      	nop
 800913c:	20002e49 	.word	0x20002e49

08009140 <__sinit>:
 8009140:	b510      	push	{r4, lr}
 8009142:	4604      	mov	r4, r0
 8009144:	f7ff fff0 	bl	8009128 <__sfp_lock_acquire>
 8009148:	6a23      	ldr	r3, [r4, #32]
 800914a:	b11b      	cbz	r3, 8009154 <__sinit+0x14>
 800914c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009150:	f7ff bff0 	b.w	8009134 <__sfp_lock_release>
 8009154:	4b04      	ldr	r3, [pc, #16]	@ (8009168 <__sinit+0x28>)
 8009156:	6223      	str	r3, [r4, #32]
 8009158:	4b04      	ldr	r3, [pc, #16]	@ (800916c <__sinit+0x2c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1f5      	bne.n	800914c <__sinit+0xc>
 8009160:	f7ff ffc4 	bl	80090ec <global_stdio_init.part.0>
 8009164:	e7f2      	b.n	800914c <__sinit+0xc>
 8009166:	bf00      	nop
 8009168:	080090ad 	.word	0x080090ad
 800916c:	20002e40 	.word	0x20002e40

08009170 <_fwalk_sglue>:
 8009170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009174:	4607      	mov	r7, r0
 8009176:	4688      	mov	r8, r1
 8009178:	4614      	mov	r4, r2
 800917a:	2600      	movs	r6, #0
 800917c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009180:	f1b9 0901 	subs.w	r9, r9, #1
 8009184:	d505      	bpl.n	8009192 <_fwalk_sglue+0x22>
 8009186:	6824      	ldr	r4, [r4, #0]
 8009188:	2c00      	cmp	r4, #0
 800918a:	d1f7      	bne.n	800917c <_fwalk_sglue+0xc>
 800918c:	4630      	mov	r0, r6
 800918e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009192:	89ab      	ldrh	r3, [r5, #12]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d907      	bls.n	80091a8 <_fwalk_sglue+0x38>
 8009198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800919c:	3301      	adds	r3, #1
 800919e:	d003      	beq.n	80091a8 <_fwalk_sglue+0x38>
 80091a0:	4629      	mov	r1, r5
 80091a2:	4638      	mov	r0, r7
 80091a4:	47c0      	blx	r8
 80091a6:	4306      	orrs	r6, r0
 80091a8:	3568      	adds	r5, #104	@ 0x68
 80091aa:	e7e9      	b.n	8009180 <_fwalk_sglue+0x10>

080091ac <iprintf>:
 80091ac:	b40f      	push	{r0, r1, r2, r3}
 80091ae:	b507      	push	{r0, r1, r2, lr}
 80091b0:	4906      	ldr	r1, [pc, #24]	@ (80091cc <iprintf+0x20>)
 80091b2:	ab04      	add	r3, sp, #16
 80091b4:	6808      	ldr	r0, [r1, #0]
 80091b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ba:	6881      	ldr	r1, [r0, #8]
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	f000 fa3d 	bl	800963c <_vfiprintf_r>
 80091c2:	b003      	add	sp, #12
 80091c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091c8:	b004      	add	sp, #16
 80091ca:	4770      	bx	lr
 80091cc:	20000a3c 	.word	0x20000a3c

080091d0 <_puts_r>:
 80091d0:	6a03      	ldr	r3, [r0, #32]
 80091d2:	b570      	push	{r4, r5, r6, lr}
 80091d4:	6884      	ldr	r4, [r0, #8]
 80091d6:	4605      	mov	r5, r0
 80091d8:	460e      	mov	r6, r1
 80091da:	b90b      	cbnz	r3, 80091e0 <_puts_r+0x10>
 80091dc:	f7ff ffb0 	bl	8009140 <__sinit>
 80091e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091e2:	07db      	lsls	r3, r3, #31
 80091e4:	d405      	bmi.n	80091f2 <_puts_r+0x22>
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	0598      	lsls	r0, r3, #22
 80091ea:	d402      	bmi.n	80091f2 <_puts_r+0x22>
 80091ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ee:	f000 f9ae 	bl	800954e <__retarget_lock_acquire_recursive>
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	0719      	lsls	r1, r3, #28
 80091f6:	d502      	bpl.n	80091fe <_puts_r+0x2e>
 80091f8:	6923      	ldr	r3, [r4, #16]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d135      	bne.n	800926a <_puts_r+0x9a>
 80091fe:	4621      	mov	r1, r4
 8009200:	4628      	mov	r0, r5
 8009202:	f000 f8c5 	bl	8009390 <__swsetup_r>
 8009206:	b380      	cbz	r0, 800926a <_puts_r+0x9a>
 8009208:	f04f 35ff 	mov.w	r5, #4294967295
 800920c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800920e:	07da      	lsls	r2, r3, #31
 8009210:	d405      	bmi.n	800921e <_puts_r+0x4e>
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	059b      	lsls	r3, r3, #22
 8009216:	d402      	bmi.n	800921e <_puts_r+0x4e>
 8009218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800921a:	f000 f999 	bl	8009550 <__retarget_lock_release_recursive>
 800921e:	4628      	mov	r0, r5
 8009220:	bd70      	pop	{r4, r5, r6, pc}
 8009222:	2b00      	cmp	r3, #0
 8009224:	da04      	bge.n	8009230 <_puts_r+0x60>
 8009226:	69a2      	ldr	r2, [r4, #24]
 8009228:	429a      	cmp	r2, r3
 800922a:	dc17      	bgt.n	800925c <_puts_r+0x8c>
 800922c:	290a      	cmp	r1, #10
 800922e:	d015      	beq.n	800925c <_puts_r+0x8c>
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	1c5a      	adds	r2, r3, #1
 8009234:	6022      	str	r2, [r4, #0]
 8009236:	7019      	strb	r1, [r3, #0]
 8009238:	68a3      	ldr	r3, [r4, #8]
 800923a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800923e:	3b01      	subs	r3, #1
 8009240:	60a3      	str	r3, [r4, #8]
 8009242:	2900      	cmp	r1, #0
 8009244:	d1ed      	bne.n	8009222 <_puts_r+0x52>
 8009246:	2b00      	cmp	r3, #0
 8009248:	da11      	bge.n	800926e <_puts_r+0x9e>
 800924a:	4622      	mov	r2, r4
 800924c:	210a      	movs	r1, #10
 800924e:	4628      	mov	r0, r5
 8009250:	f000 f85f 	bl	8009312 <__swbuf_r>
 8009254:	3001      	adds	r0, #1
 8009256:	d0d7      	beq.n	8009208 <_puts_r+0x38>
 8009258:	250a      	movs	r5, #10
 800925a:	e7d7      	b.n	800920c <_puts_r+0x3c>
 800925c:	4622      	mov	r2, r4
 800925e:	4628      	mov	r0, r5
 8009260:	f000 f857 	bl	8009312 <__swbuf_r>
 8009264:	3001      	adds	r0, #1
 8009266:	d1e7      	bne.n	8009238 <_puts_r+0x68>
 8009268:	e7ce      	b.n	8009208 <_puts_r+0x38>
 800926a:	3e01      	subs	r6, #1
 800926c:	e7e4      	b.n	8009238 <_puts_r+0x68>
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	1c5a      	adds	r2, r3, #1
 8009272:	6022      	str	r2, [r4, #0]
 8009274:	220a      	movs	r2, #10
 8009276:	701a      	strb	r2, [r3, #0]
 8009278:	e7ee      	b.n	8009258 <_puts_r+0x88>
	...

0800927c <puts>:
 800927c:	4b02      	ldr	r3, [pc, #8]	@ (8009288 <puts+0xc>)
 800927e:	4601      	mov	r1, r0
 8009280:	6818      	ldr	r0, [r3, #0]
 8009282:	f7ff bfa5 	b.w	80091d0 <_puts_r>
 8009286:	bf00      	nop
 8009288:	20000a3c 	.word	0x20000a3c

0800928c <__sread>:
 800928c:	b510      	push	{r4, lr}
 800928e:	460c      	mov	r4, r1
 8009290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009294:	f000 f8fc 	bl	8009490 <_read_r>
 8009298:	2800      	cmp	r0, #0
 800929a:	bfab      	itete	ge
 800929c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800929e:	89a3      	ldrhlt	r3, [r4, #12]
 80092a0:	181b      	addge	r3, r3, r0
 80092a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80092a6:	bfac      	ite	ge
 80092a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80092aa:	81a3      	strhlt	r3, [r4, #12]
 80092ac:	bd10      	pop	{r4, pc}

080092ae <__swrite>:
 80092ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b2:	461f      	mov	r7, r3
 80092b4:	898b      	ldrh	r3, [r1, #12]
 80092b6:	05db      	lsls	r3, r3, #23
 80092b8:	4605      	mov	r5, r0
 80092ba:	460c      	mov	r4, r1
 80092bc:	4616      	mov	r6, r2
 80092be:	d505      	bpl.n	80092cc <__swrite+0x1e>
 80092c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c4:	2302      	movs	r3, #2
 80092c6:	2200      	movs	r2, #0
 80092c8:	f000 f8d0 	bl	800946c <_lseek_r>
 80092cc:	89a3      	ldrh	r3, [r4, #12]
 80092ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80092d6:	81a3      	strh	r3, [r4, #12]
 80092d8:	4632      	mov	r2, r6
 80092da:	463b      	mov	r3, r7
 80092dc:	4628      	mov	r0, r5
 80092de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092e2:	f000 b8f7 	b.w	80094d4 <_write_r>

080092e6 <__sseek>:
 80092e6:	b510      	push	{r4, lr}
 80092e8:	460c      	mov	r4, r1
 80092ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ee:	f000 f8bd 	bl	800946c <_lseek_r>
 80092f2:	1c43      	adds	r3, r0, #1
 80092f4:	89a3      	ldrh	r3, [r4, #12]
 80092f6:	bf15      	itete	ne
 80092f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80092fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80092fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009302:	81a3      	strheq	r3, [r4, #12]
 8009304:	bf18      	it	ne
 8009306:	81a3      	strhne	r3, [r4, #12]
 8009308:	bd10      	pop	{r4, pc}

0800930a <__sclose>:
 800930a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800930e:	f000 b89d 	b.w	800944c <_close_r>

08009312 <__swbuf_r>:
 8009312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009314:	460e      	mov	r6, r1
 8009316:	4614      	mov	r4, r2
 8009318:	4605      	mov	r5, r0
 800931a:	b118      	cbz	r0, 8009324 <__swbuf_r+0x12>
 800931c:	6a03      	ldr	r3, [r0, #32]
 800931e:	b90b      	cbnz	r3, 8009324 <__swbuf_r+0x12>
 8009320:	f7ff ff0e 	bl	8009140 <__sinit>
 8009324:	69a3      	ldr	r3, [r4, #24]
 8009326:	60a3      	str	r3, [r4, #8]
 8009328:	89a3      	ldrh	r3, [r4, #12]
 800932a:	071a      	lsls	r2, r3, #28
 800932c:	d501      	bpl.n	8009332 <__swbuf_r+0x20>
 800932e:	6923      	ldr	r3, [r4, #16]
 8009330:	b943      	cbnz	r3, 8009344 <__swbuf_r+0x32>
 8009332:	4621      	mov	r1, r4
 8009334:	4628      	mov	r0, r5
 8009336:	f000 f82b 	bl	8009390 <__swsetup_r>
 800933a:	b118      	cbz	r0, 8009344 <__swbuf_r+0x32>
 800933c:	f04f 37ff 	mov.w	r7, #4294967295
 8009340:	4638      	mov	r0, r7
 8009342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	6922      	ldr	r2, [r4, #16]
 8009348:	1a98      	subs	r0, r3, r2
 800934a:	6963      	ldr	r3, [r4, #20]
 800934c:	b2f6      	uxtb	r6, r6
 800934e:	4283      	cmp	r3, r0
 8009350:	4637      	mov	r7, r6
 8009352:	dc05      	bgt.n	8009360 <__swbuf_r+0x4e>
 8009354:	4621      	mov	r1, r4
 8009356:	4628      	mov	r0, r5
 8009358:	f000 fc9a 	bl	8009c90 <_fflush_r>
 800935c:	2800      	cmp	r0, #0
 800935e:	d1ed      	bne.n	800933c <__swbuf_r+0x2a>
 8009360:	68a3      	ldr	r3, [r4, #8]
 8009362:	3b01      	subs	r3, #1
 8009364:	60a3      	str	r3, [r4, #8]
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	6022      	str	r2, [r4, #0]
 800936c:	701e      	strb	r6, [r3, #0]
 800936e:	6962      	ldr	r2, [r4, #20]
 8009370:	1c43      	adds	r3, r0, #1
 8009372:	429a      	cmp	r2, r3
 8009374:	d004      	beq.n	8009380 <__swbuf_r+0x6e>
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	07db      	lsls	r3, r3, #31
 800937a:	d5e1      	bpl.n	8009340 <__swbuf_r+0x2e>
 800937c:	2e0a      	cmp	r6, #10
 800937e:	d1df      	bne.n	8009340 <__swbuf_r+0x2e>
 8009380:	4621      	mov	r1, r4
 8009382:	4628      	mov	r0, r5
 8009384:	f000 fc84 	bl	8009c90 <_fflush_r>
 8009388:	2800      	cmp	r0, #0
 800938a:	d0d9      	beq.n	8009340 <__swbuf_r+0x2e>
 800938c:	e7d6      	b.n	800933c <__swbuf_r+0x2a>
	...

08009390 <__swsetup_r>:
 8009390:	b538      	push	{r3, r4, r5, lr}
 8009392:	4b29      	ldr	r3, [pc, #164]	@ (8009438 <__swsetup_r+0xa8>)
 8009394:	4605      	mov	r5, r0
 8009396:	6818      	ldr	r0, [r3, #0]
 8009398:	460c      	mov	r4, r1
 800939a:	b118      	cbz	r0, 80093a4 <__swsetup_r+0x14>
 800939c:	6a03      	ldr	r3, [r0, #32]
 800939e:	b90b      	cbnz	r3, 80093a4 <__swsetup_r+0x14>
 80093a0:	f7ff fece 	bl	8009140 <__sinit>
 80093a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093a8:	0719      	lsls	r1, r3, #28
 80093aa:	d422      	bmi.n	80093f2 <__swsetup_r+0x62>
 80093ac:	06da      	lsls	r2, r3, #27
 80093ae:	d407      	bmi.n	80093c0 <__swsetup_r+0x30>
 80093b0:	2209      	movs	r2, #9
 80093b2:	602a      	str	r2, [r5, #0]
 80093b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093b8:	81a3      	strh	r3, [r4, #12]
 80093ba:	f04f 30ff 	mov.w	r0, #4294967295
 80093be:	e033      	b.n	8009428 <__swsetup_r+0x98>
 80093c0:	0758      	lsls	r0, r3, #29
 80093c2:	d512      	bpl.n	80093ea <__swsetup_r+0x5a>
 80093c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093c6:	b141      	cbz	r1, 80093da <__swsetup_r+0x4a>
 80093c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093cc:	4299      	cmp	r1, r3
 80093ce:	d002      	beq.n	80093d6 <__swsetup_r+0x46>
 80093d0:	4628      	mov	r0, r5
 80093d2:	f000 f8bf 	bl	8009554 <_free_r>
 80093d6:	2300      	movs	r3, #0
 80093d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80093e0:	81a3      	strh	r3, [r4, #12]
 80093e2:	2300      	movs	r3, #0
 80093e4:	6063      	str	r3, [r4, #4]
 80093e6:	6923      	ldr	r3, [r4, #16]
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	f043 0308 	orr.w	r3, r3, #8
 80093f0:	81a3      	strh	r3, [r4, #12]
 80093f2:	6923      	ldr	r3, [r4, #16]
 80093f4:	b94b      	cbnz	r3, 800940a <__swsetup_r+0x7a>
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80093fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009400:	d003      	beq.n	800940a <__swsetup_r+0x7a>
 8009402:	4621      	mov	r1, r4
 8009404:	4628      	mov	r0, r5
 8009406:	f000 fc91 	bl	8009d2c <__smakebuf_r>
 800940a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800940e:	f013 0201 	ands.w	r2, r3, #1
 8009412:	d00a      	beq.n	800942a <__swsetup_r+0x9a>
 8009414:	2200      	movs	r2, #0
 8009416:	60a2      	str	r2, [r4, #8]
 8009418:	6962      	ldr	r2, [r4, #20]
 800941a:	4252      	negs	r2, r2
 800941c:	61a2      	str	r2, [r4, #24]
 800941e:	6922      	ldr	r2, [r4, #16]
 8009420:	b942      	cbnz	r2, 8009434 <__swsetup_r+0xa4>
 8009422:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009426:	d1c5      	bne.n	80093b4 <__swsetup_r+0x24>
 8009428:	bd38      	pop	{r3, r4, r5, pc}
 800942a:	0799      	lsls	r1, r3, #30
 800942c:	bf58      	it	pl
 800942e:	6962      	ldrpl	r2, [r4, #20]
 8009430:	60a2      	str	r2, [r4, #8]
 8009432:	e7f4      	b.n	800941e <__swsetup_r+0x8e>
 8009434:	2000      	movs	r0, #0
 8009436:	e7f7      	b.n	8009428 <__swsetup_r+0x98>
 8009438:	20000a3c 	.word	0x20000a3c

0800943c <memset>:
 800943c:	4402      	add	r2, r0
 800943e:	4603      	mov	r3, r0
 8009440:	4293      	cmp	r3, r2
 8009442:	d100      	bne.n	8009446 <memset+0xa>
 8009444:	4770      	bx	lr
 8009446:	f803 1b01 	strb.w	r1, [r3], #1
 800944a:	e7f9      	b.n	8009440 <memset+0x4>

0800944c <_close_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4d06      	ldr	r5, [pc, #24]	@ (8009468 <_close_r+0x1c>)
 8009450:	2300      	movs	r3, #0
 8009452:	4604      	mov	r4, r0
 8009454:	4608      	mov	r0, r1
 8009456:	602b      	str	r3, [r5, #0]
 8009458:	f000 fcc6 	bl	8009de8 <_close>
 800945c:	1c43      	adds	r3, r0, #1
 800945e:	d102      	bne.n	8009466 <_close_r+0x1a>
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	b103      	cbz	r3, 8009466 <_close_r+0x1a>
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	20002e44 	.word	0x20002e44

0800946c <_lseek_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4d07      	ldr	r5, [pc, #28]	@ (800948c <_lseek_r+0x20>)
 8009470:	4604      	mov	r4, r0
 8009472:	4608      	mov	r0, r1
 8009474:	4611      	mov	r1, r2
 8009476:	2200      	movs	r2, #0
 8009478:	602a      	str	r2, [r5, #0]
 800947a:	461a      	mov	r2, r3
 800947c:	f000 fccc 	bl	8009e18 <_lseek>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d102      	bne.n	800948a <_lseek_r+0x1e>
 8009484:	682b      	ldr	r3, [r5, #0]
 8009486:	b103      	cbz	r3, 800948a <_lseek_r+0x1e>
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	bd38      	pop	{r3, r4, r5, pc}
 800948c:	20002e44 	.word	0x20002e44

08009490 <_read_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4d07      	ldr	r5, [pc, #28]	@ (80094b0 <_read_r+0x20>)
 8009494:	4604      	mov	r4, r0
 8009496:	4608      	mov	r0, r1
 8009498:	4611      	mov	r1, r2
 800949a:	2200      	movs	r2, #0
 800949c:	602a      	str	r2, [r5, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	f000 fcc2 	bl	8009e28 <_read>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d102      	bne.n	80094ae <_read_r+0x1e>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	b103      	cbz	r3, 80094ae <_read_r+0x1e>
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	20002e44 	.word	0x20002e44

080094b4 <_sbrk_r>:
 80094b4:	b538      	push	{r3, r4, r5, lr}
 80094b6:	4d06      	ldr	r5, [pc, #24]	@ (80094d0 <_sbrk_r+0x1c>)
 80094b8:	2300      	movs	r3, #0
 80094ba:	4604      	mov	r4, r0
 80094bc:	4608      	mov	r0, r1
 80094be:	602b      	str	r3, [r5, #0]
 80094c0:	f7f7 fb9e 	bl	8000c00 <_sbrk>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	d102      	bne.n	80094ce <_sbrk_r+0x1a>
 80094c8:	682b      	ldr	r3, [r5, #0]
 80094ca:	b103      	cbz	r3, 80094ce <_sbrk_r+0x1a>
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	bd38      	pop	{r3, r4, r5, pc}
 80094d0:	20002e44 	.word	0x20002e44

080094d4 <_write_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	4d07      	ldr	r5, [pc, #28]	@ (80094f4 <_write_r+0x20>)
 80094d8:	4604      	mov	r4, r0
 80094da:	4608      	mov	r0, r1
 80094dc:	4611      	mov	r1, r2
 80094de:	2200      	movs	r2, #0
 80094e0:	602a      	str	r2, [r5, #0]
 80094e2:	461a      	mov	r2, r3
 80094e4:	f000 fca8 	bl	8009e38 <_write>
 80094e8:	1c43      	adds	r3, r0, #1
 80094ea:	d102      	bne.n	80094f2 <_write_r+0x1e>
 80094ec:	682b      	ldr	r3, [r5, #0]
 80094ee:	b103      	cbz	r3, 80094f2 <_write_r+0x1e>
 80094f0:	6023      	str	r3, [r4, #0]
 80094f2:	bd38      	pop	{r3, r4, r5, pc}
 80094f4:	20002e44 	.word	0x20002e44

080094f8 <__errno>:
 80094f8:	4b01      	ldr	r3, [pc, #4]	@ (8009500 <__errno+0x8>)
 80094fa:	6818      	ldr	r0, [r3, #0]
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	20000a3c 	.word	0x20000a3c

08009504 <__libc_init_array>:
 8009504:	b570      	push	{r4, r5, r6, lr}
 8009506:	4d0d      	ldr	r5, [pc, #52]	@ (800953c <__libc_init_array+0x38>)
 8009508:	4c0d      	ldr	r4, [pc, #52]	@ (8009540 <__libc_init_array+0x3c>)
 800950a:	1b64      	subs	r4, r4, r5
 800950c:	10a4      	asrs	r4, r4, #2
 800950e:	2600      	movs	r6, #0
 8009510:	42a6      	cmp	r6, r4
 8009512:	d109      	bne.n	8009528 <__libc_init_array+0x24>
 8009514:	4d0b      	ldr	r5, [pc, #44]	@ (8009544 <__libc_init_array+0x40>)
 8009516:	4c0c      	ldr	r4, [pc, #48]	@ (8009548 <__libc_init_array+0x44>)
 8009518:	f000 fc96 	bl	8009e48 <_init>
 800951c:	1b64      	subs	r4, r4, r5
 800951e:	10a4      	asrs	r4, r4, #2
 8009520:	2600      	movs	r6, #0
 8009522:	42a6      	cmp	r6, r4
 8009524:	d105      	bne.n	8009532 <__libc_init_array+0x2e>
 8009526:	bd70      	pop	{r4, r5, r6, pc}
 8009528:	f855 3b04 	ldr.w	r3, [r5], #4
 800952c:	4798      	blx	r3
 800952e:	3601      	adds	r6, #1
 8009530:	e7ee      	b.n	8009510 <__libc_init_array+0xc>
 8009532:	f855 3b04 	ldr.w	r3, [r5], #4
 8009536:	4798      	blx	r3
 8009538:	3601      	adds	r6, #1
 800953a:	e7f2      	b.n	8009522 <__libc_init_array+0x1e>
 800953c:	0801390c 	.word	0x0801390c
 8009540:	0801390c 	.word	0x0801390c
 8009544:	0801390c 	.word	0x0801390c
 8009548:	08013910 	.word	0x08013910

0800954c <__retarget_lock_init_recursive>:
 800954c:	4770      	bx	lr

0800954e <__retarget_lock_acquire_recursive>:
 800954e:	4770      	bx	lr

08009550 <__retarget_lock_release_recursive>:
 8009550:	4770      	bx	lr
	...

08009554 <_free_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4605      	mov	r5, r0
 8009558:	2900      	cmp	r1, #0
 800955a:	d041      	beq.n	80095e0 <_free_r+0x8c>
 800955c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009560:	1f0c      	subs	r4, r1, #4
 8009562:	2b00      	cmp	r3, #0
 8009564:	bfb8      	it	lt
 8009566:	18e4      	addlt	r4, r4, r3
 8009568:	f7ff fd52 	bl	8009010 <__malloc_lock>
 800956c:	4a1d      	ldr	r2, [pc, #116]	@ (80095e4 <_free_r+0x90>)
 800956e:	6813      	ldr	r3, [r2, #0]
 8009570:	b933      	cbnz	r3, 8009580 <_free_r+0x2c>
 8009572:	6063      	str	r3, [r4, #4]
 8009574:	6014      	str	r4, [r2, #0]
 8009576:	4628      	mov	r0, r5
 8009578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800957c:	f7ff bd4e 	b.w	800901c <__malloc_unlock>
 8009580:	42a3      	cmp	r3, r4
 8009582:	d908      	bls.n	8009596 <_free_r+0x42>
 8009584:	6820      	ldr	r0, [r4, #0]
 8009586:	1821      	adds	r1, r4, r0
 8009588:	428b      	cmp	r3, r1
 800958a:	bf01      	itttt	eq
 800958c:	6819      	ldreq	r1, [r3, #0]
 800958e:	685b      	ldreq	r3, [r3, #4]
 8009590:	1809      	addeq	r1, r1, r0
 8009592:	6021      	streq	r1, [r4, #0]
 8009594:	e7ed      	b.n	8009572 <_free_r+0x1e>
 8009596:	461a      	mov	r2, r3
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	b10b      	cbz	r3, 80095a0 <_free_r+0x4c>
 800959c:	42a3      	cmp	r3, r4
 800959e:	d9fa      	bls.n	8009596 <_free_r+0x42>
 80095a0:	6811      	ldr	r1, [r2, #0]
 80095a2:	1850      	adds	r0, r2, r1
 80095a4:	42a0      	cmp	r0, r4
 80095a6:	d10b      	bne.n	80095c0 <_free_r+0x6c>
 80095a8:	6820      	ldr	r0, [r4, #0]
 80095aa:	4401      	add	r1, r0
 80095ac:	1850      	adds	r0, r2, r1
 80095ae:	4283      	cmp	r3, r0
 80095b0:	6011      	str	r1, [r2, #0]
 80095b2:	d1e0      	bne.n	8009576 <_free_r+0x22>
 80095b4:	6818      	ldr	r0, [r3, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	6053      	str	r3, [r2, #4]
 80095ba:	4408      	add	r0, r1
 80095bc:	6010      	str	r0, [r2, #0]
 80095be:	e7da      	b.n	8009576 <_free_r+0x22>
 80095c0:	d902      	bls.n	80095c8 <_free_r+0x74>
 80095c2:	230c      	movs	r3, #12
 80095c4:	602b      	str	r3, [r5, #0]
 80095c6:	e7d6      	b.n	8009576 <_free_r+0x22>
 80095c8:	6820      	ldr	r0, [r4, #0]
 80095ca:	1821      	adds	r1, r4, r0
 80095cc:	428b      	cmp	r3, r1
 80095ce:	bf04      	itt	eq
 80095d0:	6819      	ldreq	r1, [r3, #0]
 80095d2:	685b      	ldreq	r3, [r3, #4]
 80095d4:	6063      	str	r3, [r4, #4]
 80095d6:	bf04      	itt	eq
 80095d8:	1809      	addeq	r1, r1, r0
 80095da:	6021      	streq	r1, [r4, #0]
 80095dc:	6054      	str	r4, [r2, #4]
 80095de:	e7ca      	b.n	8009576 <_free_r+0x22>
 80095e0:	bd38      	pop	{r3, r4, r5, pc}
 80095e2:	bf00      	nop
 80095e4:	20002d04 	.word	0x20002d04

080095e8 <__sfputc_r>:
 80095e8:	6893      	ldr	r3, [r2, #8]
 80095ea:	3b01      	subs	r3, #1
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	b410      	push	{r4}
 80095f0:	6093      	str	r3, [r2, #8]
 80095f2:	da08      	bge.n	8009606 <__sfputc_r+0x1e>
 80095f4:	6994      	ldr	r4, [r2, #24]
 80095f6:	42a3      	cmp	r3, r4
 80095f8:	db01      	blt.n	80095fe <__sfputc_r+0x16>
 80095fa:	290a      	cmp	r1, #10
 80095fc:	d103      	bne.n	8009606 <__sfputc_r+0x1e>
 80095fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009602:	f7ff be86 	b.w	8009312 <__swbuf_r>
 8009606:	6813      	ldr	r3, [r2, #0]
 8009608:	1c58      	adds	r0, r3, #1
 800960a:	6010      	str	r0, [r2, #0]
 800960c:	7019      	strb	r1, [r3, #0]
 800960e:	4608      	mov	r0, r1
 8009610:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009614:	4770      	bx	lr

08009616 <__sfputs_r>:
 8009616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009618:	4606      	mov	r6, r0
 800961a:	460f      	mov	r7, r1
 800961c:	4614      	mov	r4, r2
 800961e:	18d5      	adds	r5, r2, r3
 8009620:	42ac      	cmp	r4, r5
 8009622:	d101      	bne.n	8009628 <__sfputs_r+0x12>
 8009624:	2000      	movs	r0, #0
 8009626:	e007      	b.n	8009638 <__sfputs_r+0x22>
 8009628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800962c:	463a      	mov	r2, r7
 800962e:	4630      	mov	r0, r6
 8009630:	f7ff ffda 	bl	80095e8 <__sfputc_r>
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d1f3      	bne.n	8009620 <__sfputs_r+0xa>
 8009638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800963c <_vfiprintf_r>:
 800963c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009640:	460d      	mov	r5, r1
 8009642:	b09d      	sub	sp, #116	@ 0x74
 8009644:	4614      	mov	r4, r2
 8009646:	4698      	mov	r8, r3
 8009648:	4606      	mov	r6, r0
 800964a:	b118      	cbz	r0, 8009654 <_vfiprintf_r+0x18>
 800964c:	6a03      	ldr	r3, [r0, #32]
 800964e:	b90b      	cbnz	r3, 8009654 <_vfiprintf_r+0x18>
 8009650:	f7ff fd76 	bl	8009140 <__sinit>
 8009654:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009656:	07d9      	lsls	r1, r3, #31
 8009658:	d405      	bmi.n	8009666 <_vfiprintf_r+0x2a>
 800965a:	89ab      	ldrh	r3, [r5, #12]
 800965c:	059a      	lsls	r2, r3, #22
 800965e:	d402      	bmi.n	8009666 <_vfiprintf_r+0x2a>
 8009660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009662:	f7ff ff74 	bl	800954e <__retarget_lock_acquire_recursive>
 8009666:	89ab      	ldrh	r3, [r5, #12]
 8009668:	071b      	lsls	r3, r3, #28
 800966a:	d501      	bpl.n	8009670 <_vfiprintf_r+0x34>
 800966c:	692b      	ldr	r3, [r5, #16]
 800966e:	b99b      	cbnz	r3, 8009698 <_vfiprintf_r+0x5c>
 8009670:	4629      	mov	r1, r5
 8009672:	4630      	mov	r0, r6
 8009674:	f7ff fe8c 	bl	8009390 <__swsetup_r>
 8009678:	b170      	cbz	r0, 8009698 <_vfiprintf_r+0x5c>
 800967a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800967c:	07dc      	lsls	r4, r3, #31
 800967e:	d504      	bpl.n	800968a <_vfiprintf_r+0x4e>
 8009680:	f04f 30ff 	mov.w	r0, #4294967295
 8009684:	b01d      	add	sp, #116	@ 0x74
 8009686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800968a:	89ab      	ldrh	r3, [r5, #12]
 800968c:	0598      	lsls	r0, r3, #22
 800968e:	d4f7      	bmi.n	8009680 <_vfiprintf_r+0x44>
 8009690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009692:	f7ff ff5d 	bl	8009550 <__retarget_lock_release_recursive>
 8009696:	e7f3      	b.n	8009680 <_vfiprintf_r+0x44>
 8009698:	2300      	movs	r3, #0
 800969a:	9309      	str	r3, [sp, #36]	@ 0x24
 800969c:	2320      	movs	r3, #32
 800969e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80096a6:	2330      	movs	r3, #48	@ 0x30
 80096a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009858 <_vfiprintf_r+0x21c>
 80096ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096b0:	f04f 0901 	mov.w	r9, #1
 80096b4:	4623      	mov	r3, r4
 80096b6:	469a      	mov	sl, r3
 80096b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096bc:	b10a      	cbz	r2, 80096c2 <_vfiprintf_r+0x86>
 80096be:	2a25      	cmp	r2, #37	@ 0x25
 80096c0:	d1f9      	bne.n	80096b6 <_vfiprintf_r+0x7a>
 80096c2:	ebba 0b04 	subs.w	fp, sl, r4
 80096c6:	d00b      	beq.n	80096e0 <_vfiprintf_r+0xa4>
 80096c8:	465b      	mov	r3, fp
 80096ca:	4622      	mov	r2, r4
 80096cc:	4629      	mov	r1, r5
 80096ce:	4630      	mov	r0, r6
 80096d0:	f7ff ffa1 	bl	8009616 <__sfputs_r>
 80096d4:	3001      	adds	r0, #1
 80096d6:	f000 80a7 	beq.w	8009828 <_vfiprintf_r+0x1ec>
 80096da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096dc:	445a      	add	r2, fp
 80096de:	9209      	str	r2, [sp, #36]	@ 0x24
 80096e0:	f89a 3000 	ldrb.w	r3, [sl]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 809f 	beq.w	8009828 <_vfiprintf_r+0x1ec>
 80096ea:	2300      	movs	r3, #0
 80096ec:	f04f 32ff 	mov.w	r2, #4294967295
 80096f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096f4:	f10a 0a01 	add.w	sl, sl, #1
 80096f8:	9304      	str	r3, [sp, #16]
 80096fa:	9307      	str	r3, [sp, #28]
 80096fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009700:	931a      	str	r3, [sp, #104]	@ 0x68
 8009702:	4654      	mov	r4, sl
 8009704:	2205      	movs	r2, #5
 8009706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800970a:	4853      	ldr	r0, [pc, #332]	@ (8009858 <_vfiprintf_r+0x21c>)
 800970c:	f7f6 fd98 	bl	8000240 <memchr>
 8009710:	9a04      	ldr	r2, [sp, #16]
 8009712:	b9d8      	cbnz	r0, 800974c <_vfiprintf_r+0x110>
 8009714:	06d1      	lsls	r1, r2, #27
 8009716:	bf44      	itt	mi
 8009718:	2320      	movmi	r3, #32
 800971a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800971e:	0713      	lsls	r3, r2, #28
 8009720:	bf44      	itt	mi
 8009722:	232b      	movmi	r3, #43	@ 0x2b
 8009724:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009728:	f89a 3000 	ldrb.w	r3, [sl]
 800972c:	2b2a      	cmp	r3, #42	@ 0x2a
 800972e:	d015      	beq.n	800975c <_vfiprintf_r+0x120>
 8009730:	9a07      	ldr	r2, [sp, #28]
 8009732:	4654      	mov	r4, sl
 8009734:	2000      	movs	r0, #0
 8009736:	f04f 0c0a 	mov.w	ip, #10
 800973a:	4621      	mov	r1, r4
 800973c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009740:	3b30      	subs	r3, #48	@ 0x30
 8009742:	2b09      	cmp	r3, #9
 8009744:	d94b      	bls.n	80097de <_vfiprintf_r+0x1a2>
 8009746:	b1b0      	cbz	r0, 8009776 <_vfiprintf_r+0x13a>
 8009748:	9207      	str	r2, [sp, #28]
 800974a:	e014      	b.n	8009776 <_vfiprintf_r+0x13a>
 800974c:	eba0 0308 	sub.w	r3, r0, r8
 8009750:	fa09 f303 	lsl.w	r3, r9, r3
 8009754:	4313      	orrs	r3, r2
 8009756:	9304      	str	r3, [sp, #16]
 8009758:	46a2      	mov	sl, r4
 800975a:	e7d2      	b.n	8009702 <_vfiprintf_r+0xc6>
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	1d19      	adds	r1, r3, #4
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	9103      	str	r1, [sp, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	bfbb      	ittet	lt
 8009768:	425b      	neglt	r3, r3
 800976a:	f042 0202 	orrlt.w	r2, r2, #2
 800976e:	9307      	strge	r3, [sp, #28]
 8009770:	9307      	strlt	r3, [sp, #28]
 8009772:	bfb8      	it	lt
 8009774:	9204      	strlt	r2, [sp, #16]
 8009776:	7823      	ldrb	r3, [r4, #0]
 8009778:	2b2e      	cmp	r3, #46	@ 0x2e
 800977a:	d10a      	bne.n	8009792 <_vfiprintf_r+0x156>
 800977c:	7863      	ldrb	r3, [r4, #1]
 800977e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009780:	d132      	bne.n	80097e8 <_vfiprintf_r+0x1ac>
 8009782:	9b03      	ldr	r3, [sp, #12]
 8009784:	1d1a      	adds	r2, r3, #4
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	9203      	str	r2, [sp, #12]
 800978a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800978e:	3402      	adds	r4, #2
 8009790:	9305      	str	r3, [sp, #20]
 8009792:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009868 <_vfiprintf_r+0x22c>
 8009796:	7821      	ldrb	r1, [r4, #0]
 8009798:	2203      	movs	r2, #3
 800979a:	4650      	mov	r0, sl
 800979c:	f7f6 fd50 	bl	8000240 <memchr>
 80097a0:	b138      	cbz	r0, 80097b2 <_vfiprintf_r+0x176>
 80097a2:	9b04      	ldr	r3, [sp, #16]
 80097a4:	eba0 000a 	sub.w	r0, r0, sl
 80097a8:	2240      	movs	r2, #64	@ 0x40
 80097aa:	4082      	lsls	r2, r0
 80097ac:	4313      	orrs	r3, r2
 80097ae:	3401      	adds	r4, #1
 80097b0:	9304      	str	r3, [sp, #16]
 80097b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b6:	4829      	ldr	r0, [pc, #164]	@ (800985c <_vfiprintf_r+0x220>)
 80097b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097bc:	2206      	movs	r2, #6
 80097be:	f7f6 fd3f 	bl	8000240 <memchr>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d03f      	beq.n	8009846 <_vfiprintf_r+0x20a>
 80097c6:	4b26      	ldr	r3, [pc, #152]	@ (8009860 <_vfiprintf_r+0x224>)
 80097c8:	bb1b      	cbnz	r3, 8009812 <_vfiprintf_r+0x1d6>
 80097ca:	9b03      	ldr	r3, [sp, #12]
 80097cc:	3307      	adds	r3, #7
 80097ce:	f023 0307 	bic.w	r3, r3, #7
 80097d2:	3308      	adds	r3, #8
 80097d4:	9303      	str	r3, [sp, #12]
 80097d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d8:	443b      	add	r3, r7
 80097da:	9309      	str	r3, [sp, #36]	@ 0x24
 80097dc:	e76a      	b.n	80096b4 <_vfiprintf_r+0x78>
 80097de:	fb0c 3202 	mla	r2, ip, r2, r3
 80097e2:	460c      	mov	r4, r1
 80097e4:	2001      	movs	r0, #1
 80097e6:	e7a8      	b.n	800973a <_vfiprintf_r+0xfe>
 80097e8:	2300      	movs	r3, #0
 80097ea:	3401      	adds	r4, #1
 80097ec:	9305      	str	r3, [sp, #20]
 80097ee:	4619      	mov	r1, r3
 80097f0:	f04f 0c0a 	mov.w	ip, #10
 80097f4:	4620      	mov	r0, r4
 80097f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097fa:	3a30      	subs	r2, #48	@ 0x30
 80097fc:	2a09      	cmp	r2, #9
 80097fe:	d903      	bls.n	8009808 <_vfiprintf_r+0x1cc>
 8009800:	2b00      	cmp	r3, #0
 8009802:	d0c6      	beq.n	8009792 <_vfiprintf_r+0x156>
 8009804:	9105      	str	r1, [sp, #20]
 8009806:	e7c4      	b.n	8009792 <_vfiprintf_r+0x156>
 8009808:	fb0c 2101 	mla	r1, ip, r1, r2
 800980c:	4604      	mov	r4, r0
 800980e:	2301      	movs	r3, #1
 8009810:	e7f0      	b.n	80097f4 <_vfiprintf_r+0x1b8>
 8009812:	ab03      	add	r3, sp, #12
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	462a      	mov	r2, r5
 8009818:	4b12      	ldr	r3, [pc, #72]	@ (8009864 <_vfiprintf_r+0x228>)
 800981a:	a904      	add	r1, sp, #16
 800981c:	4630      	mov	r0, r6
 800981e:	f3af 8000 	nop.w
 8009822:	4607      	mov	r7, r0
 8009824:	1c78      	adds	r0, r7, #1
 8009826:	d1d6      	bne.n	80097d6 <_vfiprintf_r+0x19a>
 8009828:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800982a:	07d9      	lsls	r1, r3, #31
 800982c:	d405      	bmi.n	800983a <_vfiprintf_r+0x1fe>
 800982e:	89ab      	ldrh	r3, [r5, #12]
 8009830:	059a      	lsls	r2, r3, #22
 8009832:	d402      	bmi.n	800983a <_vfiprintf_r+0x1fe>
 8009834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009836:	f7ff fe8b 	bl	8009550 <__retarget_lock_release_recursive>
 800983a:	89ab      	ldrh	r3, [r5, #12]
 800983c:	065b      	lsls	r3, r3, #25
 800983e:	f53f af1f 	bmi.w	8009680 <_vfiprintf_r+0x44>
 8009842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009844:	e71e      	b.n	8009684 <_vfiprintf_r+0x48>
 8009846:	ab03      	add	r3, sp, #12
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	462a      	mov	r2, r5
 800984c:	4b05      	ldr	r3, [pc, #20]	@ (8009864 <_vfiprintf_r+0x228>)
 800984e:	a904      	add	r1, sp, #16
 8009850:	4630      	mov	r0, r6
 8009852:	f000 f879 	bl	8009948 <_printf_i>
 8009856:	e7e4      	b.n	8009822 <_vfiprintf_r+0x1e6>
 8009858:	080138d0 	.word	0x080138d0
 800985c:	080138da 	.word	0x080138da
 8009860:	00000000 	.word	0x00000000
 8009864:	08009617 	.word	0x08009617
 8009868:	080138d6 	.word	0x080138d6

0800986c <_printf_common>:
 800986c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009870:	4616      	mov	r6, r2
 8009872:	4698      	mov	r8, r3
 8009874:	688a      	ldr	r2, [r1, #8]
 8009876:	690b      	ldr	r3, [r1, #16]
 8009878:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800987c:	4293      	cmp	r3, r2
 800987e:	bfb8      	it	lt
 8009880:	4613      	movlt	r3, r2
 8009882:	6033      	str	r3, [r6, #0]
 8009884:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009888:	4607      	mov	r7, r0
 800988a:	460c      	mov	r4, r1
 800988c:	b10a      	cbz	r2, 8009892 <_printf_common+0x26>
 800988e:	3301      	adds	r3, #1
 8009890:	6033      	str	r3, [r6, #0]
 8009892:	6823      	ldr	r3, [r4, #0]
 8009894:	0699      	lsls	r1, r3, #26
 8009896:	bf42      	ittt	mi
 8009898:	6833      	ldrmi	r3, [r6, #0]
 800989a:	3302      	addmi	r3, #2
 800989c:	6033      	strmi	r3, [r6, #0]
 800989e:	6825      	ldr	r5, [r4, #0]
 80098a0:	f015 0506 	ands.w	r5, r5, #6
 80098a4:	d106      	bne.n	80098b4 <_printf_common+0x48>
 80098a6:	f104 0a19 	add.w	sl, r4, #25
 80098aa:	68e3      	ldr	r3, [r4, #12]
 80098ac:	6832      	ldr	r2, [r6, #0]
 80098ae:	1a9b      	subs	r3, r3, r2
 80098b0:	42ab      	cmp	r3, r5
 80098b2:	dc26      	bgt.n	8009902 <_printf_common+0x96>
 80098b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098b8:	6822      	ldr	r2, [r4, #0]
 80098ba:	3b00      	subs	r3, #0
 80098bc:	bf18      	it	ne
 80098be:	2301      	movne	r3, #1
 80098c0:	0692      	lsls	r2, r2, #26
 80098c2:	d42b      	bmi.n	800991c <_printf_common+0xb0>
 80098c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80098c8:	4641      	mov	r1, r8
 80098ca:	4638      	mov	r0, r7
 80098cc:	47c8      	blx	r9
 80098ce:	3001      	adds	r0, #1
 80098d0:	d01e      	beq.n	8009910 <_printf_common+0xa4>
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	6922      	ldr	r2, [r4, #16]
 80098d6:	f003 0306 	and.w	r3, r3, #6
 80098da:	2b04      	cmp	r3, #4
 80098dc:	bf02      	ittt	eq
 80098de:	68e5      	ldreq	r5, [r4, #12]
 80098e0:	6833      	ldreq	r3, [r6, #0]
 80098e2:	1aed      	subeq	r5, r5, r3
 80098e4:	68a3      	ldr	r3, [r4, #8]
 80098e6:	bf0c      	ite	eq
 80098e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098ec:	2500      	movne	r5, #0
 80098ee:	4293      	cmp	r3, r2
 80098f0:	bfc4      	itt	gt
 80098f2:	1a9b      	subgt	r3, r3, r2
 80098f4:	18ed      	addgt	r5, r5, r3
 80098f6:	2600      	movs	r6, #0
 80098f8:	341a      	adds	r4, #26
 80098fa:	42b5      	cmp	r5, r6
 80098fc:	d11a      	bne.n	8009934 <_printf_common+0xc8>
 80098fe:	2000      	movs	r0, #0
 8009900:	e008      	b.n	8009914 <_printf_common+0xa8>
 8009902:	2301      	movs	r3, #1
 8009904:	4652      	mov	r2, sl
 8009906:	4641      	mov	r1, r8
 8009908:	4638      	mov	r0, r7
 800990a:	47c8      	blx	r9
 800990c:	3001      	adds	r0, #1
 800990e:	d103      	bne.n	8009918 <_printf_common+0xac>
 8009910:	f04f 30ff 	mov.w	r0, #4294967295
 8009914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009918:	3501      	adds	r5, #1
 800991a:	e7c6      	b.n	80098aa <_printf_common+0x3e>
 800991c:	18e1      	adds	r1, r4, r3
 800991e:	1c5a      	adds	r2, r3, #1
 8009920:	2030      	movs	r0, #48	@ 0x30
 8009922:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009926:	4422      	add	r2, r4
 8009928:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800992c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009930:	3302      	adds	r3, #2
 8009932:	e7c7      	b.n	80098c4 <_printf_common+0x58>
 8009934:	2301      	movs	r3, #1
 8009936:	4622      	mov	r2, r4
 8009938:	4641      	mov	r1, r8
 800993a:	4638      	mov	r0, r7
 800993c:	47c8      	blx	r9
 800993e:	3001      	adds	r0, #1
 8009940:	d0e6      	beq.n	8009910 <_printf_common+0xa4>
 8009942:	3601      	adds	r6, #1
 8009944:	e7d9      	b.n	80098fa <_printf_common+0x8e>
	...

08009948 <_printf_i>:
 8009948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800994c:	7e0f      	ldrb	r7, [r1, #24]
 800994e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009950:	2f78      	cmp	r7, #120	@ 0x78
 8009952:	4691      	mov	r9, r2
 8009954:	4680      	mov	r8, r0
 8009956:	460c      	mov	r4, r1
 8009958:	469a      	mov	sl, r3
 800995a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800995e:	d807      	bhi.n	8009970 <_printf_i+0x28>
 8009960:	2f62      	cmp	r7, #98	@ 0x62
 8009962:	d80a      	bhi.n	800997a <_printf_i+0x32>
 8009964:	2f00      	cmp	r7, #0
 8009966:	f000 80d2 	beq.w	8009b0e <_printf_i+0x1c6>
 800996a:	2f58      	cmp	r7, #88	@ 0x58
 800996c:	f000 80b9 	beq.w	8009ae2 <_printf_i+0x19a>
 8009970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009974:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009978:	e03a      	b.n	80099f0 <_printf_i+0xa8>
 800997a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800997e:	2b15      	cmp	r3, #21
 8009980:	d8f6      	bhi.n	8009970 <_printf_i+0x28>
 8009982:	a101      	add	r1, pc, #4	@ (adr r1, 8009988 <_printf_i+0x40>)
 8009984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009988:	080099e1 	.word	0x080099e1
 800998c:	080099f5 	.word	0x080099f5
 8009990:	08009971 	.word	0x08009971
 8009994:	08009971 	.word	0x08009971
 8009998:	08009971 	.word	0x08009971
 800999c:	08009971 	.word	0x08009971
 80099a0:	080099f5 	.word	0x080099f5
 80099a4:	08009971 	.word	0x08009971
 80099a8:	08009971 	.word	0x08009971
 80099ac:	08009971 	.word	0x08009971
 80099b0:	08009971 	.word	0x08009971
 80099b4:	08009af5 	.word	0x08009af5
 80099b8:	08009a1f 	.word	0x08009a1f
 80099bc:	08009aaf 	.word	0x08009aaf
 80099c0:	08009971 	.word	0x08009971
 80099c4:	08009971 	.word	0x08009971
 80099c8:	08009b17 	.word	0x08009b17
 80099cc:	08009971 	.word	0x08009971
 80099d0:	08009a1f 	.word	0x08009a1f
 80099d4:	08009971 	.word	0x08009971
 80099d8:	08009971 	.word	0x08009971
 80099dc:	08009ab7 	.word	0x08009ab7
 80099e0:	6833      	ldr	r3, [r6, #0]
 80099e2:	1d1a      	adds	r2, r3, #4
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6032      	str	r2, [r6, #0]
 80099e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80099f0:	2301      	movs	r3, #1
 80099f2:	e09d      	b.n	8009b30 <_printf_i+0x1e8>
 80099f4:	6833      	ldr	r3, [r6, #0]
 80099f6:	6820      	ldr	r0, [r4, #0]
 80099f8:	1d19      	adds	r1, r3, #4
 80099fa:	6031      	str	r1, [r6, #0]
 80099fc:	0606      	lsls	r6, r0, #24
 80099fe:	d501      	bpl.n	8009a04 <_printf_i+0xbc>
 8009a00:	681d      	ldr	r5, [r3, #0]
 8009a02:	e003      	b.n	8009a0c <_printf_i+0xc4>
 8009a04:	0645      	lsls	r5, r0, #25
 8009a06:	d5fb      	bpl.n	8009a00 <_printf_i+0xb8>
 8009a08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a0c:	2d00      	cmp	r5, #0
 8009a0e:	da03      	bge.n	8009a18 <_printf_i+0xd0>
 8009a10:	232d      	movs	r3, #45	@ 0x2d
 8009a12:	426d      	negs	r5, r5
 8009a14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a18:	4859      	ldr	r0, [pc, #356]	@ (8009b80 <_printf_i+0x238>)
 8009a1a:	230a      	movs	r3, #10
 8009a1c:	e011      	b.n	8009a42 <_printf_i+0xfa>
 8009a1e:	6821      	ldr	r1, [r4, #0]
 8009a20:	6833      	ldr	r3, [r6, #0]
 8009a22:	0608      	lsls	r0, r1, #24
 8009a24:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a28:	d402      	bmi.n	8009a30 <_printf_i+0xe8>
 8009a2a:	0649      	lsls	r1, r1, #25
 8009a2c:	bf48      	it	mi
 8009a2e:	b2ad      	uxthmi	r5, r5
 8009a30:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a32:	4853      	ldr	r0, [pc, #332]	@ (8009b80 <_printf_i+0x238>)
 8009a34:	6033      	str	r3, [r6, #0]
 8009a36:	bf14      	ite	ne
 8009a38:	230a      	movne	r3, #10
 8009a3a:	2308      	moveq	r3, #8
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a42:	6866      	ldr	r6, [r4, #4]
 8009a44:	60a6      	str	r6, [r4, #8]
 8009a46:	2e00      	cmp	r6, #0
 8009a48:	bfa2      	ittt	ge
 8009a4a:	6821      	ldrge	r1, [r4, #0]
 8009a4c:	f021 0104 	bicge.w	r1, r1, #4
 8009a50:	6021      	strge	r1, [r4, #0]
 8009a52:	b90d      	cbnz	r5, 8009a58 <_printf_i+0x110>
 8009a54:	2e00      	cmp	r6, #0
 8009a56:	d04b      	beq.n	8009af0 <_printf_i+0x1a8>
 8009a58:	4616      	mov	r6, r2
 8009a5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a5e:	fb03 5711 	mls	r7, r3, r1, r5
 8009a62:	5dc7      	ldrb	r7, [r0, r7]
 8009a64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a68:	462f      	mov	r7, r5
 8009a6a:	42bb      	cmp	r3, r7
 8009a6c:	460d      	mov	r5, r1
 8009a6e:	d9f4      	bls.n	8009a5a <_printf_i+0x112>
 8009a70:	2b08      	cmp	r3, #8
 8009a72:	d10b      	bne.n	8009a8c <_printf_i+0x144>
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	07df      	lsls	r7, r3, #31
 8009a78:	d508      	bpl.n	8009a8c <_printf_i+0x144>
 8009a7a:	6923      	ldr	r3, [r4, #16]
 8009a7c:	6861      	ldr	r1, [r4, #4]
 8009a7e:	4299      	cmp	r1, r3
 8009a80:	bfde      	ittt	le
 8009a82:	2330      	movle	r3, #48	@ 0x30
 8009a84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a8c:	1b92      	subs	r2, r2, r6
 8009a8e:	6122      	str	r2, [r4, #16]
 8009a90:	f8cd a000 	str.w	sl, [sp]
 8009a94:	464b      	mov	r3, r9
 8009a96:	aa03      	add	r2, sp, #12
 8009a98:	4621      	mov	r1, r4
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	f7ff fee6 	bl	800986c <_printf_common>
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	d14a      	bne.n	8009b3a <_printf_i+0x1f2>
 8009aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa8:	b004      	add	sp, #16
 8009aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aae:	6823      	ldr	r3, [r4, #0]
 8009ab0:	f043 0320 	orr.w	r3, r3, #32
 8009ab4:	6023      	str	r3, [r4, #0]
 8009ab6:	4833      	ldr	r0, [pc, #204]	@ (8009b84 <_printf_i+0x23c>)
 8009ab8:	2778      	movs	r7, #120	@ 0x78
 8009aba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009abe:	6823      	ldr	r3, [r4, #0]
 8009ac0:	6831      	ldr	r1, [r6, #0]
 8009ac2:	061f      	lsls	r7, r3, #24
 8009ac4:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ac8:	d402      	bmi.n	8009ad0 <_printf_i+0x188>
 8009aca:	065f      	lsls	r7, r3, #25
 8009acc:	bf48      	it	mi
 8009ace:	b2ad      	uxthmi	r5, r5
 8009ad0:	6031      	str	r1, [r6, #0]
 8009ad2:	07d9      	lsls	r1, r3, #31
 8009ad4:	bf44      	itt	mi
 8009ad6:	f043 0320 	orrmi.w	r3, r3, #32
 8009ada:	6023      	strmi	r3, [r4, #0]
 8009adc:	b11d      	cbz	r5, 8009ae6 <_printf_i+0x19e>
 8009ade:	2310      	movs	r3, #16
 8009ae0:	e7ac      	b.n	8009a3c <_printf_i+0xf4>
 8009ae2:	4827      	ldr	r0, [pc, #156]	@ (8009b80 <_printf_i+0x238>)
 8009ae4:	e7e9      	b.n	8009aba <_printf_i+0x172>
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	f023 0320 	bic.w	r3, r3, #32
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	e7f6      	b.n	8009ade <_printf_i+0x196>
 8009af0:	4616      	mov	r6, r2
 8009af2:	e7bd      	b.n	8009a70 <_printf_i+0x128>
 8009af4:	6833      	ldr	r3, [r6, #0]
 8009af6:	6825      	ldr	r5, [r4, #0]
 8009af8:	6961      	ldr	r1, [r4, #20]
 8009afa:	1d18      	adds	r0, r3, #4
 8009afc:	6030      	str	r0, [r6, #0]
 8009afe:	062e      	lsls	r6, r5, #24
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	d501      	bpl.n	8009b08 <_printf_i+0x1c0>
 8009b04:	6019      	str	r1, [r3, #0]
 8009b06:	e002      	b.n	8009b0e <_printf_i+0x1c6>
 8009b08:	0668      	lsls	r0, r5, #25
 8009b0a:	d5fb      	bpl.n	8009b04 <_printf_i+0x1bc>
 8009b0c:	8019      	strh	r1, [r3, #0]
 8009b0e:	2300      	movs	r3, #0
 8009b10:	6123      	str	r3, [r4, #16]
 8009b12:	4616      	mov	r6, r2
 8009b14:	e7bc      	b.n	8009a90 <_printf_i+0x148>
 8009b16:	6833      	ldr	r3, [r6, #0]
 8009b18:	1d1a      	adds	r2, r3, #4
 8009b1a:	6032      	str	r2, [r6, #0]
 8009b1c:	681e      	ldr	r6, [r3, #0]
 8009b1e:	6862      	ldr	r2, [r4, #4]
 8009b20:	2100      	movs	r1, #0
 8009b22:	4630      	mov	r0, r6
 8009b24:	f7f6 fb8c 	bl	8000240 <memchr>
 8009b28:	b108      	cbz	r0, 8009b2e <_printf_i+0x1e6>
 8009b2a:	1b80      	subs	r0, r0, r6
 8009b2c:	6060      	str	r0, [r4, #4]
 8009b2e:	6863      	ldr	r3, [r4, #4]
 8009b30:	6123      	str	r3, [r4, #16]
 8009b32:	2300      	movs	r3, #0
 8009b34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b38:	e7aa      	b.n	8009a90 <_printf_i+0x148>
 8009b3a:	6923      	ldr	r3, [r4, #16]
 8009b3c:	4632      	mov	r2, r6
 8009b3e:	4649      	mov	r1, r9
 8009b40:	4640      	mov	r0, r8
 8009b42:	47d0      	blx	sl
 8009b44:	3001      	adds	r0, #1
 8009b46:	d0ad      	beq.n	8009aa4 <_printf_i+0x15c>
 8009b48:	6823      	ldr	r3, [r4, #0]
 8009b4a:	079b      	lsls	r3, r3, #30
 8009b4c:	d413      	bmi.n	8009b76 <_printf_i+0x22e>
 8009b4e:	68e0      	ldr	r0, [r4, #12]
 8009b50:	9b03      	ldr	r3, [sp, #12]
 8009b52:	4298      	cmp	r0, r3
 8009b54:	bfb8      	it	lt
 8009b56:	4618      	movlt	r0, r3
 8009b58:	e7a6      	b.n	8009aa8 <_printf_i+0x160>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	4632      	mov	r2, r6
 8009b5e:	4649      	mov	r1, r9
 8009b60:	4640      	mov	r0, r8
 8009b62:	47d0      	blx	sl
 8009b64:	3001      	adds	r0, #1
 8009b66:	d09d      	beq.n	8009aa4 <_printf_i+0x15c>
 8009b68:	3501      	adds	r5, #1
 8009b6a:	68e3      	ldr	r3, [r4, #12]
 8009b6c:	9903      	ldr	r1, [sp, #12]
 8009b6e:	1a5b      	subs	r3, r3, r1
 8009b70:	42ab      	cmp	r3, r5
 8009b72:	dcf2      	bgt.n	8009b5a <_printf_i+0x212>
 8009b74:	e7eb      	b.n	8009b4e <_printf_i+0x206>
 8009b76:	2500      	movs	r5, #0
 8009b78:	f104 0619 	add.w	r6, r4, #25
 8009b7c:	e7f5      	b.n	8009b6a <_printf_i+0x222>
 8009b7e:	bf00      	nop
 8009b80:	080138e1 	.word	0x080138e1
 8009b84:	080138f2 	.word	0x080138f2

08009b88 <__sflush_r>:
 8009b88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b90:	0716      	lsls	r6, r2, #28
 8009b92:	4605      	mov	r5, r0
 8009b94:	460c      	mov	r4, r1
 8009b96:	d454      	bmi.n	8009c42 <__sflush_r+0xba>
 8009b98:	684b      	ldr	r3, [r1, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	dc02      	bgt.n	8009ba4 <__sflush_r+0x1c>
 8009b9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	dd48      	ble.n	8009c36 <__sflush_r+0xae>
 8009ba4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ba6:	2e00      	cmp	r6, #0
 8009ba8:	d045      	beq.n	8009c36 <__sflush_r+0xae>
 8009baa:	2300      	movs	r3, #0
 8009bac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009bb0:	682f      	ldr	r7, [r5, #0]
 8009bb2:	6a21      	ldr	r1, [r4, #32]
 8009bb4:	602b      	str	r3, [r5, #0]
 8009bb6:	d030      	beq.n	8009c1a <__sflush_r+0x92>
 8009bb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	0759      	lsls	r1, r3, #29
 8009bbe:	d505      	bpl.n	8009bcc <__sflush_r+0x44>
 8009bc0:	6863      	ldr	r3, [r4, #4]
 8009bc2:	1ad2      	subs	r2, r2, r3
 8009bc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009bc6:	b10b      	cbz	r3, 8009bcc <__sflush_r+0x44>
 8009bc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009bca:	1ad2      	subs	r2, r2, r3
 8009bcc:	2300      	movs	r3, #0
 8009bce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bd0:	6a21      	ldr	r1, [r4, #32]
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	47b0      	blx	r6
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	d106      	bne.n	8009bea <__sflush_r+0x62>
 8009bdc:	6829      	ldr	r1, [r5, #0]
 8009bde:	291d      	cmp	r1, #29
 8009be0:	d82b      	bhi.n	8009c3a <__sflush_r+0xb2>
 8009be2:	4a2a      	ldr	r2, [pc, #168]	@ (8009c8c <__sflush_r+0x104>)
 8009be4:	410a      	asrs	r2, r1
 8009be6:	07d6      	lsls	r6, r2, #31
 8009be8:	d427      	bmi.n	8009c3a <__sflush_r+0xb2>
 8009bea:	2200      	movs	r2, #0
 8009bec:	6062      	str	r2, [r4, #4]
 8009bee:	04d9      	lsls	r1, r3, #19
 8009bf0:	6922      	ldr	r2, [r4, #16]
 8009bf2:	6022      	str	r2, [r4, #0]
 8009bf4:	d504      	bpl.n	8009c00 <__sflush_r+0x78>
 8009bf6:	1c42      	adds	r2, r0, #1
 8009bf8:	d101      	bne.n	8009bfe <__sflush_r+0x76>
 8009bfa:	682b      	ldr	r3, [r5, #0]
 8009bfc:	b903      	cbnz	r3, 8009c00 <__sflush_r+0x78>
 8009bfe:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c02:	602f      	str	r7, [r5, #0]
 8009c04:	b1b9      	cbz	r1, 8009c36 <__sflush_r+0xae>
 8009c06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c0a:	4299      	cmp	r1, r3
 8009c0c:	d002      	beq.n	8009c14 <__sflush_r+0x8c>
 8009c0e:	4628      	mov	r0, r5
 8009c10:	f7ff fca0 	bl	8009554 <_free_r>
 8009c14:	2300      	movs	r3, #0
 8009c16:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c18:	e00d      	b.n	8009c36 <__sflush_r+0xae>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	47b0      	blx	r6
 8009c20:	4602      	mov	r2, r0
 8009c22:	1c50      	adds	r0, r2, #1
 8009c24:	d1c9      	bne.n	8009bba <__sflush_r+0x32>
 8009c26:	682b      	ldr	r3, [r5, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d0c6      	beq.n	8009bba <__sflush_r+0x32>
 8009c2c:	2b1d      	cmp	r3, #29
 8009c2e:	d001      	beq.n	8009c34 <__sflush_r+0xac>
 8009c30:	2b16      	cmp	r3, #22
 8009c32:	d11e      	bne.n	8009c72 <__sflush_r+0xea>
 8009c34:	602f      	str	r7, [r5, #0]
 8009c36:	2000      	movs	r0, #0
 8009c38:	e022      	b.n	8009c80 <__sflush_r+0xf8>
 8009c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c3e:	b21b      	sxth	r3, r3
 8009c40:	e01b      	b.n	8009c7a <__sflush_r+0xf2>
 8009c42:	690f      	ldr	r7, [r1, #16]
 8009c44:	2f00      	cmp	r7, #0
 8009c46:	d0f6      	beq.n	8009c36 <__sflush_r+0xae>
 8009c48:	0793      	lsls	r3, r2, #30
 8009c4a:	680e      	ldr	r6, [r1, #0]
 8009c4c:	bf08      	it	eq
 8009c4e:	694b      	ldreq	r3, [r1, #20]
 8009c50:	600f      	str	r7, [r1, #0]
 8009c52:	bf18      	it	ne
 8009c54:	2300      	movne	r3, #0
 8009c56:	eba6 0807 	sub.w	r8, r6, r7
 8009c5a:	608b      	str	r3, [r1, #8]
 8009c5c:	f1b8 0f00 	cmp.w	r8, #0
 8009c60:	dde9      	ble.n	8009c36 <__sflush_r+0xae>
 8009c62:	6a21      	ldr	r1, [r4, #32]
 8009c64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009c66:	4643      	mov	r3, r8
 8009c68:	463a      	mov	r2, r7
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	47b0      	blx	r6
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	dc08      	bgt.n	8009c84 <__sflush_r+0xfc>
 8009c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c7a:	81a3      	strh	r3, [r4, #12]
 8009c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c84:	4407      	add	r7, r0
 8009c86:	eba8 0800 	sub.w	r8, r8, r0
 8009c8a:	e7e7      	b.n	8009c5c <__sflush_r+0xd4>
 8009c8c:	dfbffffe 	.word	0xdfbffffe

08009c90 <_fflush_r>:
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	690b      	ldr	r3, [r1, #16]
 8009c94:	4605      	mov	r5, r0
 8009c96:	460c      	mov	r4, r1
 8009c98:	b913      	cbnz	r3, 8009ca0 <_fflush_r+0x10>
 8009c9a:	2500      	movs	r5, #0
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	b118      	cbz	r0, 8009caa <_fflush_r+0x1a>
 8009ca2:	6a03      	ldr	r3, [r0, #32]
 8009ca4:	b90b      	cbnz	r3, 8009caa <_fflush_r+0x1a>
 8009ca6:	f7ff fa4b 	bl	8009140 <__sinit>
 8009caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d0f3      	beq.n	8009c9a <_fflush_r+0xa>
 8009cb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009cb4:	07d0      	lsls	r0, r2, #31
 8009cb6:	d404      	bmi.n	8009cc2 <_fflush_r+0x32>
 8009cb8:	0599      	lsls	r1, r3, #22
 8009cba:	d402      	bmi.n	8009cc2 <_fflush_r+0x32>
 8009cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cbe:	f7ff fc46 	bl	800954e <__retarget_lock_acquire_recursive>
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	4621      	mov	r1, r4
 8009cc6:	f7ff ff5f 	bl	8009b88 <__sflush_r>
 8009cca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ccc:	07da      	lsls	r2, r3, #31
 8009cce:	4605      	mov	r5, r0
 8009cd0:	d4e4      	bmi.n	8009c9c <_fflush_r+0xc>
 8009cd2:	89a3      	ldrh	r3, [r4, #12]
 8009cd4:	059b      	lsls	r3, r3, #22
 8009cd6:	d4e1      	bmi.n	8009c9c <_fflush_r+0xc>
 8009cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cda:	f7ff fc39 	bl	8009550 <__retarget_lock_release_recursive>
 8009cde:	e7dd      	b.n	8009c9c <_fflush_r+0xc>

08009ce0 <__swhatbuf_r>:
 8009ce0:	b570      	push	{r4, r5, r6, lr}
 8009ce2:	460c      	mov	r4, r1
 8009ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce8:	2900      	cmp	r1, #0
 8009cea:	b096      	sub	sp, #88	@ 0x58
 8009cec:	4615      	mov	r5, r2
 8009cee:	461e      	mov	r6, r3
 8009cf0:	da0d      	bge.n	8009d0e <__swhatbuf_r+0x2e>
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009cf8:	f04f 0100 	mov.w	r1, #0
 8009cfc:	bf14      	ite	ne
 8009cfe:	2340      	movne	r3, #64	@ 0x40
 8009d00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d04:	2000      	movs	r0, #0
 8009d06:	6031      	str	r1, [r6, #0]
 8009d08:	602b      	str	r3, [r5, #0]
 8009d0a:	b016      	add	sp, #88	@ 0x58
 8009d0c:	bd70      	pop	{r4, r5, r6, pc}
 8009d0e:	466a      	mov	r2, sp
 8009d10:	f000 f848 	bl	8009da4 <_fstat_r>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	dbec      	blt.n	8009cf2 <__swhatbuf_r+0x12>
 8009d18:	9901      	ldr	r1, [sp, #4]
 8009d1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d22:	4259      	negs	r1, r3
 8009d24:	4159      	adcs	r1, r3
 8009d26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d2a:	e7eb      	b.n	8009d04 <__swhatbuf_r+0x24>

08009d2c <__smakebuf_r>:
 8009d2c:	898b      	ldrh	r3, [r1, #12]
 8009d2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d30:	079d      	lsls	r5, r3, #30
 8009d32:	4606      	mov	r6, r0
 8009d34:	460c      	mov	r4, r1
 8009d36:	d507      	bpl.n	8009d48 <__smakebuf_r+0x1c>
 8009d38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	6123      	str	r3, [r4, #16]
 8009d40:	2301      	movs	r3, #1
 8009d42:	6163      	str	r3, [r4, #20]
 8009d44:	b003      	add	sp, #12
 8009d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d48:	ab01      	add	r3, sp, #4
 8009d4a:	466a      	mov	r2, sp
 8009d4c:	f7ff ffc8 	bl	8009ce0 <__swhatbuf_r>
 8009d50:	9f00      	ldr	r7, [sp, #0]
 8009d52:	4605      	mov	r5, r0
 8009d54:	4639      	mov	r1, r7
 8009d56:	4630      	mov	r0, r6
 8009d58:	f7ff f8da 	bl	8008f10 <_malloc_r>
 8009d5c:	b948      	cbnz	r0, 8009d72 <__smakebuf_r+0x46>
 8009d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d62:	059a      	lsls	r2, r3, #22
 8009d64:	d4ee      	bmi.n	8009d44 <__smakebuf_r+0x18>
 8009d66:	f023 0303 	bic.w	r3, r3, #3
 8009d6a:	f043 0302 	orr.w	r3, r3, #2
 8009d6e:	81a3      	strh	r3, [r4, #12]
 8009d70:	e7e2      	b.n	8009d38 <__smakebuf_r+0xc>
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	6020      	str	r0, [r4, #0]
 8009d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d7a:	81a3      	strh	r3, [r4, #12]
 8009d7c:	9b01      	ldr	r3, [sp, #4]
 8009d7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d82:	b15b      	cbz	r3, 8009d9c <__smakebuf_r+0x70>
 8009d84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f000 f81d 	bl	8009dc8 <_isatty_r>
 8009d8e:	b128      	cbz	r0, 8009d9c <__smakebuf_r+0x70>
 8009d90:	89a3      	ldrh	r3, [r4, #12]
 8009d92:	f023 0303 	bic.w	r3, r3, #3
 8009d96:	f043 0301 	orr.w	r3, r3, #1
 8009d9a:	81a3      	strh	r3, [r4, #12]
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	431d      	orrs	r5, r3
 8009da0:	81a5      	strh	r5, [r4, #12]
 8009da2:	e7cf      	b.n	8009d44 <__smakebuf_r+0x18>

08009da4 <_fstat_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4d07      	ldr	r5, [pc, #28]	@ (8009dc4 <_fstat_r+0x20>)
 8009da8:	2300      	movs	r3, #0
 8009daa:	4604      	mov	r4, r0
 8009dac:	4608      	mov	r0, r1
 8009dae:	4611      	mov	r1, r2
 8009db0:	602b      	str	r3, [r5, #0]
 8009db2:	f000 f821 	bl	8009df8 <_fstat>
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	d102      	bne.n	8009dc0 <_fstat_r+0x1c>
 8009dba:	682b      	ldr	r3, [r5, #0]
 8009dbc:	b103      	cbz	r3, 8009dc0 <_fstat_r+0x1c>
 8009dbe:	6023      	str	r3, [r4, #0]
 8009dc0:	bd38      	pop	{r3, r4, r5, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20002e44 	.word	0x20002e44

08009dc8 <_isatty_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	4d06      	ldr	r5, [pc, #24]	@ (8009de4 <_isatty_r+0x1c>)
 8009dcc:	2300      	movs	r3, #0
 8009dce:	4604      	mov	r4, r0
 8009dd0:	4608      	mov	r0, r1
 8009dd2:	602b      	str	r3, [r5, #0]
 8009dd4:	f000 f818 	bl	8009e08 <_isatty>
 8009dd8:	1c43      	adds	r3, r0, #1
 8009dda:	d102      	bne.n	8009de2 <_isatty_r+0x1a>
 8009ddc:	682b      	ldr	r3, [r5, #0]
 8009dde:	b103      	cbz	r3, 8009de2 <_isatty_r+0x1a>
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	bd38      	pop	{r3, r4, r5, pc}
 8009de4:	20002e44 	.word	0x20002e44

08009de8 <_close>:
 8009de8:	4b02      	ldr	r3, [pc, #8]	@ (8009df4 <_close+0xc>)
 8009dea:	2258      	movs	r2, #88	@ 0x58
 8009dec:	601a      	str	r2, [r3, #0]
 8009dee:	f04f 30ff 	mov.w	r0, #4294967295
 8009df2:	4770      	bx	lr
 8009df4:	20002e44 	.word	0x20002e44

08009df8 <_fstat>:
 8009df8:	4b02      	ldr	r3, [pc, #8]	@ (8009e04 <_fstat+0xc>)
 8009dfa:	2258      	movs	r2, #88	@ 0x58
 8009dfc:	601a      	str	r2, [r3, #0]
 8009dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009e02:	4770      	bx	lr
 8009e04:	20002e44 	.word	0x20002e44

08009e08 <_isatty>:
 8009e08:	4b02      	ldr	r3, [pc, #8]	@ (8009e14 <_isatty+0xc>)
 8009e0a:	2258      	movs	r2, #88	@ 0x58
 8009e0c:	601a      	str	r2, [r3, #0]
 8009e0e:	2000      	movs	r0, #0
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	20002e44 	.word	0x20002e44

08009e18 <_lseek>:
 8009e18:	4b02      	ldr	r3, [pc, #8]	@ (8009e24 <_lseek+0xc>)
 8009e1a:	2258      	movs	r2, #88	@ 0x58
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e22:	4770      	bx	lr
 8009e24:	20002e44 	.word	0x20002e44

08009e28 <_read>:
 8009e28:	4b02      	ldr	r3, [pc, #8]	@ (8009e34 <_read+0xc>)
 8009e2a:	2258      	movs	r2, #88	@ 0x58
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e32:	4770      	bx	lr
 8009e34:	20002e44 	.word	0x20002e44

08009e38 <_write>:
 8009e38:	4b02      	ldr	r3, [pc, #8]	@ (8009e44 <_write+0xc>)
 8009e3a:	2258      	movs	r2, #88	@ 0x58
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e42:	4770      	bx	lr
 8009e44:	20002e44 	.word	0x20002e44

08009e48 <_init>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	bf00      	nop
 8009e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4e:	bc08      	pop	{r3}
 8009e50:	469e      	mov	lr, r3
 8009e52:	4770      	bx	lr

08009e54 <_fini>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	bf00      	nop
 8009e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5a:	bc08      	pop	{r3}
 8009e5c:	469e      	mov	lr, r3
 8009e5e:	4770      	bx	lr
